/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the AmountValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AmountValue{}

// AmountValue Represents the amount value with the currency.
type AmountValue struct {
	// Nominal value in corresponding unit
	Value *string `json:"value,omitempty"`
	// {XXX, XXC, XXM, XXP, XXU} or currencies according to ISO-4217 (EUR, USD, GBP,...)
	Unit *string `json:"unit,omitempty"`
}

// NewAmountValue instantiates a new AmountValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAmountValue() *AmountValue {
	this := AmountValue{}
	return &this
}

// NewAmountValueWithDefaults instantiates a new AmountValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAmountValueWithDefaults() *AmountValue {
	this := AmountValue{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *AmountValue) GetValue() string {
	if o == nil || IsNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountValue) GetValueOk() (*string, bool) {
	if o == nil || IsNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *AmountValue) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *AmountValue) SetValue(v string) {
	o.Value = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *AmountValue) GetUnit() string {
	if o == nil || IsNil(o.Unit) {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AmountValue) GetUnitOk() (*string, bool) {
	if o == nil || IsNil(o.Unit) {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *AmountValue) HasUnit() bool {
	if o != nil && !IsNil(o.Unit) {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *AmountValue) SetUnit(v string) {
	o.Unit = &v
}

func (o AmountValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AmountValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !IsNil(o.Unit) {
		toSerialize["unit"] = o.Unit
	}
	return toSerialize, nil
}

type NullableAmountValue struct {
	value *AmountValue
	isSet bool
}

func (v NullableAmountValue) Get() *AmountValue {
	return v.value
}

func (v *NullableAmountValue) Set(val *AmountValue) {
	v.value = val
	v.isSet = true
}

func (v NullableAmountValue) IsSet() bool {
	return v.isSet
}

func (v *NullableAmountValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAmountValue(val *AmountValue) *NullableAmountValue {
	return &NullableAmountValue{value: val, isSet: true}
}

func (v NullableAmountValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAmountValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


