/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the AccountBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountBalance{}

// AccountBalance Account information, including cash balance and buying power
type AccountBalance struct {
	Account *Account `json:"account,omitempty"`
	// Account identifier (UUID)
	AccountId *string `json:"accountId,omitempty"`
	Balance *AmountValue `json:"balance,omitempty"`
	BalanceEUR *AmountValue `json:"balanceEUR,omitempty"`
	AvailableCashAmount *AmountValue `json:"availableCashAmount,omitempty"`
	AvailableCashAmountEUR *AmountValue `json:"availableCashAmountEUR,omitempty"`
}

// NewAccountBalance instantiates a new AccountBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountBalance() *AccountBalance {
	this := AccountBalance{}
	return &this
}

// NewAccountBalanceWithDefaults instantiates a new AccountBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountBalanceWithDefaults() *AccountBalance {
	this := AccountBalance{}
	return &this
}

// GetAccount returns the Account field value if set, zero value otherwise.
func (o *AccountBalance) GetAccount() Account {
	if o == nil || IsNil(o.Account) {
		var ret Account
		return ret
	}
	return *o.Account
}

// GetAccountOk returns a tuple with the Account field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBalance) GetAccountOk() (*Account, bool) {
	if o == nil || IsNil(o.Account) {
		return nil, false
	}
	return o.Account, true
}

// HasAccount returns a boolean if a field has been set.
func (o *AccountBalance) HasAccount() bool {
	if o != nil && !IsNil(o.Account) {
		return true
	}

	return false
}

// SetAccount gets a reference to the given Account and assigns it to the Account field.
func (o *AccountBalance) SetAccount(v Account) {
	o.Account = &v
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *AccountBalance) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBalance) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *AccountBalance) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *AccountBalance) SetAccountId(v string) {
	o.AccountId = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *AccountBalance) GetBalance() AmountValue {
	if o == nil || IsNil(o.Balance) {
		var ret AmountValue
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBalance) GetBalanceOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *AccountBalance) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given AmountValue and assigns it to the Balance field.
func (o *AccountBalance) SetBalance(v AmountValue) {
	o.Balance = &v
}

// GetBalanceEUR returns the BalanceEUR field value if set, zero value otherwise.
func (o *AccountBalance) GetBalanceEUR() AmountValue {
	if o == nil || IsNil(o.BalanceEUR) {
		var ret AmountValue
		return ret
	}
	return *o.BalanceEUR
}

// GetBalanceEUROk returns a tuple with the BalanceEUR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBalance) GetBalanceEUROk() (*AmountValue, bool) {
	if o == nil || IsNil(o.BalanceEUR) {
		return nil, false
	}
	return o.BalanceEUR, true
}

// HasBalanceEUR returns a boolean if a field has been set.
func (o *AccountBalance) HasBalanceEUR() bool {
	if o != nil && !IsNil(o.BalanceEUR) {
		return true
	}

	return false
}

// SetBalanceEUR gets a reference to the given AmountValue and assigns it to the BalanceEUR field.
func (o *AccountBalance) SetBalanceEUR(v AmountValue) {
	o.BalanceEUR = &v
}

// GetAvailableCashAmount returns the AvailableCashAmount field value if set, zero value otherwise.
func (o *AccountBalance) GetAvailableCashAmount() AmountValue {
	if o == nil || IsNil(o.AvailableCashAmount) {
		var ret AmountValue
		return ret
	}
	return *o.AvailableCashAmount
}

// GetAvailableCashAmountOk returns a tuple with the AvailableCashAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBalance) GetAvailableCashAmountOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.AvailableCashAmount) {
		return nil, false
	}
	return o.AvailableCashAmount, true
}

// HasAvailableCashAmount returns a boolean if a field has been set.
func (o *AccountBalance) HasAvailableCashAmount() bool {
	if o != nil && !IsNil(o.AvailableCashAmount) {
		return true
	}

	return false
}

// SetAvailableCashAmount gets a reference to the given AmountValue and assigns it to the AvailableCashAmount field.
func (o *AccountBalance) SetAvailableCashAmount(v AmountValue) {
	o.AvailableCashAmount = &v
}

// GetAvailableCashAmountEUR returns the AvailableCashAmountEUR field value if set, zero value otherwise.
func (o *AccountBalance) GetAvailableCashAmountEUR() AmountValue {
	if o == nil || IsNil(o.AvailableCashAmountEUR) {
		var ret AmountValue
		return ret
	}
	return *o.AvailableCashAmountEUR
}

// GetAvailableCashAmountEUROk returns a tuple with the AvailableCashAmountEUR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountBalance) GetAvailableCashAmountEUROk() (*AmountValue, bool) {
	if o == nil || IsNil(o.AvailableCashAmountEUR) {
		return nil, false
	}
	return o.AvailableCashAmountEUR, true
}

// HasAvailableCashAmountEUR returns a boolean if a field has been set.
func (o *AccountBalance) HasAvailableCashAmountEUR() bool {
	if o != nil && !IsNil(o.AvailableCashAmountEUR) {
		return true
	}

	return false
}

// SetAvailableCashAmountEUR gets a reference to the given AmountValue and assigns it to the AvailableCashAmountEUR field.
func (o *AccountBalance) SetAvailableCashAmountEUR(v AmountValue) {
	o.AvailableCashAmountEUR = &v
}

func (o AccountBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Account) {
		toSerialize["account"] = o.Account
	}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if !IsNil(o.BalanceEUR) {
		toSerialize["balanceEUR"] = o.BalanceEUR
	}
	if !IsNil(o.AvailableCashAmount) {
		toSerialize["availableCashAmount"] = o.AvailableCashAmount
	}
	if !IsNil(o.AvailableCashAmountEUR) {
		toSerialize["availableCashAmountEUR"] = o.AvailableCashAmountEUR
	}
	return toSerialize, nil
}

type NullableAccountBalance struct {
	value *AccountBalance
	isSet bool
}

func (v NullableAccountBalance) Get() *AccountBalance {
	return v.value
}

func (v *NullableAccountBalance) Set(val *AccountBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountBalance(val *AccountBalance) *NullableAccountBalance {
	return &NullableAccountBalance{value: val, isSet: true}
}

func (v NullableAccountBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


