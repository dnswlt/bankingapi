/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the StaticData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StaticData{}

// StaticData Static data of the instrument.
type StaticData struct {
	// Ticker symbol or notation of a security
	Notation *string `json:"notation,omitempty"`
	Currency *CurrencyString `json:"currency,omitempty"`
	// Instrument type
	InstrumentType *string `json:"instrumentType,omitempty"`
	// Flag indicating - if TRUE - that EU-regulation referring to Packaged Retail and Insurance-based Investment Products - PRIIPs) is relevant for the instrument
	PriipsRelevant *bool `json:"priipsRelevant,omitempty"`
	// Flag indicating - if TRUE - that a Key Information Document (KID) of the issuer is electronically available. Before order placement a static note ought to displayed in such a case.
	KidAvailable *bool `json:"kidAvailable,omitempty"`
	// Flag indicating - if TRUE - that within prevalidation and before placement of a buy order the investor must approve, e.g., by a frontend checkbox that no shipping of fund sales information is required (waiver); a static note regarding that information ought to be displayed in such a case. Without an explicit waiver the order placement must be prevented in the frontend.
	ShippingWaiverRequired *bool `json:"shippingWaiverRequired,omitempty"`
	// Flag indicating - if TRUE - that within prevalidation and before placement of a buy order a static note must be displayed indicating that the redemption of the fund is limited.
	FundRedemptionLimited *bool `json:"fundRedemptionLimited,omitempty"`
}

// NewStaticData instantiates a new StaticData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStaticData() *StaticData {
	this := StaticData{}
	return &this
}

// NewStaticDataWithDefaults instantiates a new StaticData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStaticDataWithDefaults() *StaticData {
	this := StaticData{}
	return &this
}

// GetNotation returns the Notation field value if set, zero value otherwise.
func (o *StaticData) GetNotation() string {
	if o == nil || IsNil(o.Notation) {
		var ret string
		return ret
	}
	return *o.Notation
}

// GetNotationOk returns a tuple with the Notation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticData) GetNotationOk() (*string, bool) {
	if o == nil || IsNil(o.Notation) {
		return nil, false
	}
	return o.Notation, true
}

// HasNotation returns a boolean if a field has been set.
func (o *StaticData) HasNotation() bool {
	if o != nil && !IsNil(o.Notation) {
		return true
	}

	return false
}

// SetNotation gets a reference to the given string and assigns it to the Notation field.
func (o *StaticData) SetNotation(v string) {
	o.Notation = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *StaticData) GetCurrency() CurrencyString {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyString
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticData) GetCurrencyOk() (*CurrencyString, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *StaticData) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyString and assigns it to the Currency field.
func (o *StaticData) SetCurrency(v CurrencyString) {
	o.Currency = &v
}

// GetInstrumentType returns the InstrumentType field value if set, zero value otherwise.
func (o *StaticData) GetInstrumentType() string {
	if o == nil || IsNil(o.InstrumentType) {
		var ret string
		return ret
	}
	return *o.InstrumentType
}

// GetInstrumentTypeOk returns a tuple with the InstrumentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticData) GetInstrumentTypeOk() (*string, bool) {
	if o == nil || IsNil(o.InstrumentType) {
		return nil, false
	}
	return o.InstrumentType, true
}

// HasInstrumentType returns a boolean if a field has been set.
func (o *StaticData) HasInstrumentType() bool {
	if o != nil && !IsNil(o.InstrumentType) {
		return true
	}

	return false
}

// SetInstrumentType gets a reference to the given string and assigns it to the InstrumentType field.
func (o *StaticData) SetInstrumentType(v string) {
	o.InstrumentType = &v
}

// GetPriipsRelevant returns the PriipsRelevant field value if set, zero value otherwise.
func (o *StaticData) GetPriipsRelevant() bool {
	if o == nil || IsNil(o.PriipsRelevant) {
		var ret bool
		return ret
	}
	return *o.PriipsRelevant
}

// GetPriipsRelevantOk returns a tuple with the PriipsRelevant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticData) GetPriipsRelevantOk() (*bool, bool) {
	if o == nil || IsNil(o.PriipsRelevant) {
		return nil, false
	}
	return o.PriipsRelevant, true
}

// HasPriipsRelevant returns a boolean if a field has been set.
func (o *StaticData) HasPriipsRelevant() bool {
	if o != nil && !IsNil(o.PriipsRelevant) {
		return true
	}

	return false
}

// SetPriipsRelevant gets a reference to the given bool and assigns it to the PriipsRelevant field.
func (o *StaticData) SetPriipsRelevant(v bool) {
	o.PriipsRelevant = &v
}

// GetKidAvailable returns the KidAvailable field value if set, zero value otherwise.
func (o *StaticData) GetKidAvailable() bool {
	if o == nil || IsNil(o.KidAvailable) {
		var ret bool
		return ret
	}
	return *o.KidAvailable
}

// GetKidAvailableOk returns a tuple with the KidAvailable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticData) GetKidAvailableOk() (*bool, bool) {
	if o == nil || IsNil(o.KidAvailable) {
		return nil, false
	}
	return o.KidAvailable, true
}

// HasKidAvailable returns a boolean if a field has been set.
func (o *StaticData) HasKidAvailable() bool {
	if o != nil && !IsNil(o.KidAvailable) {
		return true
	}

	return false
}

// SetKidAvailable gets a reference to the given bool and assigns it to the KidAvailable field.
func (o *StaticData) SetKidAvailable(v bool) {
	o.KidAvailable = &v
}

// GetShippingWaiverRequired returns the ShippingWaiverRequired field value if set, zero value otherwise.
func (o *StaticData) GetShippingWaiverRequired() bool {
	if o == nil || IsNil(o.ShippingWaiverRequired) {
		var ret bool
		return ret
	}
	return *o.ShippingWaiverRequired
}

// GetShippingWaiverRequiredOk returns a tuple with the ShippingWaiverRequired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticData) GetShippingWaiverRequiredOk() (*bool, bool) {
	if o == nil || IsNil(o.ShippingWaiverRequired) {
		return nil, false
	}
	return o.ShippingWaiverRequired, true
}

// HasShippingWaiverRequired returns a boolean if a field has been set.
func (o *StaticData) HasShippingWaiverRequired() bool {
	if o != nil && !IsNil(o.ShippingWaiverRequired) {
		return true
	}

	return false
}

// SetShippingWaiverRequired gets a reference to the given bool and assigns it to the ShippingWaiverRequired field.
func (o *StaticData) SetShippingWaiverRequired(v bool) {
	o.ShippingWaiverRequired = &v
}

// GetFundRedemptionLimited returns the FundRedemptionLimited field value if set, zero value otherwise.
func (o *StaticData) GetFundRedemptionLimited() bool {
	if o == nil || IsNil(o.FundRedemptionLimited) {
		var ret bool
		return ret
	}
	return *o.FundRedemptionLimited
}

// GetFundRedemptionLimitedOk returns a tuple with the FundRedemptionLimited field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StaticData) GetFundRedemptionLimitedOk() (*bool, bool) {
	if o == nil || IsNil(o.FundRedemptionLimited) {
		return nil, false
	}
	return o.FundRedemptionLimited, true
}

// HasFundRedemptionLimited returns a boolean if a field has been set.
func (o *StaticData) HasFundRedemptionLimited() bool {
	if o != nil && !IsNil(o.FundRedemptionLimited) {
		return true
	}

	return false
}

// SetFundRedemptionLimited gets a reference to the given bool and assigns it to the FundRedemptionLimited field.
func (o *StaticData) SetFundRedemptionLimited(v bool) {
	o.FundRedemptionLimited = &v
}

func (o StaticData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StaticData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Notation) {
		toSerialize["notation"] = o.Notation
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.InstrumentType) {
		toSerialize["instrumentType"] = o.InstrumentType
	}
	if !IsNil(o.PriipsRelevant) {
		toSerialize["priipsRelevant"] = o.PriipsRelevant
	}
	if !IsNil(o.KidAvailable) {
		toSerialize["kidAvailable"] = o.KidAvailable
	}
	if !IsNil(o.ShippingWaiverRequired) {
		toSerialize["shippingWaiverRequired"] = o.ShippingWaiverRequired
	}
	if !IsNil(o.FundRedemptionLimited) {
		toSerialize["fundRedemptionLimited"] = o.FundRedemptionLimited
	}
	return toSerialize, nil
}

type NullableStaticData struct {
	value *StaticData
	isSet bool
}

func (v NullableStaticData) Get() *StaticData {
	return v.value
}

func (v *NullableStaticData) Set(val *StaticData) {
	v.value = val
	v.isSet = true
}

func (v NullableStaticData) IsSet() bool {
	return v.isSet
}

func (v *NullableStaticData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStaticData(val *StaticData) *NullableStaticData {
	return &NullableStaticData{value: val, isSet: true}
}

func (v NullableStaticData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStaticData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


