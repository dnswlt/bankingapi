/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the Inducement type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Inducement{}

// Inducement Model for an inducement.
type Inducement struct {
	Amount *AmountValue `json:"amount,omitempty"`
	// TRUE, if the amount is an estimation
	Estimated *bool `json:"estimated,omitempty"`
}

// NewInducement instantiates a new Inducement object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInducement() *Inducement {
	this := Inducement{}
	return &this
}

// NewInducementWithDefaults instantiates a new Inducement object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInducementWithDefaults() *Inducement {
	this := Inducement{}
	return &this
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *Inducement) GetAmount() AmountValue {
	if o == nil || IsNil(o.Amount) {
		var ret AmountValue
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inducement) GetAmountOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *Inducement) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given AmountValue and assigns it to the Amount field.
func (o *Inducement) SetAmount(v AmountValue) {
	o.Amount = &v
}

// GetEstimated returns the Estimated field value if set, zero value otherwise.
func (o *Inducement) GetEstimated() bool {
	if o == nil || IsNil(o.Estimated) {
		var ret bool
		return ret
	}
	return *o.Estimated
}

// GetEstimatedOk returns a tuple with the Estimated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Inducement) GetEstimatedOk() (*bool, bool) {
	if o == nil || IsNil(o.Estimated) {
		return nil, false
	}
	return o.Estimated, true
}

// HasEstimated returns a boolean if a field has been set.
func (o *Inducement) HasEstimated() bool {
	if o != nil && !IsNil(o.Estimated) {
		return true
	}

	return false
}

// SetEstimated gets a reference to the given bool and assigns it to the Estimated field.
func (o *Inducement) SetEstimated(v bool) {
	o.Estimated = &v
}

func (o Inducement) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Inducement) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Estimated) {
		toSerialize["estimated"] = o.Estimated
	}
	return toSerialize, nil
}

type NullableInducement struct {
	value *Inducement
	isSet bool
}

func (v NullableInducement) Get() *Inducement {
	return v.value
}

func (v *NullableInducement) Set(val *Inducement) {
	v.value = val
	v.isSet = true
}

func (v NullableInducement) IsSet() bool {
	return v.isSet
}

func (v *NullableInducement) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInducement(val *Inducement) *NullableInducement {
	return &NullableInducement{value: val, isSet: true}
}

func (v NullableInducement) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInducement) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


