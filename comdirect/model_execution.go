/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the Execution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Execution{}

// Execution Model for an order's execution.
type Execution struct {
	// Execution ID (UUID)
	ExecutionId *string `json:"executionId,omitempty"`
	// Position (by time) of the execution of an order
	ExecutionNumber *int32 `json:"executionNumber,omitempty"`
	ExecutedQuantity *AmountValue `json:"executedQuantity,omitempty"`
	ExecutionPrice *AmountValue `json:"executionPrice,omitempty"`
	ExecutionTimestamp *TimestampString `json:"executionTimestamp,omitempty"`
}

// NewExecution instantiates a new Execution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecution() *Execution {
	this := Execution{}
	return &this
}

// NewExecutionWithDefaults instantiates a new Execution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionWithDefaults() *Execution {
	this := Execution{}
	return &this
}

// GetExecutionId returns the ExecutionId field value if set, zero value otherwise.
func (o *Execution) GetExecutionId() string {
	if o == nil || IsNil(o.ExecutionId) {
		var ret string
		return ret
	}
	return *o.ExecutionId
}

// GetExecutionIdOk returns a tuple with the ExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetExecutionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ExecutionId) {
		return nil, false
	}
	return o.ExecutionId, true
}

// HasExecutionId returns a boolean if a field has been set.
func (o *Execution) HasExecutionId() bool {
	if o != nil && !IsNil(o.ExecutionId) {
		return true
	}

	return false
}

// SetExecutionId gets a reference to the given string and assigns it to the ExecutionId field.
func (o *Execution) SetExecutionId(v string) {
	o.ExecutionId = &v
}

// GetExecutionNumber returns the ExecutionNumber field value if set, zero value otherwise.
func (o *Execution) GetExecutionNumber() int32 {
	if o == nil || IsNil(o.ExecutionNumber) {
		var ret int32
		return ret
	}
	return *o.ExecutionNumber
}

// GetExecutionNumberOk returns a tuple with the ExecutionNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetExecutionNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.ExecutionNumber) {
		return nil, false
	}
	return o.ExecutionNumber, true
}

// HasExecutionNumber returns a boolean if a field has been set.
func (o *Execution) HasExecutionNumber() bool {
	if o != nil && !IsNil(o.ExecutionNumber) {
		return true
	}

	return false
}

// SetExecutionNumber gets a reference to the given int32 and assigns it to the ExecutionNumber field.
func (o *Execution) SetExecutionNumber(v int32) {
	o.ExecutionNumber = &v
}

// GetExecutedQuantity returns the ExecutedQuantity field value if set, zero value otherwise.
func (o *Execution) GetExecutedQuantity() AmountValue {
	if o == nil || IsNil(o.ExecutedQuantity) {
		var ret AmountValue
		return ret
	}
	return *o.ExecutedQuantity
}

// GetExecutedQuantityOk returns a tuple with the ExecutedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetExecutedQuantityOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.ExecutedQuantity) {
		return nil, false
	}
	return o.ExecutedQuantity, true
}

// HasExecutedQuantity returns a boolean if a field has been set.
func (o *Execution) HasExecutedQuantity() bool {
	if o != nil && !IsNil(o.ExecutedQuantity) {
		return true
	}

	return false
}

// SetExecutedQuantity gets a reference to the given AmountValue and assigns it to the ExecutedQuantity field.
func (o *Execution) SetExecutedQuantity(v AmountValue) {
	o.ExecutedQuantity = &v
}

// GetExecutionPrice returns the ExecutionPrice field value if set, zero value otherwise.
func (o *Execution) GetExecutionPrice() AmountValue {
	if o == nil || IsNil(o.ExecutionPrice) {
		var ret AmountValue
		return ret
	}
	return *o.ExecutionPrice
}

// GetExecutionPriceOk returns a tuple with the ExecutionPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetExecutionPriceOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.ExecutionPrice) {
		return nil, false
	}
	return o.ExecutionPrice, true
}

// HasExecutionPrice returns a boolean if a field has been set.
func (o *Execution) HasExecutionPrice() bool {
	if o != nil && !IsNil(o.ExecutionPrice) {
		return true
	}

	return false
}

// SetExecutionPrice gets a reference to the given AmountValue and assigns it to the ExecutionPrice field.
func (o *Execution) SetExecutionPrice(v AmountValue) {
	o.ExecutionPrice = &v
}

// GetExecutionTimestamp returns the ExecutionTimestamp field value if set, zero value otherwise.
func (o *Execution) GetExecutionTimestamp() TimestampString {
	if o == nil || IsNil(o.ExecutionTimestamp) {
		var ret TimestampString
		return ret
	}
	return *o.ExecutionTimestamp
}

// GetExecutionTimestampOk returns a tuple with the ExecutionTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Execution) GetExecutionTimestampOk() (*TimestampString, bool) {
	if o == nil || IsNil(o.ExecutionTimestamp) {
		return nil, false
	}
	return o.ExecutionTimestamp, true
}

// HasExecutionTimestamp returns a boolean if a field has been set.
func (o *Execution) HasExecutionTimestamp() bool {
	if o != nil && !IsNil(o.ExecutionTimestamp) {
		return true
	}

	return false
}

// SetExecutionTimestamp gets a reference to the given TimestampString and assigns it to the ExecutionTimestamp field.
func (o *Execution) SetExecutionTimestamp(v TimestampString) {
	o.ExecutionTimestamp = &v
}

func (o Execution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Execution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExecutionId) {
		toSerialize["executionId"] = o.ExecutionId
	}
	if !IsNil(o.ExecutionNumber) {
		toSerialize["executionNumber"] = o.ExecutionNumber
	}
	if !IsNil(o.ExecutedQuantity) {
		toSerialize["executedQuantity"] = o.ExecutedQuantity
	}
	if !IsNil(o.ExecutionPrice) {
		toSerialize["executionPrice"] = o.ExecutionPrice
	}
	if !IsNil(o.ExecutionTimestamp) {
		toSerialize["executionTimestamp"] = o.ExecutionTimestamp
	}
	return toSerialize, nil
}

type NullableExecution struct {
	value *Execution
	isSet bool
}

func (v NullableExecution) Get() *Execution {
	return v.value
}

func (v *NullableExecution) Set(val *Execution) {
	v.value = val
	v.isSet = true
}

func (v NullableExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecution(val *Execution) *NullableExecution {
	return &NullableExecution{value: val, isSet: true}
}

func (v NullableExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


