/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the FXRateEUR type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FXRateEUR{}

// FXRateEUR Exchange rate for settlement currency to FX.
type FXRateEUR struct {
	Bid *AmountValue `json:"bid,omitempty"`
	Ask *AmountValue `json:"ask,omitempty"`
}

// NewFXRateEUR instantiates a new FXRateEUR object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFXRateEUR() *FXRateEUR {
	this := FXRateEUR{}
	return &this
}

// NewFXRateEURWithDefaults instantiates a new FXRateEUR object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFXRateEURWithDefaults() *FXRateEUR {
	this := FXRateEUR{}
	return &this
}

// GetBid returns the Bid field value if set, zero value otherwise.
func (o *FXRateEUR) GetBid() AmountValue {
	if o == nil || IsNil(o.Bid) {
		var ret AmountValue
		return ret
	}
	return *o.Bid
}

// GetBidOk returns a tuple with the Bid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FXRateEUR) GetBidOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Bid) {
		return nil, false
	}
	return o.Bid, true
}

// HasBid returns a boolean if a field has been set.
func (o *FXRateEUR) HasBid() bool {
	if o != nil && !IsNil(o.Bid) {
		return true
	}

	return false
}

// SetBid gets a reference to the given AmountValue and assigns it to the Bid field.
func (o *FXRateEUR) SetBid(v AmountValue) {
	o.Bid = &v
}

// GetAsk returns the Ask field value if set, zero value otherwise.
func (o *FXRateEUR) GetAsk() AmountValue {
	if o == nil || IsNil(o.Ask) {
		var ret AmountValue
		return ret
	}
	return *o.Ask
}

// GetAskOk returns a tuple with the Ask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FXRateEUR) GetAskOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Ask) {
		return nil, false
	}
	return o.Ask, true
}

// HasAsk returns a boolean if a field has been set.
func (o *FXRateEUR) HasAsk() bool {
	if o != nil && !IsNil(o.Ask) {
		return true
	}

	return false
}

// SetAsk gets a reference to the given AmountValue and assigns it to the Ask field.
func (o *FXRateEUR) SetAsk(v AmountValue) {
	o.Ask = &v
}

func (o FXRateEUR) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FXRateEUR) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bid) {
		toSerialize["bid"] = o.Bid
	}
	if !IsNil(o.Ask) {
		toSerialize["ask"] = o.Ask
	}
	return toSerialize, nil
}

type NullableFXRateEUR struct {
	value *FXRateEUR
	isSet bool
}

func (v NullableFXRateEUR) Get() *FXRateEUR {
	return v.value
}

func (v *NullableFXRateEUR) Set(val *FXRateEUR) {
	v.value = val
	v.isSet = true
}

func (v NullableFXRateEUR) IsSet() bool {
	return v.isSet
}

func (v *NullableFXRateEUR) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFXRateEUR(val *FXRateEUR) *NullableFXRateEUR {
	return &NullableFXRateEUR{value: val, isSet: true}
}

func (v NullableFXRateEUR) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFXRateEUR) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


