/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the CostGroup type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CostGroup{}

// CostGroup Model for a cost group including a list of cost entries for this cost group.
type CostGroup struct {
	// Type of cost group. K: Costs of securities purchase, H: Costs of the holding period (per year), V: Costs of the sale of securities
	Type *string `json:"type,omitempty"`
	// Name of cost group for showing in the cost-note
	Label *string `json:"label,omitempty"`
	Sum *AmountValue `json:"sum,omitempty"`
	SumReportingCurrency *AmountValue `json:"sumReportingCurrency,omitempty"`
	// List of costs per cost group
	Costs []CostEntry `json:"costs,omitempty"`
}

// NewCostGroup instantiates a new CostGroup object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCostGroup() *CostGroup {
	this := CostGroup{}
	return &this
}

// NewCostGroupWithDefaults instantiates a new CostGroup object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCostGroupWithDefaults() *CostGroup {
	this := CostGroup{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CostGroup) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostGroup) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CostGroup) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CostGroup) SetType(v string) {
	o.Type = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *CostGroup) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostGroup) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *CostGroup) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *CostGroup) SetLabel(v string) {
	o.Label = &v
}

// GetSum returns the Sum field value if set, zero value otherwise.
func (o *CostGroup) GetSum() AmountValue {
	if o == nil || IsNil(o.Sum) {
		var ret AmountValue
		return ret
	}
	return *o.Sum
}

// GetSumOk returns a tuple with the Sum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostGroup) GetSumOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Sum) {
		return nil, false
	}
	return o.Sum, true
}

// HasSum returns a boolean if a field has been set.
func (o *CostGroup) HasSum() bool {
	if o != nil && !IsNil(o.Sum) {
		return true
	}

	return false
}

// SetSum gets a reference to the given AmountValue and assigns it to the Sum field.
func (o *CostGroup) SetSum(v AmountValue) {
	o.Sum = &v
}

// GetSumReportingCurrency returns the SumReportingCurrency field value if set, zero value otherwise.
func (o *CostGroup) GetSumReportingCurrency() AmountValue {
	if o == nil || IsNil(o.SumReportingCurrency) {
		var ret AmountValue
		return ret
	}
	return *o.SumReportingCurrency
}

// GetSumReportingCurrencyOk returns a tuple with the SumReportingCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostGroup) GetSumReportingCurrencyOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.SumReportingCurrency) {
		return nil, false
	}
	return o.SumReportingCurrency, true
}

// HasSumReportingCurrency returns a boolean if a field has been set.
func (o *CostGroup) HasSumReportingCurrency() bool {
	if o != nil && !IsNil(o.SumReportingCurrency) {
		return true
	}

	return false
}

// SetSumReportingCurrency gets a reference to the given AmountValue and assigns it to the SumReportingCurrency field.
func (o *CostGroup) SetSumReportingCurrency(v AmountValue) {
	o.SumReportingCurrency = &v
}

// GetCosts returns the Costs field value if set, zero value otherwise.
func (o *CostGroup) GetCosts() []CostEntry {
	if o == nil || IsNil(o.Costs) {
		var ret []CostEntry
		return ret
	}
	return o.Costs
}

// GetCostsOk returns a tuple with the Costs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostGroup) GetCostsOk() ([]CostEntry, bool) {
	if o == nil || IsNil(o.Costs) {
		return nil, false
	}
	return o.Costs, true
}

// HasCosts returns a boolean if a field has been set.
func (o *CostGroup) HasCosts() bool {
	if o != nil && !IsNil(o.Costs) {
		return true
	}

	return false
}

// SetCosts gets a reference to the given []CostEntry and assigns it to the Costs field.
func (o *CostGroup) SetCosts(v []CostEntry) {
	o.Costs = v
}

func (o CostGroup) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CostGroup) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Sum) {
		toSerialize["sum"] = o.Sum
	}
	if !IsNil(o.SumReportingCurrency) {
		toSerialize["sumReportingCurrency"] = o.SumReportingCurrency
	}
	if !IsNil(o.Costs) {
		toSerialize["costs"] = o.Costs
	}
	return toSerialize, nil
}

type NullableCostGroup struct {
	value *CostGroup
	isSet bool
}

func (v NullableCostGroup) Get() *CostGroup {
	return v.value
}

func (v *NullableCostGroup) Set(val *CostGroup) {
	v.value = val
	v.isSet = true
}

func (v NullableCostGroup) IsSet() bool {
	return v.isSet
}

func (v *NullableCostGroup) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostGroup(val *CostGroup) *NullableCostGroup {
	return &NullableCostGroup{value: val, isSet: true}
}

func (v NullableCostGroup) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostGroup) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


