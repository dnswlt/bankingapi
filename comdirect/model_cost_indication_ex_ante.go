/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the CostIndicationExAnte type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CostIndicationExAnte{}

// CostIndicationExAnte Ex-ante cost indication on the basis of the order data.
type CostIndicationExAnte struct {
	// Securities account number (UUID)
	DepotId *string `json:"depotId,omitempty"`
	// Result of calculation of cost indication; if false, linkCosts will link to a generic cost indication
	CalculationSuccessful *bool `json:"calculationSuccessful,omitempty"`
	// Instrument name analogous to Instrument.name
	Name *string `json:"name,omitempty"`
	// WKN analogous to Instrument.wkn
	Wkn *string `json:"wkn,omitempty"`
	// Type of transaction analogous to Order.side
	Side *string `json:"side,omitempty"`
	Quantity *AmountValue `json:"quantity,omitempty"`
	Limit *AmountValue `json:"limit,omitempty"`
	ExpectedValue *AmountValue `json:"expectedValue,omitempty"`
	// Execution venue as name for the display
	VenueName *string `json:"venueName,omitempty"`
	SettlementCurrency *CurrencyString `json:"settlementCurrency,omitempty"`
	TradingCurrency *CurrencyString `json:"tradingCurrency,omitempty"`
	ReportingCurrency *CurrencyString `json:"reportingCurrency,omitempty"`
	FxRate *FXRateEUR `json:"fxRate,omitempty"`
	ExpectedSettlementCosts *AmountValue `json:"expectedSettlementCosts,omitempty"`
	PurchaseCosts *CostGroup `json:"purchaseCosts,omitempty"`
	HoldingCosts *CostGroup `json:"holdingCosts,omitempty"`
	SalesCosts *CostGroup `json:"salesCosts,omitempty"`
	// Holding period in years, displayed on purchase
	HoldingPeriod *string `json:"holdingPeriod,omitempty"`
	TotalCostsAbs *AmountValue `json:"totalCostsAbs,omitempty"`
	TotalCostsRel *PercentageString `json:"totalCostsRel,omitempty"`
	TotalCostsDetail *TotalCostBlock `json:"totalCostsDetail,omitempty"`
	TotalHoldingCosts *TotalHoldingCostBlock `json:"totalHoldingCosts,omitempty"`
	// HTTP link to further cost information
	LinkCosts *string `json:"linkCosts,omitempty"`
	// HTTP link to key information document
	LinkKid *string `json:"linkKid,omitempty"`
}

// NewCostIndicationExAnte instantiates a new CostIndicationExAnte object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCostIndicationExAnte() *CostIndicationExAnte {
	this := CostIndicationExAnte{}
	return &this
}

// NewCostIndicationExAnteWithDefaults instantiates a new CostIndicationExAnte object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCostIndicationExAnteWithDefaults() *CostIndicationExAnte {
	this := CostIndicationExAnte{}
	return &this
}

// GetDepotId returns the DepotId field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetDepotId() string {
	if o == nil || IsNil(o.DepotId) {
		var ret string
		return ret
	}
	return *o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetDepotIdOk() (*string, bool) {
	if o == nil || IsNil(o.DepotId) {
		return nil, false
	}
	return o.DepotId, true
}

// HasDepotId returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasDepotId() bool {
	if o != nil && !IsNil(o.DepotId) {
		return true
	}

	return false
}

// SetDepotId gets a reference to the given string and assigns it to the DepotId field.
func (o *CostIndicationExAnte) SetDepotId(v string) {
	o.DepotId = &v
}

// GetCalculationSuccessful returns the CalculationSuccessful field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetCalculationSuccessful() bool {
	if o == nil || IsNil(o.CalculationSuccessful) {
		var ret bool
		return ret
	}
	return *o.CalculationSuccessful
}

// GetCalculationSuccessfulOk returns a tuple with the CalculationSuccessful field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetCalculationSuccessfulOk() (*bool, bool) {
	if o == nil || IsNil(o.CalculationSuccessful) {
		return nil, false
	}
	return o.CalculationSuccessful, true
}

// HasCalculationSuccessful returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasCalculationSuccessful() bool {
	if o != nil && !IsNil(o.CalculationSuccessful) {
		return true
	}

	return false
}

// SetCalculationSuccessful gets a reference to the given bool and assigns it to the CalculationSuccessful field.
func (o *CostIndicationExAnte) SetCalculationSuccessful(v bool) {
	o.CalculationSuccessful = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *CostIndicationExAnte) SetName(v string) {
	o.Name = &v
}

// GetWkn returns the Wkn field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetWkn() string {
	if o == nil || IsNil(o.Wkn) {
		var ret string
		return ret
	}
	return *o.Wkn
}

// GetWknOk returns a tuple with the Wkn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetWknOk() (*string, bool) {
	if o == nil || IsNil(o.Wkn) {
		return nil, false
	}
	return o.Wkn, true
}

// HasWkn returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasWkn() bool {
	if o != nil && !IsNil(o.Wkn) {
		return true
	}

	return false
}

// SetWkn gets a reference to the given string and assigns it to the Wkn field.
func (o *CostIndicationExAnte) SetWkn(v string) {
	o.Wkn = &v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetSide() string {
	if o == nil || IsNil(o.Side) {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetSideOk() (*string, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *CostIndicationExAnte) SetSide(v string) {
	o.Side = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetQuantity() AmountValue {
	if o == nil || IsNil(o.Quantity) {
		var ret AmountValue
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetQuantityOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given AmountValue and assigns it to the Quantity field.
func (o *CostIndicationExAnte) SetQuantity(v AmountValue) {
	o.Quantity = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetLimit() AmountValue {
	if o == nil || IsNil(o.Limit) {
		var ret AmountValue
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetLimitOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given AmountValue and assigns it to the Limit field.
func (o *CostIndicationExAnte) SetLimit(v AmountValue) {
	o.Limit = &v
}

// GetExpectedValue returns the ExpectedValue field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetExpectedValue() AmountValue {
	if o == nil || IsNil(o.ExpectedValue) {
		var ret AmountValue
		return ret
	}
	return *o.ExpectedValue
}

// GetExpectedValueOk returns a tuple with the ExpectedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetExpectedValueOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.ExpectedValue) {
		return nil, false
	}
	return o.ExpectedValue, true
}

// HasExpectedValue returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasExpectedValue() bool {
	if o != nil && !IsNil(o.ExpectedValue) {
		return true
	}

	return false
}

// SetExpectedValue gets a reference to the given AmountValue and assigns it to the ExpectedValue field.
func (o *CostIndicationExAnte) SetExpectedValue(v AmountValue) {
	o.ExpectedValue = &v
}

// GetVenueName returns the VenueName field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetVenueName() string {
	if o == nil || IsNil(o.VenueName) {
		var ret string
		return ret
	}
	return *o.VenueName
}

// GetVenueNameOk returns a tuple with the VenueName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetVenueNameOk() (*string, bool) {
	if o == nil || IsNil(o.VenueName) {
		return nil, false
	}
	return o.VenueName, true
}

// HasVenueName returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasVenueName() bool {
	if o != nil && !IsNil(o.VenueName) {
		return true
	}

	return false
}

// SetVenueName gets a reference to the given string and assigns it to the VenueName field.
func (o *CostIndicationExAnte) SetVenueName(v string) {
	o.VenueName = &v
}

// GetSettlementCurrency returns the SettlementCurrency field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetSettlementCurrency() CurrencyString {
	if o == nil || IsNil(o.SettlementCurrency) {
		var ret CurrencyString
		return ret
	}
	return *o.SettlementCurrency
}

// GetSettlementCurrencyOk returns a tuple with the SettlementCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetSettlementCurrencyOk() (*CurrencyString, bool) {
	if o == nil || IsNil(o.SettlementCurrency) {
		return nil, false
	}
	return o.SettlementCurrency, true
}

// HasSettlementCurrency returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasSettlementCurrency() bool {
	if o != nil && !IsNil(o.SettlementCurrency) {
		return true
	}

	return false
}

// SetSettlementCurrency gets a reference to the given CurrencyString and assigns it to the SettlementCurrency field.
func (o *CostIndicationExAnte) SetSettlementCurrency(v CurrencyString) {
	o.SettlementCurrency = &v
}

// GetTradingCurrency returns the TradingCurrency field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetTradingCurrency() CurrencyString {
	if o == nil || IsNil(o.TradingCurrency) {
		var ret CurrencyString
		return ret
	}
	return *o.TradingCurrency
}

// GetTradingCurrencyOk returns a tuple with the TradingCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetTradingCurrencyOk() (*CurrencyString, bool) {
	if o == nil || IsNil(o.TradingCurrency) {
		return nil, false
	}
	return o.TradingCurrency, true
}

// HasTradingCurrency returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasTradingCurrency() bool {
	if o != nil && !IsNil(o.TradingCurrency) {
		return true
	}

	return false
}

// SetTradingCurrency gets a reference to the given CurrencyString and assigns it to the TradingCurrency field.
func (o *CostIndicationExAnte) SetTradingCurrency(v CurrencyString) {
	o.TradingCurrency = &v
}

// GetReportingCurrency returns the ReportingCurrency field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetReportingCurrency() CurrencyString {
	if o == nil || IsNil(o.ReportingCurrency) {
		var ret CurrencyString
		return ret
	}
	return *o.ReportingCurrency
}

// GetReportingCurrencyOk returns a tuple with the ReportingCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetReportingCurrencyOk() (*CurrencyString, bool) {
	if o == nil || IsNil(o.ReportingCurrency) {
		return nil, false
	}
	return o.ReportingCurrency, true
}

// HasReportingCurrency returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasReportingCurrency() bool {
	if o != nil && !IsNil(o.ReportingCurrency) {
		return true
	}

	return false
}

// SetReportingCurrency gets a reference to the given CurrencyString and assigns it to the ReportingCurrency field.
func (o *CostIndicationExAnte) SetReportingCurrency(v CurrencyString) {
	o.ReportingCurrency = &v
}

// GetFxRate returns the FxRate field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetFxRate() FXRateEUR {
	if o == nil || IsNil(o.FxRate) {
		var ret FXRateEUR
		return ret
	}
	return *o.FxRate
}

// GetFxRateOk returns a tuple with the FxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetFxRateOk() (*FXRateEUR, bool) {
	if o == nil || IsNil(o.FxRate) {
		return nil, false
	}
	return o.FxRate, true
}

// HasFxRate returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasFxRate() bool {
	if o != nil && !IsNil(o.FxRate) {
		return true
	}

	return false
}

// SetFxRate gets a reference to the given FXRateEUR and assigns it to the FxRate field.
func (o *CostIndicationExAnte) SetFxRate(v FXRateEUR) {
	o.FxRate = &v
}

// GetExpectedSettlementCosts returns the ExpectedSettlementCosts field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetExpectedSettlementCosts() AmountValue {
	if o == nil || IsNil(o.ExpectedSettlementCosts) {
		var ret AmountValue
		return ret
	}
	return *o.ExpectedSettlementCosts
}

// GetExpectedSettlementCostsOk returns a tuple with the ExpectedSettlementCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetExpectedSettlementCostsOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.ExpectedSettlementCosts) {
		return nil, false
	}
	return o.ExpectedSettlementCosts, true
}

// HasExpectedSettlementCosts returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasExpectedSettlementCosts() bool {
	if o != nil && !IsNil(o.ExpectedSettlementCosts) {
		return true
	}

	return false
}

// SetExpectedSettlementCosts gets a reference to the given AmountValue and assigns it to the ExpectedSettlementCosts field.
func (o *CostIndicationExAnte) SetExpectedSettlementCosts(v AmountValue) {
	o.ExpectedSettlementCosts = &v
}

// GetPurchaseCosts returns the PurchaseCosts field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetPurchaseCosts() CostGroup {
	if o == nil || IsNil(o.PurchaseCosts) {
		var ret CostGroup
		return ret
	}
	return *o.PurchaseCosts
}

// GetPurchaseCostsOk returns a tuple with the PurchaseCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetPurchaseCostsOk() (*CostGroup, bool) {
	if o == nil || IsNil(o.PurchaseCosts) {
		return nil, false
	}
	return o.PurchaseCosts, true
}

// HasPurchaseCosts returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasPurchaseCosts() bool {
	if o != nil && !IsNil(o.PurchaseCosts) {
		return true
	}

	return false
}

// SetPurchaseCosts gets a reference to the given CostGroup and assigns it to the PurchaseCosts field.
func (o *CostIndicationExAnte) SetPurchaseCosts(v CostGroup) {
	o.PurchaseCosts = &v
}

// GetHoldingCosts returns the HoldingCosts field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetHoldingCosts() CostGroup {
	if o == nil || IsNil(o.HoldingCosts) {
		var ret CostGroup
		return ret
	}
	return *o.HoldingCosts
}

// GetHoldingCostsOk returns a tuple with the HoldingCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetHoldingCostsOk() (*CostGroup, bool) {
	if o == nil || IsNil(o.HoldingCosts) {
		return nil, false
	}
	return o.HoldingCosts, true
}

// HasHoldingCosts returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasHoldingCosts() bool {
	if o != nil && !IsNil(o.HoldingCosts) {
		return true
	}

	return false
}

// SetHoldingCosts gets a reference to the given CostGroup and assigns it to the HoldingCosts field.
func (o *CostIndicationExAnte) SetHoldingCosts(v CostGroup) {
	o.HoldingCosts = &v
}

// GetSalesCosts returns the SalesCosts field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetSalesCosts() CostGroup {
	if o == nil || IsNil(o.SalesCosts) {
		var ret CostGroup
		return ret
	}
	return *o.SalesCosts
}

// GetSalesCostsOk returns a tuple with the SalesCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetSalesCostsOk() (*CostGroup, bool) {
	if o == nil || IsNil(o.SalesCosts) {
		return nil, false
	}
	return o.SalesCosts, true
}

// HasSalesCosts returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasSalesCosts() bool {
	if o != nil && !IsNil(o.SalesCosts) {
		return true
	}

	return false
}

// SetSalesCosts gets a reference to the given CostGroup and assigns it to the SalesCosts field.
func (o *CostIndicationExAnte) SetSalesCosts(v CostGroup) {
	o.SalesCosts = &v
}

// GetHoldingPeriod returns the HoldingPeriod field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetHoldingPeriod() string {
	if o == nil || IsNil(o.HoldingPeriod) {
		var ret string
		return ret
	}
	return *o.HoldingPeriod
}

// GetHoldingPeriodOk returns a tuple with the HoldingPeriod field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetHoldingPeriodOk() (*string, bool) {
	if o == nil || IsNil(o.HoldingPeriod) {
		return nil, false
	}
	return o.HoldingPeriod, true
}

// HasHoldingPeriod returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasHoldingPeriod() bool {
	if o != nil && !IsNil(o.HoldingPeriod) {
		return true
	}

	return false
}

// SetHoldingPeriod gets a reference to the given string and assigns it to the HoldingPeriod field.
func (o *CostIndicationExAnte) SetHoldingPeriod(v string) {
	o.HoldingPeriod = &v
}

// GetTotalCostsAbs returns the TotalCostsAbs field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetTotalCostsAbs() AmountValue {
	if o == nil || IsNil(o.TotalCostsAbs) {
		var ret AmountValue
		return ret
	}
	return *o.TotalCostsAbs
}

// GetTotalCostsAbsOk returns a tuple with the TotalCostsAbs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetTotalCostsAbsOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.TotalCostsAbs) {
		return nil, false
	}
	return o.TotalCostsAbs, true
}

// HasTotalCostsAbs returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasTotalCostsAbs() bool {
	if o != nil && !IsNil(o.TotalCostsAbs) {
		return true
	}

	return false
}

// SetTotalCostsAbs gets a reference to the given AmountValue and assigns it to the TotalCostsAbs field.
func (o *CostIndicationExAnte) SetTotalCostsAbs(v AmountValue) {
	o.TotalCostsAbs = &v
}

// GetTotalCostsRel returns the TotalCostsRel field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetTotalCostsRel() PercentageString {
	if o == nil || IsNil(o.TotalCostsRel) {
		var ret PercentageString
		return ret
	}
	return *o.TotalCostsRel
}

// GetTotalCostsRelOk returns a tuple with the TotalCostsRel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetTotalCostsRelOk() (*PercentageString, bool) {
	if o == nil || IsNil(o.TotalCostsRel) {
		return nil, false
	}
	return o.TotalCostsRel, true
}

// HasTotalCostsRel returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasTotalCostsRel() bool {
	if o != nil && !IsNil(o.TotalCostsRel) {
		return true
	}

	return false
}

// SetTotalCostsRel gets a reference to the given PercentageString and assigns it to the TotalCostsRel field.
func (o *CostIndicationExAnte) SetTotalCostsRel(v PercentageString) {
	o.TotalCostsRel = &v
}

// GetTotalCostsDetail returns the TotalCostsDetail field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetTotalCostsDetail() TotalCostBlock {
	if o == nil || IsNil(o.TotalCostsDetail) {
		var ret TotalCostBlock
		return ret
	}
	return *o.TotalCostsDetail
}

// GetTotalCostsDetailOk returns a tuple with the TotalCostsDetail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetTotalCostsDetailOk() (*TotalCostBlock, bool) {
	if o == nil || IsNil(o.TotalCostsDetail) {
		return nil, false
	}
	return o.TotalCostsDetail, true
}

// HasTotalCostsDetail returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasTotalCostsDetail() bool {
	if o != nil && !IsNil(o.TotalCostsDetail) {
		return true
	}

	return false
}

// SetTotalCostsDetail gets a reference to the given TotalCostBlock and assigns it to the TotalCostsDetail field.
func (o *CostIndicationExAnte) SetTotalCostsDetail(v TotalCostBlock) {
	o.TotalCostsDetail = &v
}

// GetTotalHoldingCosts returns the TotalHoldingCosts field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetTotalHoldingCosts() TotalHoldingCostBlock {
	if o == nil || IsNil(o.TotalHoldingCosts) {
		var ret TotalHoldingCostBlock
		return ret
	}
	return *o.TotalHoldingCosts
}

// GetTotalHoldingCostsOk returns a tuple with the TotalHoldingCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetTotalHoldingCostsOk() (*TotalHoldingCostBlock, bool) {
	if o == nil || IsNil(o.TotalHoldingCosts) {
		return nil, false
	}
	return o.TotalHoldingCosts, true
}

// HasTotalHoldingCosts returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasTotalHoldingCosts() bool {
	if o != nil && !IsNil(o.TotalHoldingCosts) {
		return true
	}

	return false
}

// SetTotalHoldingCosts gets a reference to the given TotalHoldingCostBlock and assigns it to the TotalHoldingCosts field.
func (o *CostIndicationExAnte) SetTotalHoldingCosts(v TotalHoldingCostBlock) {
	o.TotalHoldingCosts = &v
}

// GetLinkCosts returns the LinkCosts field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetLinkCosts() string {
	if o == nil || IsNil(o.LinkCosts) {
		var ret string
		return ret
	}
	return *o.LinkCosts
}

// GetLinkCostsOk returns a tuple with the LinkCosts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetLinkCostsOk() (*string, bool) {
	if o == nil || IsNil(o.LinkCosts) {
		return nil, false
	}
	return o.LinkCosts, true
}

// HasLinkCosts returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasLinkCosts() bool {
	if o != nil && !IsNil(o.LinkCosts) {
		return true
	}

	return false
}

// SetLinkCosts gets a reference to the given string and assigns it to the LinkCosts field.
func (o *CostIndicationExAnte) SetLinkCosts(v string) {
	o.LinkCosts = &v
}

// GetLinkKid returns the LinkKid field value if set, zero value otherwise.
func (o *CostIndicationExAnte) GetLinkKid() string {
	if o == nil || IsNil(o.LinkKid) {
		var ret string
		return ret
	}
	return *o.LinkKid
}

// GetLinkKidOk returns a tuple with the LinkKid field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostIndicationExAnte) GetLinkKidOk() (*string, bool) {
	if o == nil || IsNil(o.LinkKid) {
		return nil, false
	}
	return o.LinkKid, true
}

// HasLinkKid returns a boolean if a field has been set.
func (o *CostIndicationExAnte) HasLinkKid() bool {
	if o != nil && !IsNil(o.LinkKid) {
		return true
	}

	return false
}

// SetLinkKid gets a reference to the given string and assigns it to the LinkKid field.
func (o *CostIndicationExAnte) SetLinkKid(v string) {
	o.LinkKid = &v
}

func (o CostIndicationExAnte) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CostIndicationExAnte) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DepotId) {
		toSerialize["depotId"] = o.DepotId
	}
	if !IsNil(o.CalculationSuccessful) {
		toSerialize["calculationSuccessful"] = o.CalculationSuccessful
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Wkn) {
		toSerialize["wkn"] = o.Wkn
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.ExpectedValue) {
		toSerialize["expectedValue"] = o.ExpectedValue
	}
	if !IsNil(o.VenueName) {
		toSerialize["venueName"] = o.VenueName
	}
	if !IsNil(o.SettlementCurrency) {
		toSerialize["settlementCurrency"] = o.SettlementCurrency
	}
	if !IsNil(o.TradingCurrency) {
		toSerialize["tradingCurrency"] = o.TradingCurrency
	}
	if !IsNil(o.ReportingCurrency) {
		toSerialize["reportingCurrency"] = o.ReportingCurrency
	}
	if !IsNil(o.FxRate) {
		toSerialize["fxRate"] = o.FxRate
	}
	if !IsNil(o.ExpectedSettlementCosts) {
		toSerialize["expectedSettlementCosts"] = o.ExpectedSettlementCosts
	}
	if !IsNil(o.PurchaseCosts) {
		toSerialize["purchaseCosts"] = o.PurchaseCosts
	}
	if !IsNil(o.HoldingCosts) {
		toSerialize["holdingCosts"] = o.HoldingCosts
	}
	if !IsNil(o.SalesCosts) {
		toSerialize["salesCosts"] = o.SalesCosts
	}
	if !IsNil(o.HoldingPeriod) {
		toSerialize["holdingPeriod"] = o.HoldingPeriod
	}
	if !IsNil(o.TotalCostsAbs) {
		toSerialize["totalCostsAbs"] = o.TotalCostsAbs
	}
	if !IsNil(o.TotalCostsRel) {
		toSerialize["totalCostsRel"] = o.TotalCostsRel
	}
	if !IsNil(o.TotalCostsDetail) {
		toSerialize["totalCostsDetail"] = o.TotalCostsDetail
	}
	if !IsNil(o.TotalHoldingCosts) {
		toSerialize["totalHoldingCosts"] = o.TotalHoldingCosts
	}
	if !IsNil(o.LinkCosts) {
		toSerialize["linkCosts"] = o.LinkCosts
	}
	if !IsNil(o.LinkKid) {
		toSerialize["linkKid"] = o.LinkKid
	}
	return toSerialize, nil
}

type NullableCostIndicationExAnte struct {
	value *CostIndicationExAnte
	isSet bool
}

func (v NullableCostIndicationExAnte) Get() *CostIndicationExAnte {
	return v.value
}

func (v *NullableCostIndicationExAnte) Set(val *CostIndicationExAnte) {
	v.value = val
	v.isSet = true
}

func (v NullableCostIndicationExAnte) IsSet() bool {
	return v.isSet
}

func (v *NullableCostIndicationExAnte) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostIndicationExAnte(val *CostIndicationExAnte) *NullableCostIndicationExAnte {
	return &NullableCostIndicationExAnte{value: val, isSet: true}
}

func (v NullableCostIndicationExAnte) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostIndicationExAnte) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


