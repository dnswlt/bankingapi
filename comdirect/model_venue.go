/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the Venue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Venue{}

// Venue Model for a venue.
type Venue struct {
	Name *string `json:"name,omitempty"`
	VenueId *string `json:"venueId,omitempty"`
	Country *string `json:"country,omitempty"`
	Type *string `json:"type,omitempty"`
	Currencies []CurrencyString `json:"currencies,omitempty"`
	Sides []string `json:"sides,omitempty"`
	ValidityTypes []string `json:"validityTypes,omitempty"`
	OrderTypes *map[string]OrderType `json:"orderTypes,omitempty"`
}

// NewVenue instantiates a new Venue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVenue() *Venue {
	this := Venue{}
	return &this
}

// NewVenueWithDefaults instantiates a new Venue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVenueWithDefaults() *Venue {
	this := Venue{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Venue) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Venue) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Venue) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Venue) SetName(v string) {
	o.Name = &v
}

// GetVenueId returns the VenueId field value if set, zero value otherwise.
func (o *Venue) GetVenueId() string {
	if o == nil || IsNil(o.VenueId) {
		var ret string
		return ret
	}
	return *o.VenueId
}

// GetVenueIdOk returns a tuple with the VenueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Venue) GetVenueIdOk() (*string, bool) {
	if o == nil || IsNil(o.VenueId) {
		return nil, false
	}
	return o.VenueId, true
}

// HasVenueId returns a boolean if a field has been set.
func (o *Venue) HasVenueId() bool {
	if o != nil && !IsNil(o.VenueId) {
		return true
	}

	return false
}

// SetVenueId gets a reference to the given string and assigns it to the VenueId field.
func (o *Venue) SetVenueId(v string) {
	o.VenueId = &v
}

// GetCountry returns the Country field value if set, zero value otherwise.
func (o *Venue) GetCountry() string {
	if o == nil || IsNil(o.Country) {
		var ret string
		return ret
	}
	return *o.Country
}

// GetCountryOk returns a tuple with the Country field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Venue) GetCountryOk() (*string, bool) {
	if o == nil || IsNil(o.Country) {
		return nil, false
	}
	return o.Country, true
}

// HasCountry returns a boolean if a field has been set.
func (o *Venue) HasCountry() bool {
	if o != nil && !IsNil(o.Country) {
		return true
	}

	return false
}

// SetCountry gets a reference to the given string and assigns it to the Country field.
func (o *Venue) SetCountry(v string) {
	o.Country = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Venue) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Venue) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Venue) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Venue) SetType(v string) {
	o.Type = &v
}

// GetCurrencies returns the Currencies field value if set, zero value otherwise.
func (o *Venue) GetCurrencies() []CurrencyString {
	if o == nil || IsNil(o.Currencies) {
		var ret []CurrencyString
		return ret
	}
	return o.Currencies
}

// GetCurrenciesOk returns a tuple with the Currencies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Venue) GetCurrenciesOk() ([]CurrencyString, bool) {
	if o == nil || IsNil(o.Currencies) {
		return nil, false
	}
	return o.Currencies, true
}

// HasCurrencies returns a boolean if a field has been set.
func (o *Venue) HasCurrencies() bool {
	if o != nil && !IsNil(o.Currencies) {
		return true
	}

	return false
}

// SetCurrencies gets a reference to the given []CurrencyString and assigns it to the Currencies field.
func (o *Venue) SetCurrencies(v []CurrencyString) {
	o.Currencies = v
}

// GetSides returns the Sides field value if set, zero value otherwise.
func (o *Venue) GetSides() []string {
	if o == nil || IsNil(o.Sides) {
		var ret []string
		return ret
	}
	return o.Sides
}

// GetSidesOk returns a tuple with the Sides field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Venue) GetSidesOk() ([]string, bool) {
	if o == nil || IsNil(o.Sides) {
		return nil, false
	}
	return o.Sides, true
}

// HasSides returns a boolean if a field has been set.
func (o *Venue) HasSides() bool {
	if o != nil && !IsNil(o.Sides) {
		return true
	}

	return false
}

// SetSides gets a reference to the given []string and assigns it to the Sides field.
func (o *Venue) SetSides(v []string) {
	o.Sides = v
}

// GetValidityTypes returns the ValidityTypes field value if set, zero value otherwise.
func (o *Venue) GetValidityTypes() []string {
	if o == nil || IsNil(o.ValidityTypes) {
		var ret []string
		return ret
	}
	return o.ValidityTypes
}

// GetValidityTypesOk returns a tuple with the ValidityTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Venue) GetValidityTypesOk() ([]string, bool) {
	if o == nil || IsNil(o.ValidityTypes) {
		return nil, false
	}
	return o.ValidityTypes, true
}

// HasValidityTypes returns a boolean if a field has been set.
func (o *Venue) HasValidityTypes() bool {
	if o != nil && !IsNil(o.ValidityTypes) {
		return true
	}

	return false
}

// SetValidityTypes gets a reference to the given []string and assigns it to the ValidityTypes field.
func (o *Venue) SetValidityTypes(v []string) {
	o.ValidityTypes = v
}

// GetOrderTypes returns the OrderTypes field value if set, zero value otherwise.
func (o *Venue) GetOrderTypes() map[string]OrderType {
	if o == nil || IsNil(o.OrderTypes) {
		var ret map[string]OrderType
		return ret
	}
	return *o.OrderTypes
}

// GetOrderTypesOk returns a tuple with the OrderTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Venue) GetOrderTypesOk() (*map[string]OrderType, bool) {
	if o == nil || IsNil(o.OrderTypes) {
		return nil, false
	}
	return o.OrderTypes, true
}

// HasOrderTypes returns a boolean if a field has been set.
func (o *Venue) HasOrderTypes() bool {
	if o != nil && !IsNil(o.OrderTypes) {
		return true
	}

	return false
}

// SetOrderTypes gets a reference to the given map[string]OrderType and assigns it to the OrderTypes field.
func (o *Venue) SetOrderTypes(v map[string]OrderType) {
	o.OrderTypes = &v
}

func (o Venue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Venue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.VenueId) {
		toSerialize["venueId"] = o.VenueId
	}
	if !IsNil(o.Country) {
		toSerialize["country"] = o.Country
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Currencies) {
		toSerialize["currencies"] = o.Currencies
	}
	if !IsNil(o.Sides) {
		toSerialize["sides"] = o.Sides
	}
	if !IsNil(o.ValidityTypes) {
		toSerialize["validityTypes"] = o.ValidityTypes
	}
	if !IsNil(o.OrderTypes) {
		toSerialize["orderTypes"] = o.OrderTypes
	}
	return toSerialize, nil
}

type NullableVenue struct {
	value *Venue
	isSet bool
}

func (v NullableVenue) Get() *Venue {
	return v.value
}

func (v *NullableVenue) Set(val *Venue) {
	v.value = val
	v.isSet = true
}

func (v NullableVenue) IsSet() bool {
	return v.isSet
}

func (v *NullableVenue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVenue(val *Venue) *NullableVenue {
	return &NullableVenue{value: val, isSet: true}
}

func (v NullableVenue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVenue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


