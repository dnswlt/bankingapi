/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the TotalCostEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TotalCostEntry{}

// TotalCostEntry Model for a total cost entry.
type TotalCostEntry struct {
	// Type of total cost entry
	Type *string `json:"type,omitempty"`
	// Label of total cost entry
	Label *string `json:"label,omitempty"`
	Amount *AmountValue `json:"amount,omitempty"`
	AverageReturnPA *PercentageString `json:"averageReturnPA,omitempty"`
}

// NewTotalCostEntry instantiates a new TotalCostEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTotalCostEntry() *TotalCostEntry {
	this := TotalCostEntry{}
	return &this
}

// NewTotalCostEntryWithDefaults instantiates a new TotalCostEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTotalCostEntryWithDefaults() *TotalCostEntry {
	this := TotalCostEntry{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *TotalCostEntry) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalCostEntry) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *TotalCostEntry) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *TotalCostEntry) SetType(v string) {
	o.Type = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *TotalCostEntry) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalCostEntry) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *TotalCostEntry) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *TotalCostEntry) SetLabel(v string) {
	o.Label = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *TotalCostEntry) GetAmount() AmountValue {
	if o == nil || IsNil(o.Amount) {
		var ret AmountValue
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalCostEntry) GetAmountOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *TotalCostEntry) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given AmountValue and assigns it to the Amount field.
func (o *TotalCostEntry) SetAmount(v AmountValue) {
	o.Amount = &v
}

// GetAverageReturnPA returns the AverageReturnPA field value if set, zero value otherwise.
func (o *TotalCostEntry) GetAverageReturnPA() PercentageString {
	if o == nil || IsNil(o.AverageReturnPA) {
		var ret PercentageString
		return ret
	}
	return *o.AverageReturnPA
}

// GetAverageReturnPAOk returns a tuple with the AverageReturnPA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalCostEntry) GetAverageReturnPAOk() (*PercentageString, bool) {
	if o == nil || IsNil(o.AverageReturnPA) {
		return nil, false
	}
	return o.AverageReturnPA, true
}

// HasAverageReturnPA returns a boolean if a field has been set.
func (o *TotalCostEntry) HasAverageReturnPA() bool {
	if o != nil && !IsNil(o.AverageReturnPA) {
		return true
	}

	return false
}

// SetAverageReturnPA gets a reference to the given PercentageString and assigns it to the AverageReturnPA field.
func (o *TotalCostEntry) SetAverageReturnPA(v PercentageString) {
	o.AverageReturnPA = &v
}

func (o TotalCostEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TotalCostEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.AverageReturnPA) {
		toSerialize["averageReturnPA"] = o.AverageReturnPA
	}
	return toSerialize, nil
}

type NullableTotalCostEntry struct {
	value *TotalCostEntry
	isSet bool
}

func (v NullableTotalCostEntry) Get() *TotalCostEntry {
	return v.value
}

func (v *NullableTotalCostEntry) Set(val *TotalCostEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableTotalCostEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableTotalCostEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTotalCostEntry(val *TotalCostEntry) *NullableTotalCostEntry {
	return &NullableTotalCostEntry{value: val, isSet: true}
}

func (v NullableTotalCostEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTotalCostEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


