/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the Document type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Document{}

// Document Model for a document.
type Document struct {
	// Unique ID of the document (UUID)
	DocumentId *string `json:"documentId,omitempty"`
	// Name or description of the document.
	Name *string `json:"name,omitempty"`
	// Date at which the Document was assigned to the client.
	DateCreation *string `json:"dateCreation,omitempty"`
	// The native mimeType of the document.
	MimeType *string `json:"mimeType,omitempty"`
	// Is the client allowed to delete the document?
	Deletable *bool `json:"deletable,omitempty"`
	// Is the document advertising comdirect products?
	Advertisement *bool `json:"advertisement,omitempty"`
	DocumentMetaData *DocumentMetadata `json:"documentMetaData,omitempty"`
}

// NewDocument instantiates a new Document object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocument() *Document {
	this := Document{}
	return &this
}

// NewDocumentWithDefaults instantiates a new Document object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentWithDefaults() *Document {
	this := Document{}
	return &this
}

// GetDocumentId returns the DocumentId field value if set, zero value otherwise.
func (o *Document) GetDocumentId() string {
	if o == nil || IsNil(o.DocumentId) {
		var ret string
		return ret
	}
	return *o.DocumentId
}

// GetDocumentIdOk returns a tuple with the DocumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDocumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.DocumentId) {
		return nil, false
	}
	return o.DocumentId, true
}

// HasDocumentId returns a boolean if a field has been set.
func (o *Document) HasDocumentId() bool {
	if o != nil && !IsNil(o.DocumentId) {
		return true
	}

	return false
}

// SetDocumentId gets a reference to the given string and assigns it to the DocumentId field.
func (o *Document) SetDocumentId(v string) {
	o.DocumentId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Document) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Document) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Document) SetName(v string) {
	o.Name = &v
}

// GetDateCreation returns the DateCreation field value if set, zero value otherwise.
func (o *Document) GetDateCreation() string {
	if o == nil || IsNil(o.DateCreation) {
		var ret string
		return ret
	}
	return *o.DateCreation
}

// GetDateCreationOk returns a tuple with the DateCreation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDateCreationOk() (*string, bool) {
	if o == nil || IsNil(o.DateCreation) {
		return nil, false
	}
	return o.DateCreation, true
}

// HasDateCreation returns a boolean if a field has been set.
func (o *Document) HasDateCreation() bool {
	if o != nil && !IsNil(o.DateCreation) {
		return true
	}

	return false
}

// SetDateCreation gets a reference to the given string and assigns it to the DateCreation field.
func (o *Document) SetDateCreation(v string) {
	o.DateCreation = &v
}

// GetMimeType returns the MimeType field value if set, zero value otherwise.
func (o *Document) GetMimeType() string {
	if o == nil || IsNil(o.MimeType) {
		var ret string
		return ret
	}
	return *o.MimeType
}

// GetMimeTypeOk returns a tuple with the MimeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetMimeTypeOk() (*string, bool) {
	if o == nil || IsNil(o.MimeType) {
		return nil, false
	}
	return o.MimeType, true
}

// HasMimeType returns a boolean if a field has been set.
func (o *Document) HasMimeType() bool {
	if o != nil && !IsNil(o.MimeType) {
		return true
	}

	return false
}

// SetMimeType gets a reference to the given string and assigns it to the MimeType field.
func (o *Document) SetMimeType(v string) {
	o.MimeType = &v
}

// GetDeletable returns the Deletable field value if set, zero value otherwise.
func (o *Document) GetDeletable() bool {
	if o == nil || IsNil(o.Deletable) {
		var ret bool
		return ret
	}
	return *o.Deletable
}

// GetDeletableOk returns a tuple with the Deletable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDeletableOk() (*bool, bool) {
	if o == nil || IsNil(o.Deletable) {
		return nil, false
	}
	return o.Deletable, true
}

// HasDeletable returns a boolean if a field has been set.
func (o *Document) HasDeletable() bool {
	if o != nil && !IsNil(o.Deletable) {
		return true
	}

	return false
}

// SetDeletable gets a reference to the given bool and assigns it to the Deletable field.
func (o *Document) SetDeletable(v bool) {
	o.Deletable = &v
}

// GetAdvertisement returns the Advertisement field value if set, zero value otherwise.
func (o *Document) GetAdvertisement() bool {
	if o == nil || IsNil(o.Advertisement) {
		var ret bool
		return ret
	}
	return *o.Advertisement
}

// GetAdvertisementOk returns a tuple with the Advertisement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetAdvertisementOk() (*bool, bool) {
	if o == nil || IsNil(o.Advertisement) {
		return nil, false
	}
	return o.Advertisement, true
}

// HasAdvertisement returns a boolean if a field has been set.
func (o *Document) HasAdvertisement() bool {
	if o != nil && !IsNil(o.Advertisement) {
		return true
	}

	return false
}

// SetAdvertisement gets a reference to the given bool and assigns it to the Advertisement field.
func (o *Document) SetAdvertisement(v bool) {
	o.Advertisement = &v
}

// GetDocumentMetaData returns the DocumentMetaData field value if set, zero value otherwise.
func (o *Document) GetDocumentMetaData() DocumentMetadata {
	if o == nil || IsNil(o.DocumentMetaData) {
		var ret DocumentMetadata
		return ret
	}
	return *o.DocumentMetaData
}

// GetDocumentMetaDataOk returns a tuple with the DocumentMetaData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Document) GetDocumentMetaDataOk() (*DocumentMetadata, bool) {
	if o == nil || IsNil(o.DocumentMetaData) {
		return nil, false
	}
	return o.DocumentMetaData, true
}

// HasDocumentMetaData returns a boolean if a field has been set.
func (o *Document) HasDocumentMetaData() bool {
	if o != nil && !IsNil(o.DocumentMetaData) {
		return true
	}

	return false
}

// SetDocumentMetaData gets a reference to the given DocumentMetadata and assigns it to the DocumentMetaData field.
func (o *Document) SetDocumentMetaData(v DocumentMetadata) {
	o.DocumentMetaData = &v
}

func (o Document) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Document) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DocumentId) {
		toSerialize["documentId"] = o.DocumentId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.DateCreation) {
		toSerialize["dateCreation"] = o.DateCreation
	}
	if !IsNil(o.MimeType) {
		toSerialize["mimeType"] = o.MimeType
	}
	if !IsNil(o.Deletable) {
		toSerialize["deletable"] = o.Deletable
	}
	if !IsNil(o.Advertisement) {
		toSerialize["advertisement"] = o.Advertisement
	}
	if !IsNil(o.DocumentMetaData) {
		toSerialize["documentMetaData"] = o.DocumentMetaData
	}
	return toSerialize, nil
}

type NullableDocument struct {
	value *Document
	isSet bool
}

func (v NullableDocument) Get() *Document {
	return v.value
}

func (v *NullableDocument) Set(val *Document) {
	v.value = val
	v.isSet = true
}

func (v NullableDocument) IsSet() bool {
	return v.isSet
}

func (v *NullableDocument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocument(val *Document) *NullableDocument {
	return &NullableDocument{value: val, isSet: true}
}

func (v NullableDocument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


