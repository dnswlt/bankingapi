/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the DepotTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DepotTransaction{}

// DepotTransaction Model for a depot transaction.
type DepotTransaction struct {
	// Transaction Identifier (UUID)
	TransactionId *string `json:"transactionId,omitempty"`
	// Status of transaction
	BookingStatus *string `json:"bookingStatus,omitempty"`
	BookingDate *DateString `json:"bookingDate,omitempty"`
	SettlementDate *DateTimeString `json:"settlementDate,omitempty"`
	BusinessDate *DateString `json:"businessDate,omitempty"`
	Quantity *AmountValue `json:"quantity,omitempty"`
	// InstrumentId as UUID
	InstrumentId *string `json:"instrumentId,omitempty"`
	Instrument *Instrument `json:"instrument,omitempty"`
	ExecutionPrice *AmountValue `json:"executionPrice,omitempty"`
	TransactionValue *AmountValue `json:"transactionValue,omitempty"`
	// Transaction direction
	TransactionDirection *string `json:"transactionDirection,omitempty"`
	// On the basis of securities account turnover transaction type
	TransactionType *string `json:"transactionType,omitempty"`
	FxRate *FXRateEUR `json:"fxRate,omitempty"`
}

// NewDepotTransaction instantiates a new DepotTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepotTransaction() *DepotTransaction {
	this := DepotTransaction{}
	return &this
}

// NewDepotTransactionWithDefaults instantiates a new DepotTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepotTransactionWithDefaults() *DepotTransaction {
	this := DepotTransaction{}
	return &this
}

// GetTransactionId returns the TransactionId field value if set, zero value otherwise.
func (o *DepotTransaction) GetTransactionId() string {
	if o == nil || IsNil(o.TransactionId) {
		var ret string
		return ret
	}
	return *o.TransactionId
}

// GetTransactionIdOk returns a tuple with the TransactionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotTransaction) GetTransactionIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionId) {
		return nil, false
	}
	return o.TransactionId, true
}

// HasTransactionId returns a boolean if a field has been set.
func (o *DepotTransaction) HasTransactionId() bool {
	if o != nil && !IsNil(o.TransactionId) {
		return true
	}

	return false
}

// SetTransactionId gets a reference to the given string and assigns it to the TransactionId field.
func (o *DepotTransaction) SetTransactionId(v string) {
	o.TransactionId = &v
}

// GetBookingStatus returns the BookingStatus field value if set, zero value otherwise.
func (o *DepotTransaction) GetBookingStatus() string {
	if o == nil || IsNil(o.BookingStatus) {
		var ret string
		return ret
	}
	return *o.BookingStatus
}

// GetBookingStatusOk returns a tuple with the BookingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotTransaction) GetBookingStatusOk() (*string, bool) {
	if o == nil || IsNil(o.BookingStatus) {
		return nil, false
	}
	return o.BookingStatus, true
}

// HasBookingStatus returns a boolean if a field has been set.
func (o *DepotTransaction) HasBookingStatus() bool {
	if o != nil && !IsNil(o.BookingStatus) {
		return true
	}

	return false
}

// SetBookingStatus gets a reference to the given string and assigns it to the BookingStatus field.
func (o *DepotTransaction) SetBookingStatus(v string) {
	o.BookingStatus = &v
}

// GetBookingDate returns the BookingDate field value if set, zero value otherwise.
func (o *DepotTransaction) GetBookingDate() DateString {
	if o == nil || IsNil(o.BookingDate) {
		var ret DateString
		return ret
	}
	return *o.BookingDate
}

// GetBookingDateOk returns a tuple with the BookingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotTransaction) GetBookingDateOk() (*DateString, bool) {
	if o == nil || IsNil(o.BookingDate) {
		return nil, false
	}
	return o.BookingDate, true
}

// HasBookingDate returns a boolean if a field has been set.
func (o *DepotTransaction) HasBookingDate() bool {
	if o != nil && !IsNil(o.BookingDate) {
		return true
	}

	return false
}

// SetBookingDate gets a reference to the given DateString and assigns it to the BookingDate field.
func (o *DepotTransaction) SetBookingDate(v DateString) {
	o.BookingDate = &v
}

// GetSettlementDate returns the SettlementDate field value if set, zero value otherwise.
func (o *DepotTransaction) GetSettlementDate() DateTimeString {
	if o == nil || IsNil(o.SettlementDate) {
		var ret DateTimeString
		return ret
	}
	return *o.SettlementDate
}

// GetSettlementDateOk returns a tuple with the SettlementDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotTransaction) GetSettlementDateOk() (*DateTimeString, bool) {
	if o == nil || IsNil(o.SettlementDate) {
		return nil, false
	}
	return o.SettlementDate, true
}

// HasSettlementDate returns a boolean if a field has been set.
func (o *DepotTransaction) HasSettlementDate() bool {
	if o != nil && !IsNil(o.SettlementDate) {
		return true
	}

	return false
}

// SetSettlementDate gets a reference to the given DateTimeString and assigns it to the SettlementDate field.
func (o *DepotTransaction) SetSettlementDate(v DateTimeString) {
	o.SettlementDate = &v
}

// GetBusinessDate returns the BusinessDate field value if set, zero value otherwise.
func (o *DepotTransaction) GetBusinessDate() DateString {
	if o == nil || IsNil(o.BusinessDate) {
		var ret DateString
		return ret
	}
	return *o.BusinessDate
}

// GetBusinessDateOk returns a tuple with the BusinessDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotTransaction) GetBusinessDateOk() (*DateString, bool) {
	if o == nil || IsNil(o.BusinessDate) {
		return nil, false
	}
	return o.BusinessDate, true
}

// HasBusinessDate returns a boolean if a field has been set.
func (o *DepotTransaction) HasBusinessDate() bool {
	if o != nil && !IsNil(o.BusinessDate) {
		return true
	}

	return false
}

// SetBusinessDate gets a reference to the given DateString and assigns it to the BusinessDate field.
func (o *DepotTransaction) SetBusinessDate(v DateString) {
	o.BusinessDate = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *DepotTransaction) GetQuantity() AmountValue {
	if o == nil || IsNil(o.Quantity) {
		var ret AmountValue
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotTransaction) GetQuantityOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *DepotTransaction) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given AmountValue and assigns it to the Quantity field.
func (o *DepotTransaction) SetQuantity(v AmountValue) {
	o.Quantity = &v
}

// GetInstrumentId returns the InstrumentId field value if set, zero value otherwise.
func (o *DepotTransaction) GetInstrumentId() string {
	if o == nil || IsNil(o.InstrumentId) {
		var ret string
		return ret
	}
	return *o.InstrumentId
}

// GetInstrumentIdOk returns a tuple with the InstrumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotTransaction) GetInstrumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstrumentId) {
		return nil, false
	}
	return o.InstrumentId, true
}

// HasInstrumentId returns a boolean if a field has been set.
func (o *DepotTransaction) HasInstrumentId() bool {
	if o != nil && !IsNil(o.InstrumentId) {
		return true
	}

	return false
}

// SetInstrumentId gets a reference to the given string and assigns it to the InstrumentId field.
func (o *DepotTransaction) SetInstrumentId(v string) {
	o.InstrumentId = &v
}

// GetInstrument returns the Instrument field value if set, zero value otherwise.
func (o *DepotTransaction) GetInstrument() Instrument {
	if o == nil || IsNil(o.Instrument) {
		var ret Instrument
		return ret
	}
	return *o.Instrument
}

// GetInstrumentOk returns a tuple with the Instrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotTransaction) GetInstrumentOk() (*Instrument, bool) {
	if o == nil || IsNil(o.Instrument) {
		return nil, false
	}
	return o.Instrument, true
}

// HasInstrument returns a boolean if a field has been set.
func (o *DepotTransaction) HasInstrument() bool {
	if o != nil && !IsNil(o.Instrument) {
		return true
	}

	return false
}

// SetInstrument gets a reference to the given Instrument and assigns it to the Instrument field.
func (o *DepotTransaction) SetInstrument(v Instrument) {
	o.Instrument = &v
}

// GetExecutionPrice returns the ExecutionPrice field value if set, zero value otherwise.
func (o *DepotTransaction) GetExecutionPrice() AmountValue {
	if o == nil || IsNil(o.ExecutionPrice) {
		var ret AmountValue
		return ret
	}
	return *o.ExecutionPrice
}

// GetExecutionPriceOk returns a tuple with the ExecutionPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotTransaction) GetExecutionPriceOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.ExecutionPrice) {
		return nil, false
	}
	return o.ExecutionPrice, true
}

// HasExecutionPrice returns a boolean if a field has been set.
func (o *DepotTransaction) HasExecutionPrice() bool {
	if o != nil && !IsNil(o.ExecutionPrice) {
		return true
	}

	return false
}

// SetExecutionPrice gets a reference to the given AmountValue and assigns it to the ExecutionPrice field.
func (o *DepotTransaction) SetExecutionPrice(v AmountValue) {
	o.ExecutionPrice = &v
}

// GetTransactionValue returns the TransactionValue field value if set, zero value otherwise.
func (o *DepotTransaction) GetTransactionValue() AmountValue {
	if o == nil || IsNil(o.TransactionValue) {
		var ret AmountValue
		return ret
	}
	return *o.TransactionValue
}

// GetTransactionValueOk returns a tuple with the TransactionValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotTransaction) GetTransactionValueOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.TransactionValue) {
		return nil, false
	}
	return o.TransactionValue, true
}

// HasTransactionValue returns a boolean if a field has been set.
func (o *DepotTransaction) HasTransactionValue() bool {
	if o != nil && !IsNil(o.TransactionValue) {
		return true
	}

	return false
}

// SetTransactionValue gets a reference to the given AmountValue and assigns it to the TransactionValue field.
func (o *DepotTransaction) SetTransactionValue(v AmountValue) {
	o.TransactionValue = &v
}

// GetTransactionDirection returns the TransactionDirection field value if set, zero value otherwise.
func (o *DepotTransaction) GetTransactionDirection() string {
	if o == nil || IsNil(o.TransactionDirection) {
		var ret string
		return ret
	}
	return *o.TransactionDirection
}

// GetTransactionDirectionOk returns a tuple with the TransactionDirection field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotTransaction) GetTransactionDirectionOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionDirection) {
		return nil, false
	}
	return o.TransactionDirection, true
}

// HasTransactionDirection returns a boolean if a field has been set.
func (o *DepotTransaction) HasTransactionDirection() bool {
	if o != nil && !IsNil(o.TransactionDirection) {
		return true
	}

	return false
}

// SetTransactionDirection gets a reference to the given string and assigns it to the TransactionDirection field.
func (o *DepotTransaction) SetTransactionDirection(v string) {
	o.TransactionDirection = &v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *DepotTransaction) GetTransactionType() string {
	if o == nil || IsNil(o.TransactionType) {
		var ret string
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotTransaction) GetTransactionTypeOk() (*string, bool) {
	if o == nil || IsNil(o.TransactionType) {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *DepotTransaction) HasTransactionType() bool {
	if o != nil && !IsNil(o.TransactionType) {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given string and assigns it to the TransactionType field.
func (o *DepotTransaction) SetTransactionType(v string) {
	o.TransactionType = &v
}

// GetFxRate returns the FxRate field value if set, zero value otherwise.
func (o *DepotTransaction) GetFxRate() FXRateEUR {
	if o == nil || IsNil(o.FxRate) {
		var ret FXRateEUR
		return ret
	}
	return *o.FxRate
}

// GetFxRateOk returns a tuple with the FxRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotTransaction) GetFxRateOk() (*FXRateEUR, bool) {
	if o == nil || IsNil(o.FxRate) {
		return nil, false
	}
	return o.FxRate, true
}

// HasFxRate returns a boolean if a field has been set.
func (o *DepotTransaction) HasFxRate() bool {
	if o != nil && !IsNil(o.FxRate) {
		return true
	}

	return false
}

// SetFxRate gets a reference to the given FXRateEUR and assigns it to the FxRate field.
func (o *DepotTransaction) SetFxRate(v FXRateEUR) {
	o.FxRate = &v
}

func (o DepotTransaction) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepotTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TransactionId) {
		toSerialize["transactionId"] = o.TransactionId
	}
	if !IsNil(o.BookingStatus) {
		toSerialize["bookingStatus"] = o.BookingStatus
	}
	if !IsNil(o.BookingDate) {
		toSerialize["bookingDate"] = o.BookingDate
	}
	if !IsNil(o.SettlementDate) {
		toSerialize["settlementDate"] = o.SettlementDate
	}
	if !IsNil(o.BusinessDate) {
		toSerialize["businessDate"] = o.BusinessDate
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.InstrumentId) {
		toSerialize["instrumentId"] = o.InstrumentId
	}
	if !IsNil(o.Instrument) {
		toSerialize["instrument"] = o.Instrument
	}
	if !IsNil(o.ExecutionPrice) {
		toSerialize["executionPrice"] = o.ExecutionPrice
	}
	if !IsNil(o.TransactionValue) {
		toSerialize["transactionValue"] = o.TransactionValue
	}
	if !IsNil(o.TransactionDirection) {
		toSerialize["transactionDirection"] = o.TransactionDirection
	}
	if !IsNil(o.TransactionType) {
		toSerialize["transactionType"] = o.TransactionType
	}
	if !IsNil(o.FxRate) {
		toSerialize["fxRate"] = o.FxRate
	}
	return toSerialize, nil
}

type NullableDepotTransaction struct {
	value *DepotTransaction
	isSet bool
}

func (v NullableDepotTransaction) Get() *DepotTransaction {
	return v.value
}

func (v *NullableDepotTransaction) Set(val *DepotTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableDepotTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableDepotTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepotTransaction(val *DepotTransaction) *NullableDepotTransaction {
	return &NullableDepotTransaction{value: val, isSet: true}
}

func (v NullableDepotTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepotTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


