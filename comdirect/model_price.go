/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the Price type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Price{}

// Price Represents a price.
type Price struct {
	// Type of the price. Can be one of the following: {LST, BID, ASK, MID}.
	Type *string `json:"type,omitempty"`
	Price *AmountValue `json:"price,omitempty"`
	Quantity *AmountValue `json:"quantity,omitempty"`
	PriceDateTime *DateTimeString `json:"priceDateTime,omitempty"`
}

// NewPrice instantiates a new Price object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPrice() *Price {
	this := Price{}
	return &this
}

// NewPriceWithDefaults instantiates a new Price object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPriceWithDefaults() *Price {
	this := Price{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Price) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Price) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Price) SetType(v string) {
	o.Type = &v
}

// GetPrice returns the Price field value if set, zero value otherwise.
func (o *Price) GetPrice() AmountValue {
	if o == nil || IsNil(o.Price) {
		var ret AmountValue
		return ret
	}
	return *o.Price
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetPriceOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Price) {
		return nil, false
	}
	return o.Price, true
}

// HasPrice returns a boolean if a field has been set.
func (o *Price) HasPrice() bool {
	if o != nil && !IsNil(o.Price) {
		return true
	}

	return false
}

// SetPrice gets a reference to the given AmountValue and assigns it to the Price field.
func (o *Price) SetPrice(v AmountValue) {
	o.Price = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Price) GetQuantity() AmountValue {
	if o == nil || IsNil(o.Quantity) {
		var ret AmountValue
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetQuantityOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Price) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given AmountValue and assigns it to the Quantity field.
func (o *Price) SetQuantity(v AmountValue) {
	o.Quantity = &v
}

// GetPriceDateTime returns the PriceDateTime field value if set, zero value otherwise.
func (o *Price) GetPriceDateTime() DateTimeString {
	if o == nil || IsNil(o.PriceDateTime) {
		var ret DateTimeString
		return ret
	}
	return *o.PriceDateTime
}

// GetPriceDateTimeOk returns a tuple with the PriceDateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Price) GetPriceDateTimeOk() (*DateTimeString, bool) {
	if o == nil || IsNil(o.PriceDateTime) {
		return nil, false
	}
	return o.PriceDateTime, true
}

// HasPriceDateTime returns a boolean if a field has been set.
func (o *Price) HasPriceDateTime() bool {
	if o != nil && !IsNil(o.PriceDateTime) {
		return true
	}

	return false
}

// SetPriceDateTime gets a reference to the given DateTimeString and assigns it to the PriceDateTime field.
func (o *Price) SetPriceDateTime(v DateTimeString) {
	o.PriceDateTime = &v
}

func (o Price) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Price) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Price) {
		toSerialize["price"] = o.Price
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.PriceDateTime) {
		toSerialize["priceDateTime"] = o.PriceDateTime
	}
	return toSerialize, nil
}

type NullablePrice struct {
	value *Price
	isSet bool
}

func (v NullablePrice) Get() *Price {
	return v.value
}

func (v *NullablePrice) Set(val *Price) {
	v.value = val
	v.isSet = true
}

func (v NullablePrice) IsSet() bool {
	return v.isSet
}

func (v *NullablePrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePrice(val *Price) *NullablePrice {
	return &NullablePrice{value: val, isSet: true}
}

func (v NullablePrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


