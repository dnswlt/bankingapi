/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the TotalHoldingCostBlock type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TotalHoldingCostBlock{}

// TotalHoldingCostBlock List of cost blocks over time.
type TotalHoldingCostBlock struct {
	Year1 *TotalHoldingCostEntry `json:"year1,omitempty"`
	Year2 *TotalHoldingCostEntry `json:"year2,omitempty"`
	Sales *TotalHoldingCostEntry `json:"sales,omitempty"`
}

// NewTotalHoldingCostBlock instantiates a new TotalHoldingCostBlock object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTotalHoldingCostBlock() *TotalHoldingCostBlock {
	this := TotalHoldingCostBlock{}
	return &this
}

// NewTotalHoldingCostBlockWithDefaults instantiates a new TotalHoldingCostBlock object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTotalHoldingCostBlockWithDefaults() *TotalHoldingCostBlock {
	this := TotalHoldingCostBlock{}
	return &this
}

// GetYear1 returns the Year1 field value if set, zero value otherwise.
func (o *TotalHoldingCostBlock) GetYear1() TotalHoldingCostEntry {
	if o == nil || IsNil(o.Year1) {
		var ret TotalHoldingCostEntry
		return ret
	}
	return *o.Year1
}

// GetYear1Ok returns a tuple with the Year1 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalHoldingCostBlock) GetYear1Ok() (*TotalHoldingCostEntry, bool) {
	if o == nil || IsNil(o.Year1) {
		return nil, false
	}
	return o.Year1, true
}

// HasYear1 returns a boolean if a field has been set.
func (o *TotalHoldingCostBlock) HasYear1() bool {
	if o != nil && !IsNil(o.Year1) {
		return true
	}

	return false
}

// SetYear1 gets a reference to the given TotalHoldingCostEntry and assigns it to the Year1 field.
func (o *TotalHoldingCostBlock) SetYear1(v TotalHoldingCostEntry) {
	o.Year1 = &v
}

// GetYear2 returns the Year2 field value if set, zero value otherwise.
func (o *TotalHoldingCostBlock) GetYear2() TotalHoldingCostEntry {
	if o == nil || IsNil(o.Year2) {
		var ret TotalHoldingCostEntry
		return ret
	}
	return *o.Year2
}

// GetYear2Ok returns a tuple with the Year2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalHoldingCostBlock) GetYear2Ok() (*TotalHoldingCostEntry, bool) {
	if o == nil || IsNil(o.Year2) {
		return nil, false
	}
	return o.Year2, true
}

// HasYear2 returns a boolean if a field has been set.
func (o *TotalHoldingCostBlock) HasYear2() bool {
	if o != nil && !IsNil(o.Year2) {
		return true
	}

	return false
}

// SetYear2 gets a reference to the given TotalHoldingCostEntry and assigns it to the Year2 field.
func (o *TotalHoldingCostBlock) SetYear2(v TotalHoldingCostEntry) {
	o.Year2 = &v
}

// GetSales returns the Sales field value if set, zero value otherwise.
func (o *TotalHoldingCostBlock) GetSales() TotalHoldingCostEntry {
	if o == nil || IsNil(o.Sales) {
		var ret TotalHoldingCostEntry
		return ret
	}
	return *o.Sales
}

// GetSalesOk returns a tuple with the Sales field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TotalHoldingCostBlock) GetSalesOk() (*TotalHoldingCostEntry, bool) {
	if o == nil || IsNil(o.Sales) {
		return nil, false
	}
	return o.Sales, true
}

// HasSales returns a boolean if a field has been set.
func (o *TotalHoldingCostBlock) HasSales() bool {
	if o != nil && !IsNil(o.Sales) {
		return true
	}

	return false
}

// SetSales gets a reference to the given TotalHoldingCostEntry and assigns it to the Sales field.
func (o *TotalHoldingCostBlock) SetSales(v TotalHoldingCostEntry) {
	o.Sales = &v
}

func (o TotalHoldingCostBlock) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TotalHoldingCostBlock) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Year1) {
		toSerialize["year1"] = o.Year1
	}
	if !IsNil(o.Year2) {
		toSerialize["year2"] = o.Year2
	}
	if !IsNil(o.Sales) {
		toSerialize["sales"] = o.Sales
	}
	return toSerialize, nil
}

type NullableTotalHoldingCostBlock struct {
	value *TotalHoldingCostBlock
	isSet bool
}

func (v NullableTotalHoldingCostBlock) Get() *TotalHoldingCostBlock {
	return v.value
}

func (v *NullableTotalHoldingCostBlock) Set(val *TotalHoldingCostBlock) {
	v.value = val
	v.isSet = true
}

func (v NullableTotalHoldingCostBlock) IsSet() bool {
	return v.isSet
}

func (v *NullableTotalHoldingCostBlock) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTotalHoldingCostBlock(val *TotalHoldingCostBlock) *NullableTotalHoldingCostBlock {
	return &NullableTotalHoldingCostBlock{value: val, isSet: true}
}

func (v NullableTotalHoldingCostBlock) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTotalHoldingCostBlock) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


