/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the Account type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Account{}

// Account Master data of an account
type Account struct {
	// Account identifier (UUID)
	AccountId *string `json:"accountId,omitempty"`
	// Account identfier
	AccountDisplayId *string `json:"accountDisplayId,omitempty"`
	Currency *CurrencyString `json:"currency,omitempty"`
	// Identification Code of the client (UUID)
	ClientId *string `json:"clientId,omitempty"`
	AccountType *EnumText `json:"accountType,omitempty"`
	// IBAN (International bank account number), if available
	Iban *string `json:"iban,omitempty"`
	CreditLimit *AmountValue `json:"creditLimit,omitempty"`
}

// NewAccount instantiates a new Account object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccount() *Account {
	this := Account{}
	return &this
}

// NewAccountWithDefaults instantiates a new Account object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountWithDefaults() *Account {
	this := Account{}
	return &this
}

// GetAccountId returns the AccountId field value if set, zero value otherwise.
func (o *Account) GetAccountId() string {
	if o == nil || IsNil(o.AccountId) {
		var ret string
		return ret
	}
	return *o.AccountId
}

// GetAccountIdOk returns a tuple with the AccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountId) {
		return nil, false
	}
	return o.AccountId, true
}

// HasAccountId returns a boolean if a field has been set.
func (o *Account) HasAccountId() bool {
	if o != nil && !IsNil(o.AccountId) {
		return true
	}

	return false
}

// SetAccountId gets a reference to the given string and assigns it to the AccountId field.
func (o *Account) SetAccountId(v string) {
	o.AccountId = &v
}

// GetAccountDisplayId returns the AccountDisplayId field value if set, zero value otherwise.
func (o *Account) GetAccountDisplayId() string {
	if o == nil || IsNil(o.AccountDisplayId) {
		var ret string
		return ret
	}
	return *o.AccountDisplayId
}

// GetAccountDisplayIdOk returns a tuple with the AccountDisplayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountDisplayIdOk() (*string, bool) {
	if o == nil || IsNil(o.AccountDisplayId) {
		return nil, false
	}
	return o.AccountDisplayId, true
}

// HasAccountDisplayId returns a boolean if a field has been set.
func (o *Account) HasAccountDisplayId() bool {
	if o != nil && !IsNil(o.AccountDisplayId) {
		return true
	}

	return false
}

// SetAccountDisplayId gets a reference to the given string and assigns it to the AccountDisplayId field.
func (o *Account) SetAccountDisplayId(v string) {
	o.AccountDisplayId = &v
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *Account) GetCurrency() CurrencyString {
	if o == nil || IsNil(o.Currency) {
		var ret CurrencyString
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCurrencyOk() (*CurrencyString, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *Account) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given CurrencyString and assigns it to the Currency field.
func (o *Account) SetCurrency(v CurrencyString) {
	o.Currency = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *Account) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *Account) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *Account) SetClientId(v string) {
	o.ClientId = &v
}

// GetAccountType returns the AccountType field value if set, zero value otherwise.
func (o *Account) GetAccountType() EnumText {
	if o == nil || IsNil(o.AccountType) {
		var ret EnumText
		return ret
	}
	return *o.AccountType
}

// GetAccountTypeOk returns a tuple with the AccountType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetAccountTypeOk() (*EnumText, bool) {
	if o == nil || IsNil(o.AccountType) {
		return nil, false
	}
	return o.AccountType, true
}

// HasAccountType returns a boolean if a field has been set.
func (o *Account) HasAccountType() bool {
	if o != nil && !IsNil(o.AccountType) {
		return true
	}

	return false
}

// SetAccountType gets a reference to the given EnumText and assigns it to the AccountType field.
func (o *Account) SetAccountType(v EnumText) {
	o.AccountType = &v
}

// GetIban returns the Iban field value if set, zero value otherwise.
func (o *Account) GetIban() string {
	if o == nil || IsNil(o.Iban) {
		var ret string
		return ret
	}
	return *o.Iban
}

// GetIbanOk returns a tuple with the Iban field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetIbanOk() (*string, bool) {
	if o == nil || IsNil(o.Iban) {
		return nil, false
	}
	return o.Iban, true
}

// HasIban returns a boolean if a field has been set.
func (o *Account) HasIban() bool {
	if o != nil && !IsNil(o.Iban) {
		return true
	}

	return false
}

// SetIban gets a reference to the given string and assigns it to the Iban field.
func (o *Account) SetIban(v string) {
	o.Iban = &v
}

// GetCreditLimit returns the CreditLimit field value if set, zero value otherwise.
func (o *Account) GetCreditLimit() AmountValue {
	if o == nil || IsNil(o.CreditLimit) {
		var ret AmountValue
		return ret
	}
	return *o.CreditLimit
}

// GetCreditLimitOk returns a tuple with the CreditLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Account) GetCreditLimitOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.CreditLimit) {
		return nil, false
	}
	return o.CreditLimit, true
}

// HasCreditLimit returns a boolean if a field has been set.
func (o *Account) HasCreditLimit() bool {
	if o != nil && !IsNil(o.CreditLimit) {
		return true
	}

	return false
}

// SetCreditLimit gets a reference to the given AmountValue and assigns it to the CreditLimit field.
func (o *Account) SetCreditLimit(v AmountValue) {
	o.CreditLimit = &v
}

func (o Account) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Account) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.AccountId) {
		toSerialize["accountId"] = o.AccountId
	}
	if !IsNil(o.AccountDisplayId) {
		toSerialize["accountDisplayId"] = o.AccountDisplayId
	}
	if !IsNil(o.Currency) {
		toSerialize["currency"] = o.Currency
	}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !IsNil(o.AccountType) {
		toSerialize["accountType"] = o.AccountType
	}
	if !IsNil(o.Iban) {
		toSerialize["iban"] = o.Iban
	}
	if !IsNil(o.CreditLimit) {
		toSerialize["creditLimit"] = o.CreditLimit
	}
	return toSerialize, nil
}

type NullableAccount struct {
	value *Account
	isSet bool
}

func (v NullableAccount) Get() *Account {
	return v.value
}

func (v *NullableAccount) Set(val *Account) {
	v.value = val
	v.isSet = true
}

func (v NullableAccount) IsSet() bool {
	return v.isSet
}

func (v *NullableAccount) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccount(val *Account) *NullableAccount {
	return &NullableAccount{value: val, isSet: true}
}

func (v NullableAccount) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccount) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


