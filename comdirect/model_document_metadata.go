/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the DocumentMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DocumentMetadata{}

// DocumentMetadata Model for category-specific metadata of documents.
type DocumentMetadata struct {
	// Is document archived?
	Archived *bool `json:"archived,omitempty"`
	// Date on which the document was read.
	DateRead *string `json:"dateRead,omitempty"`
	// Has the document been read?
	AlreadyRead *bool `json:"alreadyRead,omitempty"`
	PredocumentExists *bool `json:"predocumentExists,omitempty"`
}

// NewDocumentMetadata instantiates a new DocumentMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDocumentMetadata() *DocumentMetadata {
	this := DocumentMetadata{}
	var predocumentExists bool = false
	this.PredocumentExists = &predocumentExists
	return &this
}

// NewDocumentMetadataWithDefaults instantiates a new DocumentMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDocumentMetadataWithDefaults() *DocumentMetadata {
	this := DocumentMetadata{}
	var predocumentExists bool = false
	this.PredocumentExists = &predocumentExists
	return &this
}

// GetArchived returns the Archived field value if set, zero value otherwise.
func (o *DocumentMetadata) GetArchived() bool {
	if o == nil || IsNil(o.Archived) {
		var ret bool
		return ret
	}
	return *o.Archived
}

// GetArchivedOk returns a tuple with the Archived field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentMetadata) GetArchivedOk() (*bool, bool) {
	if o == nil || IsNil(o.Archived) {
		return nil, false
	}
	return o.Archived, true
}

// HasArchived returns a boolean if a field has been set.
func (o *DocumentMetadata) HasArchived() bool {
	if o != nil && !IsNil(o.Archived) {
		return true
	}

	return false
}

// SetArchived gets a reference to the given bool and assigns it to the Archived field.
func (o *DocumentMetadata) SetArchived(v bool) {
	o.Archived = &v
}

// GetDateRead returns the DateRead field value if set, zero value otherwise.
func (o *DocumentMetadata) GetDateRead() string {
	if o == nil || IsNil(o.DateRead) {
		var ret string
		return ret
	}
	return *o.DateRead
}

// GetDateReadOk returns a tuple with the DateRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentMetadata) GetDateReadOk() (*string, bool) {
	if o == nil || IsNil(o.DateRead) {
		return nil, false
	}
	return o.DateRead, true
}

// HasDateRead returns a boolean if a field has been set.
func (o *DocumentMetadata) HasDateRead() bool {
	if o != nil && !IsNil(o.DateRead) {
		return true
	}

	return false
}

// SetDateRead gets a reference to the given string and assigns it to the DateRead field.
func (o *DocumentMetadata) SetDateRead(v string) {
	o.DateRead = &v
}

// GetAlreadyRead returns the AlreadyRead field value if set, zero value otherwise.
func (o *DocumentMetadata) GetAlreadyRead() bool {
	if o == nil || IsNil(o.AlreadyRead) {
		var ret bool
		return ret
	}
	return *o.AlreadyRead
}

// GetAlreadyReadOk returns a tuple with the AlreadyRead field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentMetadata) GetAlreadyReadOk() (*bool, bool) {
	if o == nil || IsNil(o.AlreadyRead) {
		return nil, false
	}
	return o.AlreadyRead, true
}

// HasAlreadyRead returns a boolean if a field has been set.
func (o *DocumentMetadata) HasAlreadyRead() bool {
	if o != nil && !IsNil(o.AlreadyRead) {
		return true
	}

	return false
}

// SetAlreadyRead gets a reference to the given bool and assigns it to the AlreadyRead field.
func (o *DocumentMetadata) SetAlreadyRead(v bool) {
	o.AlreadyRead = &v
}

// GetPredocumentExists returns the PredocumentExists field value if set, zero value otherwise.
func (o *DocumentMetadata) GetPredocumentExists() bool {
	if o == nil || IsNil(o.PredocumentExists) {
		var ret bool
		return ret
	}
	return *o.PredocumentExists
}

// GetPredocumentExistsOk returns a tuple with the PredocumentExists field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DocumentMetadata) GetPredocumentExistsOk() (*bool, bool) {
	if o == nil || IsNil(o.PredocumentExists) {
		return nil, false
	}
	return o.PredocumentExists, true
}

// HasPredocumentExists returns a boolean if a field has been set.
func (o *DocumentMetadata) HasPredocumentExists() bool {
	if o != nil && !IsNil(o.PredocumentExists) {
		return true
	}

	return false
}

// SetPredocumentExists gets a reference to the given bool and assigns it to the PredocumentExists field.
func (o *DocumentMetadata) SetPredocumentExists(v bool) {
	o.PredocumentExists = &v
}

func (o DocumentMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DocumentMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Archived) {
		toSerialize["archived"] = o.Archived
	}
	if !IsNil(o.DateRead) {
		toSerialize["dateRead"] = o.DateRead
	}
	if !IsNil(o.AlreadyRead) {
		toSerialize["alreadyRead"] = o.AlreadyRead
	}
	if !IsNil(o.PredocumentExists) {
		toSerialize["predocumentExists"] = o.PredocumentExists
	}
	return toSerialize, nil
}

type NullableDocumentMetadata struct {
	value *DocumentMetadata
	isSet bool
}

func (v NullableDocumentMetadata) Get() *DocumentMetadata {
	return v.value
}

func (v *NullableDocumentMetadata) Set(val *DocumentMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableDocumentMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableDocumentMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDocumentMetadata(val *DocumentMetadata) *NullableDocumentMetadata {
	return &NullableDocumentMetadata{value: val, isSet: true}
}

func (v NullableDocumentMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDocumentMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


