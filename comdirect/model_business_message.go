/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the BusinessMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BusinessMessage{}

// BusinessMessage Model for an error
type BusinessMessage struct {
	// Identifier for the error
	Key *string `json:"key,omitempty"`
	// Severity level of the error
	Severity *string `json:"severity,omitempty"`
	// Default error message
	Message *string `json:"message,omitempty"`
	// List of properties causing validation errors
	Origin []string `json:"origin,omitempty"`
	// Arguments for the error message
	Args []map[string]interface{} `json:"args,omitempty"`
}

// NewBusinessMessage instantiates a new BusinessMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBusinessMessage() *BusinessMessage {
	this := BusinessMessage{}
	return &this
}

// NewBusinessMessageWithDefaults instantiates a new BusinessMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBusinessMessageWithDefaults() *BusinessMessage {
	this := BusinessMessage{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *BusinessMessage) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessMessage) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *BusinessMessage) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *BusinessMessage) SetKey(v string) {
	o.Key = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *BusinessMessage) GetSeverity() string {
	if o == nil || IsNil(o.Severity) {
		var ret string
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessMessage) GetSeverityOk() (*string, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *BusinessMessage) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given string and assigns it to the Severity field.
func (o *BusinessMessage) SetSeverity(v string) {
	o.Severity = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *BusinessMessage) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessMessage) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *BusinessMessage) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *BusinessMessage) SetMessage(v string) {
	o.Message = &v
}

// GetOrigin returns the Origin field value if set, zero value otherwise.
func (o *BusinessMessage) GetOrigin() []string {
	if o == nil || IsNil(o.Origin) {
		var ret []string
		return ret
	}
	return o.Origin
}

// GetOriginOk returns a tuple with the Origin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessMessage) GetOriginOk() ([]string, bool) {
	if o == nil || IsNil(o.Origin) {
		return nil, false
	}
	return o.Origin, true
}

// HasOrigin returns a boolean if a field has been set.
func (o *BusinessMessage) HasOrigin() bool {
	if o != nil && !IsNil(o.Origin) {
		return true
	}

	return false
}

// SetOrigin gets a reference to the given []string and assigns it to the Origin field.
func (o *BusinessMessage) SetOrigin(v []string) {
	o.Origin = v
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *BusinessMessage) GetArgs() []map[string]interface{} {
	if o == nil || IsNil(o.Args) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BusinessMessage) GetArgsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Args) {
		return nil, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *BusinessMessage) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given []map[string]interface{} and assigns it to the Args field.
func (o *BusinessMessage) SetArgs(v []map[string]interface{}) {
	o.Args = v
}

func (o BusinessMessage) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BusinessMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.Origin) {
		toSerialize["origin"] = o.Origin
	}
	if !IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	return toSerialize, nil
}

type NullableBusinessMessage struct {
	value *BusinessMessage
	isSet bool
}

func (v NullableBusinessMessage) Get() *BusinessMessage {
	return v.value
}

func (v *NullableBusinessMessage) Set(val *BusinessMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableBusinessMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableBusinessMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBusinessMessage(val *BusinessMessage) *NullableBusinessMessage {
	return &NullableBusinessMessage{value: val, isSet: true}
}

func (v NullableBusinessMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBusinessMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


