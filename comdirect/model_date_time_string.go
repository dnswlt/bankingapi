/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"
)

// DateTimeString Represents the date with the time.
type DateTimeString struct {
	// Time with format: 'yyyy-MM-dd'T'HH:mm:ssX'
	DateTime *time.Time `json:"dateTime,omitempty"`
}

// NewDateTimeString instantiates a new DateTimeString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateTimeString() *DateTimeString {
	this := DateTimeString{}
	return &this
}

// NewDateTimeStringWithDefaults instantiates a new DateTimeString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateTimeStringWithDefaults() *DateTimeString {
	this := DateTimeString{}
	return &this
}

// GetDateTime returns the DateTime field value if set, zero value otherwise.
func (o *DateTimeString) GetDateTime() time.Time {
	if o == nil || IsNil(o.DateTime) {
		var ret time.Time
		return ret
	}
	return *o.DateTime
}

// GetDateTimeOk returns a tuple with the DateTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateTimeString) GetDateTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.DateTime) {
		return nil, false
	}
	return o.DateTime, true
}

// HasDateTime returns a boolean if a field has been set.
func (o *DateTimeString) HasDateTime() bool {
	if o != nil && !IsNil(o.DateTime) {
		return true
	}

	return false
}

// SetDateTime gets a reference to the given time.Time and assigns it to the DateTime field.
func (o *DateTimeString) SetDateTime(v time.Time) {
	o.DateTime = &v
}

func (o *DateTimeString) MarshalJSON() ([]byte, error) {
	return json.Marshal(o.DateTime)
}

func (o *DateTimeString) UnmarshalJSON(b []byte) error {
	s := strings.Trim(string(b), `"`)
	if s == "" {
		return nil
	}

	// Fix timezone if it's like "+02" => "+02:00"
	// "+02" is what the banking API returns.
	if len(s) >= 3 && (s[len(s)-3] == '+' || s[len(s)-3] == '-') && len(s) == 22 {
		s += ":00"
	}

	t, err := time.Parse("2006-01-02T15:04:05Z07:00", s)
	if err != nil {
		return fmt.Errorf("cannot parse time: %w", err)
	}
	o.SetDateTime(t)
	return nil
}

type NullableDateTimeString struct {
	value *DateTimeString
	isSet bool
}

func (v NullableDateTimeString) Get() *DateTimeString {
	return v.value
}

func (v *NullableDateTimeString) Set(val *DateTimeString) {
	v.value = val
	v.isSet = true
}

func (v NullableDateTimeString) IsSet() bool {
	return v.isSet
}

func (v *NullableDateTimeString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateTimeString(val *DateTimeString) *NullableDateTimeString {
	return &NullableDateTimeString{value: val, isSet: true}
}

func (v NullableDateTimeString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateTimeString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
