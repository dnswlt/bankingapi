/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the CardBalance type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CardBalance{}

// CardBalance Model for a card balance.
type CardBalance struct {
	// Card identifier (UUID).
	CardId *string `json:"cardId,omitempty"`
	Card *Card `json:"card,omitempty"`
	Balance *AmountValue `json:"balance,omitempty"`
	AvailableCashAmount *AmountValue `json:"availableCashAmount,omitempty"`
}

// NewCardBalance instantiates a new CardBalance object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCardBalance() *CardBalance {
	this := CardBalance{}
	return &this
}

// NewCardBalanceWithDefaults instantiates a new CardBalance object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardBalanceWithDefaults() *CardBalance {
	this := CardBalance{}
	return &this
}

// GetCardId returns the CardId field value if set, zero value otherwise.
func (o *CardBalance) GetCardId() string {
	if o == nil || IsNil(o.CardId) {
		var ret string
		return ret
	}
	return *o.CardId
}

// GetCardIdOk returns a tuple with the CardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardBalance) GetCardIdOk() (*string, bool) {
	if o == nil || IsNil(o.CardId) {
		return nil, false
	}
	return o.CardId, true
}

// HasCardId returns a boolean if a field has been set.
func (o *CardBalance) HasCardId() bool {
	if o != nil && !IsNil(o.CardId) {
		return true
	}

	return false
}

// SetCardId gets a reference to the given string and assigns it to the CardId field.
func (o *CardBalance) SetCardId(v string) {
	o.CardId = &v
}

// GetCard returns the Card field value if set, zero value otherwise.
func (o *CardBalance) GetCard() Card {
	if o == nil || IsNil(o.Card) {
		var ret Card
		return ret
	}
	return *o.Card
}

// GetCardOk returns a tuple with the Card field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardBalance) GetCardOk() (*Card, bool) {
	if o == nil || IsNil(o.Card) {
		return nil, false
	}
	return o.Card, true
}

// HasCard returns a boolean if a field has been set.
func (o *CardBalance) HasCard() bool {
	if o != nil && !IsNil(o.Card) {
		return true
	}

	return false
}

// SetCard gets a reference to the given Card and assigns it to the Card field.
func (o *CardBalance) SetCard(v Card) {
	o.Card = &v
}

// GetBalance returns the Balance field value if set, zero value otherwise.
func (o *CardBalance) GetBalance() AmountValue {
	if o == nil || IsNil(o.Balance) {
		var ret AmountValue
		return ret
	}
	return *o.Balance
}

// GetBalanceOk returns a tuple with the Balance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardBalance) GetBalanceOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Balance) {
		return nil, false
	}
	return o.Balance, true
}

// HasBalance returns a boolean if a field has been set.
func (o *CardBalance) HasBalance() bool {
	if o != nil && !IsNil(o.Balance) {
		return true
	}

	return false
}

// SetBalance gets a reference to the given AmountValue and assigns it to the Balance field.
func (o *CardBalance) SetBalance(v AmountValue) {
	o.Balance = &v
}

// GetAvailableCashAmount returns the AvailableCashAmount field value if set, zero value otherwise.
func (o *CardBalance) GetAvailableCashAmount() AmountValue {
	if o == nil || IsNil(o.AvailableCashAmount) {
		var ret AmountValue
		return ret
	}
	return *o.AvailableCashAmount
}

// GetAvailableCashAmountOk returns a tuple with the AvailableCashAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CardBalance) GetAvailableCashAmountOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.AvailableCashAmount) {
		return nil, false
	}
	return o.AvailableCashAmount, true
}

// HasAvailableCashAmount returns a boolean if a field has been set.
func (o *CardBalance) HasAvailableCashAmount() bool {
	if o != nil && !IsNil(o.AvailableCashAmount) {
		return true
	}

	return false
}

// SetAvailableCashAmount gets a reference to the given AmountValue and assigns it to the AvailableCashAmount field.
func (o *CardBalance) SetAvailableCashAmount(v AmountValue) {
	o.AvailableCashAmount = &v
}

func (o CardBalance) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CardBalance) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CardId) {
		toSerialize["cardId"] = o.CardId
	}
	if !IsNil(o.Card) {
		toSerialize["card"] = o.Card
	}
	if !IsNil(o.Balance) {
		toSerialize["balance"] = o.Balance
	}
	if !IsNil(o.AvailableCashAmount) {
		toSerialize["availableCashAmount"] = o.AvailableCashAmount
	}
	return toSerialize, nil
}

type NullableCardBalance struct {
	value *CardBalance
	isSet bool
}

func (v NullableCardBalance) Get() *CardBalance {
	return v.value
}

func (v *NullableCardBalance) Set(val *CardBalance) {
	v.value = val
	v.isSet = true
}

func (v NullableCardBalance) IsSet() bool {
	return v.isSet
}

func (v *NullableCardBalance) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCardBalance(val *CardBalance) *NullableCardBalance {
	return &NullableCardBalance{value: val, isSet: true}
}

func (v NullableCardBalance) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCardBalance) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


