/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the DerivativeData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DerivativeData{}

// DerivativeData additional data of a derivative
type DerivativeData struct {
	UnderlyingInstrument *Instrument `json:"underlyingInstrument,omitempty"`
	UnderlyingPrice *Price `json:"underlyingPrice,omitempty"`
	// Certificate Type
	CertificateType *string `json:"certificateType,omitempty"`
	Rating *Rating `json:"rating,omitempty"`
	StrikePrice *AmountValue `json:"strikePrice,omitempty"`
	// Leverage of the derivate
	Leverage *string `json:"leverage,omitempty"`
	// multiplier of the underlying
	Multiplier *string `json:"multiplier,omitempty"`
	// expiry date of a derivative
	ExpiryDate *string `json:"expiryDate,omitempty"`
	// yield p.a.
	YieldPA *string `json:"yieldPA,omitempty"`
	// remaining Term (expiryDate-today)
	RemainingTermInYears *string `json:"remainingTermInYears,omitempty"`
	// nominal rate
	NominalRate *string `json:"nominalRate,omitempty"`
	// Warrant Type
	WarrantType *string `json:"warrantType,omitempty"`
	// maturity Date of a bonds
	MaturityDate *string `json:"maturityDate,omitempty"`
	// date of the interest payment of a bond
	InterestPaymentDate *string `json:"interestPaymentDate,omitempty"`
	// interval of the interest payment of a bond\",allowableValues = \"monthly, quarterly, biannualy, annualy
	InterestPaymentInterval *string `json:"interestPaymentInterval,omitempty"`
}

// NewDerivativeData instantiates a new DerivativeData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDerivativeData() *DerivativeData {
	this := DerivativeData{}
	return &this
}

// NewDerivativeDataWithDefaults instantiates a new DerivativeData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDerivativeDataWithDefaults() *DerivativeData {
	this := DerivativeData{}
	return &this
}

// GetUnderlyingInstrument returns the UnderlyingInstrument field value if set, zero value otherwise.
func (o *DerivativeData) GetUnderlyingInstrument() Instrument {
	if o == nil || IsNil(o.UnderlyingInstrument) {
		var ret Instrument
		return ret
	}
	return *o.UnderlyingInstrument
}

// GetUnderlyingInstrumentOk returns a tuple with the UnderlyingInstrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetUnderlyingInstrumentOk() (*Instrument, bool) {
	if o == nil || IsNil(o.UnderlyingInstrument) {
		return nil, false
	}
	return o.UnderlyingInstrument, true
}

// HasUnderlyingInstrument returns a boolean if a field has been set.
func (o *DerivativeData) HasUnderlyingInstrument() bool {
	if o != nil && !IsNil(o.UnderlyingInstrument) {
		return true
	}

	return false
}

// SetUnderlyingInstrument gets a reference to the given Instrument and assigns it to the UnderlyingInstrument field.
func (o *DerivativeData) SetUnderlyingInstrument(v Instrument) {
	o.UnderlyingInstrument = &v
}

// GetUnderlyingPrice returns the UnderlyingPrice field value if set, zero value otherwise.
func (o *DerivativeData) GetUnderlyingPrice() Price {
	if o == nil || IsNil(o.UnderlyingPrice) {
		var ret Price
		return ret
	}
	return *o.UnderlyingPrice
}

// GetUnderlyingPriceOk returns a tuple with the UnderlyingPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetUnderlyingPriceOk() (*Price, bool) {
	if o == nil || IsNil(o.UnderlyingPrice) {
		return nil, false
	}
	return o.UnderlyingPrice, true
}

// HasUnderlyingPrice returns a boolean if a field has been set.
func (o *DerivativeData) HasUnderlyingPrice() bool {
	if o != nil && !IsNil(o.UnderlyingPrice) {
		return true
	}

	return false
}

// SetUnderlyingPrice gets a reference to the given Price and assigns it to the UnderlyingPrice field.
func (o *DerivativeData) SetUnderlyingPrice(v Price) {
	o.UnderlyingPrice = &v
}

// GetCertificateType returns the CertificateType field value if set, zero value otherwise.
func (o *DerivativeData) GetCertificateType() string {
	if o == nil || IsNil(o.CertificateType) {
		var ret string
		return ret
	}
	return *o.CertificateType
}

// GetCertificateTypeOk returns a tuple with the CertificateType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetCertificateTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CertificateType) {
		return nil, false
	}
	return o.CertificateType, true
}

// HasCertificateType returns a boolean if a field has been set.
func (o *DerivativeData) HasCertificateType() bool {
	if o != nil && !IsNil(o.CertificateType) {
		return true
	}

	return false
}

// SetCertificateType gets a reference to the given string and assigns it to the CertificateType field.
func (o *DerivativeData) SetCertificateType(v string) {
	o.CertificateType = &v
}

// GetRating returns the Rating field value if set, zero value otherwise.
func (o *DerivativeData) GetRating() Rating {
	if o == nil || IsNil(o.Rating) {
		var ret Rating
		return ret
	}
	return *o.Rating
}

// GetRatingOk returns a tuple with the Rating field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetRatingOk() (*Rating, bool) {
	if o == nil || IsNil(o.Rating) {
		return nil, false
	}
	return o.Rating, true
}

// HasRating returns a boolean if a field has been set.
func (o *DerivativeData) HasRating() bool {
	if o != nil && !IsNil(o.Rating) {
		return true
	}

	return false
}

// SetRating gets a reference to the given Rating and assigns it to the Rating field.
func (o *DerivativeData) SetRating(v Rating) {
	o.Rating = &v
}

// GetStrikePrice returns the StrikePrice field value if set, zero value otherwise.
func (o *DerivativeData) GetStrikePrice() AmountValue {
	if o == nil || IsNil(o.StrikePrice) {
		var ret AmountValue
		return ret
	}
	return *o.StrikePrice
}

// GetStrikePriceOk returns a tuple with the StrikePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetStrikePriceOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.StrikePrice) {
		return nil, false
	}
	return o.StrikePrice, true
}

// HasStrikePrice returns a boolean if a field has been set.
func (o *DerivativeData) HasStrikePrice() bool {
	if o != nil && !IsNil(o.StrikePrice) {
		return true
	}

	return false
}

// SetStrikePrice gets a reference to the given AmountValue and assigns it to the StrikePrice field.
func (o *DerivativeData) SetStrikePrice(v AmountValue) {
	o.StrikePrice = &v
}

// GetLeverage returns the Leverage field value if set, zero value otherwise.
func (o *DerivativeData) GetLeverage() string {
	if o == nil || IsNil(o.Leverage) {
		var ret string
		return ret
	}
	return *o.Leverage
}

// GetLeverageOk returns a tuple with the Leverage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetLeverageOk() (*string, bool) {
	if o == nil || IsNil(o.Leverage) {
		return nil, false
	}
	return o.Leverage, true
}

// HasLeverage returns a boolean if a field has been set.
func (o *DerivativeData) HasLeverage() bool {
	if o != nil && !IsNil(o.Leverage) {
		return true
	}

	return false
}

// SetLeverage gets a reference to the given string and assigns it to the Leverage field.
func (o *DerivativeData) SetLeverage(v string) {
	o.Leverage = &v
}

// GetMultiplier returns the Multiplier field value if set, zero value otherwise.
func (o *DerivativeData) GetMultiplier() string {
	if o == nil || IsNil(o.Multiplier) {
		var ret string
		return ret
	}
	return *o.Multiplier
}

// GetMultiplierOk returns a tuple with the Multiplier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetMultiplierOk() (*string, bool) {
	if o == nil || IsNil(o.Multiplier) {
		return nil, false
	}
	return o.Multiplier, true
}

// HasMultiplier returns a boolean if a field has been set.
func (o *DerivativeData) HasMultiplier() bool {
	if o != nil && !IsNil(o.Multiplier) {
		return true
	}

	return false
}

// SetMultiplier gets a reference to the given string and assigns it to the Multiplier field.
func (o *DerivativeData) SetMultiplier(v string) {
	o.Multiplier = &v
}

// GetExpiryDate returns the ExpiryDate field value if set, zero value otherwise.
func (o *DerivativeData) GetExpiryDate() string {
	if o == nil || IsNil(o.ExpiryDate) {
		var ret string
		return ret
	}
	return *o.ExpiryDate
}

// GetExpiryDateOk returns a tuple with the ExpiryDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetExpiryDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpiryDate) {
		return nil, false
	}
	return o.ExpiryDate, true
}

// HasExpiryDate returns a boolean if a field has been set.
func (o *DerivativeData) HasExpiryDate() bool {
	if o != nil && !IsNil(o.ExpiryDate) {
		return true
	}

	return false
}

// SetExpiryDate gets a reference to the given string and assigns it to the ExpiryDate field.
func (o *DerivativeData) SetExpiryDate(v string) {
	o.ExpiryDate = &v
}

// GetYieldPA returns the YieldPA field value if set, zero value otherwise.
func (o *DerivativeData) GetYieldPA() string {
	if o == nil || IsNil(o.YieldPA) {
		var ret string
		return ret
	}
	return *o.YieldPA
}

// GetYieldPAOk returns a tuple with the YieldPA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetYieldPAOk() (*string, bool) {
	if o == nil || IsNil(o.YieldPA) {
		return nil, false
	}
	return o.YieldPA, true
}

// HasYieldPA returns a boolean if a field has been set.
func (o *DerivativeData) HasYieldPA() bool {
	if o != nil && !IsNil(o.YieldPA) {
		return true
	}

	return false
}

// SetYieldPA gets a reference to the given string and assigns it to the YieldPA field.
func (o *DerivativeData) SetYieldPA(v string) {
	o.YieldPA = &v
}

// GetRemainingTermInYears returns the RemainingTermInYears field value if set, zero value otherwise.
func (o *DerivativeData) GetRemainingTermInYears() string {
	if o == nil || IsNil(o.RemainingTermInYears) {
		var ret string
		return ret
	}
	return *o.RemainingTermInYears
}

// GetRemainingTermInYearsOk returns a tuple with the RemainingTermInYears field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetRemainingTermInYearsOk() (*string, bool) {
	if o == nil || IsNil(o.RemainingTermInYears) {
		return nil, false
	}
	return o.RemainingTermInYears, true
}

// HasRemainingTermInYears returns a boolean if a field has been set.
func (o *DerivativeData) HasRemainingTermInYears() bool {
	if o != nil && !IsNil(o.RemainingTermInYears) {
		return true
	}

	return false
}

// SetRemainingTermInYears gets a reference to the given string and assigns it to the RemainingTermInYears field.
func (o *DerivativeData) SetRemainingTermInYears(v string) {
	o.RemainingTermInYears = &v
}

// GetNominalRate returns the NominalRate field value if set, zero value otherwise.
func (o *DerivativeData) GetNominalRate() string {
	if o == nil || IsNil(o.NominalRate) {
		var ret string
		return ret
	}
	return *o.NominalRate
}

// GetNominalRateOk returns a tuple with the NominalRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetNominalRateOk() (*string, bool) {
	if o == nil || IsNil(o.NominalRate) {
		return nil, false
	}
	return o.NominalRate, true
}

// HasNominalRate returns a boolean if a field has been set.
func (o *DerivativeData) HasNominalRate() bool {
	if o != nil && !IsNil(o.NominalRate) {
		return true
	}

	return false
}

// SetNominalRate gets a reference to the given string and assigns it to the NominalRate field.
func (o *DerivativeData) SetNominalRate(v string) {
	o.NominalRate = &v
}

// GetWarrantType returns the WarrantType field value if set, zero value otherwise.
func (o *DerivativeData) GetWarrantType() string {
	if o == nil || IsNil(o.WarrantType) {
		var ret string
		return ret
	}
	return *o.WarrantType
}

// GetWarrantTypeOk returns a tuple with the WarrantType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetWarrantTypeOk() (*string, bool) {
	if o == nil || IsNil(o.WarrantType) {
		return nil, false
	}
	return o.WarrantType, true
}

// HasWarrantType returns a boolean if a field has been set.
func (o *DerivativeData) HasWarrantType() bool {
	if o != nil && !IsNil(o.WarrantType) {
		return true
	}

	return false
}

// SetWarrantType gets a reference to the given string and assigns it to the WarrantType field.
func (o *DerivativeData) SetWarrantType(v string) {
	o.WarrantType = &v
}

// GetMaturityDate returns the MaturityDate field value if set, zero value otherwise.
func (o *DerivativeData) GetMaturityDate() string {
	if o == nil || IsNil(o.MaturityDate) {
		var ret string
		return ret
	}
	return *o.MaturityDate
}

// GetMaturityDateOk returns a tuple with the MaturityDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetMaturityDateOk() (*string, bool) {
	if o == nil || IsNil(o.MaturityDate) {
		return nil, false
	}
	return o.MaturityDate, true
}

// HasMaturityDate returns a boolean if a field has been set.
func (o *DerivativeData) HasMaturityDate() bool {
	if o != nil && !IsNil(o.MaturityDate) {
		return true
	}

	return false
}

// SetMaturityDate gets a reference to the given string and assigns it to the MaturityDate field.
func (o *DerivativeData) SetMaturityDate(v string) {
	o.MaturityDate = &v
}

// GetInterestPaymentDate returns the InterestPaymentDate field value if set, zero value otherwise.
func (o *DerivativeData) GetInterestPaymentDate() string {
	if o == nil || IsNil(o.InterestPaymentDate) {
		var ret string
		return ret
	}
	return *o.InterestPaymentDate
}

// GetInterestPaymentDateOk returns a tuple with the InterestPaymentDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetInterestPaymentDateOk() (*string, bool) {
	if o == nil || IsNil(o.InterestPaymentDate) {
		return nil, false
	}
	return o.InterestPaymentDate, true
}

// HasInterestPaymentDate returns a boolean if a field has been set.
func (o *DerivativeData) HasInterestPaymentDate() bool {
	if o != nil && !IsNil(o.InterestPaymentDate) {
		return true
	}

	return false
}

// SetInterestPaymentDate gets a reference to the given string and assigns it to the InterestPaymentDate field.
func (o *DerivativeData) SetInterestPaymentDate(v string) {
	o.InterestPaymentDate = &v
}

// GetInterestPaymentInterval returns the InterestPaymentInterval field value if set, zero value otherwise.
func (o *DerivativeData) GetInterestPaymentInterval() string {
	if o == nil || IsNil(o.InterestPaymentInterval) {
		var ret string
		return ret
	}
	return *o.InterestPaymentInterval
}

// GetInterestPaymentIntervalOk returns a tuple with the InterestPaymentInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DerivativeData) GetInterestPaymentIntervalOk() (*string, bool) {
	if o == nil || IsNil(o.InterestPaymentInterval) {
		return nil, false
	}
	return o.InterestPaymentInterval, true
}

// HasInterestPaymentInterval returns a boolean if a field has been set.
func (o *DerivativeData) HasInterestPaymentInterval() bool {
	if o != nil && !IsNil(o.InterestPaymentInterval) {
		return true
	}

	return false
}

// SetInterestPaymentInterval gets a reference to the given string and assigns it to the InterestPaymentInterval field.
func (o *DerivativeData) SetInterestPaymentInterval(v string) {
	o.InterestPaymentInterval = &v
}

func (o DerivativeData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DerivativeData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.UnderlyingInstrument) {
		toSerialize["underlyingInstrument"] = o.UnderlyingInstrument
	}
	if !IsNil(o.UnderlyingPrice) {
		toSerialize["underlyingPrice"] = o.UnderlyingPrice
	}
	if !IsNil(o.CertificateType) {
		toSerialize["certificateType"] = o.CertificateType
	}
	if !IsNil(o.Rating) {
		toSerialize["rating"] = o.Rating
	}
	if !IsNil(o.StrikePrice) {
		toSerialize["strikePrice"] = o.StrikePrice
	}
	if !IsNil(o.Leverage) {
		toSerialize["leverage"] = o.Leverage
	}
	if !IsNil(o.Multiplier) {
		toSerialize["multiplier"] = o.Multiplier
	}
	if !IsNil(o.ExpiryDate) {
		toSerialize["expiryDate"] = o.ExpiryDate
	}
	if !IsNil(o.YieldPA) {
		toSerialize["yieldPA"] = o.YieldPA
	}
	if !IsNil(o.RemainingTermInYears) {
		toSerialize["remainingTermInYears"] = o.RemainingTermInYears
	}
	if !IsNil(o.NominalRate) {
		toSerialize["nominalRate"] = o.NominalRate
	}
	if !IsNil(o.WarrantType) {
		toSerialize["warrantType"] = o.WarrantType
	}
	if !IsNil(o.MaturityDate) {
		toSerialize["maturityDate"] = o.MaturityDate
	}
	if !IsNil(o.InterestPaymentDate) {
		toSerialize["interestPaymentDate"] = o.InterestPaymentDate
	}
	if !IsNil(o.InterestPaymentInterval) {
		toSerialize["interestPaymentInterval"] = o.InterestPaymentInterval
	}
	return toSerialize, nil
}

type NullableDerivativeData struct {
	value *DerivativeData
	isSet bool
}

func (v NullableDerivativeData) Get() *DerivativeData {
	return v.value
}

func (v *NullableDerivativeData) Set(val *DerivativeData) {
	v.value = val
	v.isSet = true
}

func (v NullableDerivativeData) IsSet() bool {
	return v.isSet
}

func (v *NullableDerivativeData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDerivativeData(val *DerivativeData) *NullableDerivativeData {
	return &NullableDerivativeData{value: val, isSet: true}
}

func (v NullableDerivativeData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDerivativeData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


