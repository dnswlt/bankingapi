/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the EnumText type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EnumText{}

// EnumText Holds a unique key and the corresponding text.
type EnumText struct {
	// Unique key value for an enumeration type.
	Key *string `json:"key,omitempty"`
	// Display text in German language.
	Text *string `json:"text,omitempty"`
}

// NewEnumText instantiates a new EnumText object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEnumText() *EnumText {
	this := EnumText{}
	return &this
}

// NewEnumTextWithDefaults instantiates a new EnumText object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEnumTextWithDefaults() *EnumText {
	this := EnumText{}
	return &this
}

// GetKey returns the Key field value if set, zero value otherwise.
func (o *EnumText) GetKey() string {
	if o == nil || IsNil(o.Key) {
		var ret string
		return ret
	}
	return *o.Key
}

// GetKeyOk returns a tuple with the Key field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumText) GetKeyOk() (*string, bool) {
	if o == nil || IsNil(o.Key) {
		return nil, false
	}
	return o.Key, true
}

// HasKey returns a boolean if a field has been set.
func (o *EnumText) HasKey() bool {
	if o != nil && !IsNil(o.Key) {
		return true
	}

	return false
}

// SetKey gets a reference to the given string and assigns it to the Key field.
func (o *EnumText) SetKey(v string) {
	o.Key = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *EnumText) GetText() string {
	if o == nil || IsNil(o.Text) {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EnumText) GetTextOk() (*string, bool) {
	if o == nil || IsNil(o.Text) {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *EnumText) HasText() bool {
	if o != nil && !IsNil(o.Text) {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *EnumText) SetText(v string) {
	o.Text = &v
}

func (o EnumText) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EnumText) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Key) {
		toSerialize["key"] = o.Key
	}
	if !IsNil(o.Text) {
		toSerialize["text"] = o.Text
	}
	return toSerialize, nil
}

type NullableEnumText struct {
	value *EnumText
	isSet bool
}

func (v NullableEnumText) Get() *EnumText {
	return v.value
}

func (v *NullableEnumText) Set(val *EnumText) {
	v.value = val
	v.isSet = true
}

func (v NullableEnumText) IsSet() bool {
	return v.isSet
}

func (v *NullableEnumText) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEnumText(val *EnumText) *NullableEnumText {
	return &NullableEnumText{value: val, isSet: true}
}

func (v NullableEnumText) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEnumText) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


