/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the OrderType type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderType{}

// OrderType Model for an order type.
type OrderType struct {
	// Names of the possible limit extensions
	LimitExtensions []string `json:"limitExtensions,omitempty"`
	// Names of possible trading restrictions
	TradingRestrictions []string `json:"tradingRestrictions,omitempty"`
}

// NewOrderType instantiates a new OrderType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderType() *OrderType {
	this := OrderType{}
	return &this
}

// NewOrderTypeWithDefaults instantiates a new OrderType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderTypeWithDefaults() *OrderType {
	this := OrderType{}
	return &this
}

// GetLimitExtensions returns the LimitExtensions field value if set, zero value otherwise.
func (o *OrderType) GetLimitExtensions() []string {
	if o == nil || IsNil(o.LimitExtensions) {
		var ret []string
		return ret
	}
	return o.LimitExtensions
}

// GetLimitExtensionsOk returns a tuple with the LimitExtensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderType) GetLimitExtensionsOk() ([]string, bool) {
	if o == nil || IsNil(o.LimitExtensions) {
		return nil, false
	}
	return o.LimitExtensions, true
}

// HasLimitExtensions returns a boolean if a field has been set.
func (o *OrderType) HasLimitExtensions() bool {
	if o != nil && !IsNil(o.LimitExtensions) {
		return true
	}

	return false
}

// SetLimitExtensions gets a reference to the given []string and assigns it to the LimitExtensions field.
func (o *OrderType) SetLimitExtensions(v []string) {
	o.LimitExtensions = v
}

// GetTradingRestrictions returns the TradingRestrictions field value if set, zero value otherwise.
func (o *OrderType) GetTradingRestrictions() []string {
	if o == nil || IsNil(o.TradingRestrictions) {
		var ret []string
		return ret
	}
	return o.TradingRestrictions
}

// GetTradingRestrictionsOk returns a tuple with the TradingRestrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderType) GetTradingRestrictionsOk() ([]string, bool) {
	if o == nil || IsNil(o.TradingRestrictions) {
		return nil, false
	}
	return o.TradingRestrictions, true
}

// HasTradingRestrictions returns a boolean if a field has been set.
func (o *OrderType) HasTradingRestrictions() bool {
	if o != nil && !IsNil(o.TradingRestrictions) {
		return true
	}

	return false
}

// SetTradingRestrictions gets a reference to the given []string and assigns it to the TradingRestrictions field.
func (o *OrderType) SetTradingRestrictions(v []string) {
	o.TradingRestrictions = v
}

func (o OrderType) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderType) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LimitExtensions) {
		toSerialize["limitExtensions"] = o.LimitExtensions
	}
	if !IsNil(o.TradingRestrictions) {
		toSerialize["tradingRestrictions"] = o.TradingRestrictions
	}
	return toSerialize, nil
}

type NullableOrderType struct {
	value *OrderType
	isSet bool
}

func (v NullableOrderType) Get() *OrderType {
	return v.value
}

func (v *NullableOrderType) Set(val *OrderType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderType(val *OrderType) *NullableOrderType {
	return &NullableOrderType{value: val, isSet: true}
}

func (v NullableOrderType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


