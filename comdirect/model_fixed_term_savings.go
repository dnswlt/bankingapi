/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the FixedTermSavings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FixedTermSavings{}

// FixedTermSavings struct for FixedTermSavings
type FixedTermSavings struct {
	// UUID of the deposit account.
	FixedTermSavingsId *string `json:"fixedTermSavingsId,omitempty"`
	SavingsAmount *AmountValue `json:"savingsAmount,omitempty"`
	// Interest rate of the deposit account.
	InterestRate *string `json:"interestRate,omitempty"`
	// Type of the deposit account.
	FixedTermSavingsType *string `json:"fixedTermSavingsType,omitempty"`
	// Name of the deposit account.
	FixedTermSavingsDisplayName *string `json:"fixedTermSavingsDisplayName,omitempty"`
	// Contract period of the deposit account in months.
	ContractPeriodInMonths *int32 `json:"contractPeriodInMonths,omitempty"`
	// Start date of investment.
	CreationDate *string `json:"creationDate,omitempty"`
	// End date of investment.
	ExpirationDate *string `json:"expirationDate,omitempty"`
	ProlongationAmount *AmountValue `json:"prolongationAmount,omitempty"`
	// Indicates whether the investment can be extended.
	Extendable *bool `json:"extendable,omitempty"`
}

// NewFixedTermSavings instantiates a new FixedTermSavings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFixedTermSavings() *FixedTermSavings {
	this := FixedTermSavings{}
	return &this
}

// NewFixedTermSavingsWithDefaults instantiates a new FixedTermSavings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFixedTermSavingsWithDefaults() *FixedTermSavings {
	this := FixedTermSavings{}
	return &this
}

// GetFixedTermSavingsId returns the FixedTermSavingsId field value if set, zero value otherwise.
func (o *FixedTermSavings) GetFixedTermSavingsId() string {
	if o == nil || IsNil(o.FixedTermSavingsId) {
		var ret string
		return ret
	}
	return *o.FixedTermSavingsId
}

// GetFixedTermSavingsIdOk returns a tuple with the FixedTermSavingsId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedTermSavings) GetFixedTermSavingsIdOk() (*string, bool) {
	if o == nil || IsNil(o.FixedTermSavingsId) {
		return nil, false
	}
	return o.FixedTermSavingsId, true
}

// HasFixedTermSavingsId returns a boolean if a field has been set.
func (o *FixedTermSavings) HasFixedTermSavingsId() bool {
	if o != nil && !IsNil(o.FixedTermSavingsId) {
		return true
	}

	return false
}

// SetFixedTermSavingsId gets a reference to the given string and assigns it to the FixedTermSavingsId field.
func (o *FixedTermSavings) SetFixedTermSavingsId(v string) {
	o.FixedTermSavingsId = &v
}

// GetSavingsAmount returns the SavingsAmount field value if set, zero value otherwise.
func (o *FixedTermSavings) GetSavingsAmount() AmountValue {
	if o == nil || IsNil(o.SavingsAmount) {
		var ret AmountValue
		return ret
	}
	return *o.SavingsAmount
}

// GetSavingsAmountOk returns a tuple with the SavingsAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedTermSavings) GetSavingsAmountOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.SavingsAmount) {
		return nil, false
	}
	return o.SavingsAmount, true
}

// HasSavingsAmount returns a boolean if a field has been set.
func (o *FixedTermSavings) HasSavingsAmount() bool {
	if o != nil && !IsNil(o.SavingsAmount) {
		return true
	}

	return false
}

// SetSavingsAmount gets a reference to the given AmountValue and assigns it to the SavingsAmount field.
func (o *FixedTermSavings) SetSavingsAmount(v AmountValue) {
	o.SavingsAmount = &v
}

// GetInterestRate returns the InterestRate field value if set, zero value otherwise.
func (o *FixedTermSavings) GetInterestRate() string {
	if o == nil || IsNil(o.InterestRate) {
		var ret string
		return ret
	}
	return *o.InterestRate
}

// GetInterestRateOk returns a tuple with the InterestRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedTermSavings) GetInterestRateOk() (*string, bool) {
	if o == nil || IsNil(o.InterestRate) {
		return nil, false
	}
	return o.InterestRate, true
}

// HasInterestRate returns a boolean if a field has been set.
func (o *FixedTermSavings) HasInterestRate() bool {
	if o != nil && !IsNil(o.InterestRate) {
		return true
	}

	return false
}

// SetInterestRate gets a reference to the given string and assigns it to the InterestRate field.
func (o *FixedTermSavings) SetInterestRate(v string) {
	o.InterestRate = &v
}

// GetFixedTermSavingsType returns the FixedTermSavingsType field value if set, zero value otherwise.
func (o *FixedTermSavings) GetFixedTermSavingsType() string {
	if o == nil || IsNil(o.FixedTermSavingsType) {
		var ret string
		return ret
	}
	return *o.FixedTermSavingsType
}

// GetFixedTermSavingsTypeOk returns a tuple with the FixedTermSavingsType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedTermSavings) GetFixedTermSavingsTypeOk() (*string, bool) {
	if o == nil || IsNil(o.FixedTermSavingsType) {
		return nil, false
	}
	return o.FixedTermSavingsType, true
}

// HasFixedTermSavingsType returns a boolean if a field has been set.
func (o *FixedTermSavings) HasFixedTermSavingsType() bool {
	if o != nil && !IsNil(o.FixedTermSavingsType) {
		return true
	}

	return false
}

// SetFixedTermSavingsType gets a reference to the given string and assigns it to the FixedTermSavingsType field.
func (o *FixedTermSavings) SetFixedTermSavingsType(v string) {
	o.FixedTermSavingsType = &v
}

// GetFixedTermSavingsDisplayName returns the FixedTermSavingsDisplayName field value if set, zero value otherwise.
func (o *FixedTermSavings) GetFixedTermSavingsDisplayName() string {
	if o == nil || IsNil(o.FixedTermSavingsDisplayName) {
		var ret string
		return ret
	}
	return *o.FixedTermSavingsDisplayName
}

// GetFixedTermSavingsDisplayNameOk returns a tuple with the FixedTermSavingsDisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedTermSavings) GetFixedTermSavingsDisplayNameOk() (*string, bool) {
	if o == nil || IsNil(o.FixedTermSavingsDisplayName) {
		return nil, false
	}
	return o.FixedTermSavingsDisplayName, true
}

// HasFixedTermSavingsDisplayName returns a boolean if a field has been set.
func (o *FixedTermSavings) HasFixedTermSavingsDisplayName() bool {
	if o != nil && !IsNil(o.FixedTermSavingsDisplayName) {
		return true
	}

	return false
}

// SetFixedTermSavingsDisplayName gets a reference to the given string and assigns it to the FixedTermSavingsDisplayName field.
func (o *FixedTermSavings) SetFixedTermSavingsDisplayName(v string) {
	o.FixedTermSavingsDisplayName = &v
}

// GetContractPeriodInMonths returns the ContractPeriodInMonths field value if set, zero value otherwise.
func (o *FixedTermSavings) GetContractPeriodInMonths() int32 {
	if o == nil || IsNil(o.ContractPeriodInMonths) {
		var ret int32
		return ret
	}
	return *o.ContractPeriodInMonths
}

// GetContractPeriodInMonthsOk returns a tuple with the ContractPeriodInMonths field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedTermSavings) GetContractPeriodInMonthsOk() (*int32, bool) {
	if o == nil || IsNil(o.ContractPeriodInMonths) {
		return nil, false
	}
	return o.ContractPeriodInMonths, true
}

// HasContractPeriodInMonths returns a boolean if a field has been set.
func (o *FixedTermSavings) HasContractPeriodInMonths() bool {
	if o != nil && !IsNil(o.ContractPeriodInMonths) {
		return true
	}

	return false
}

// SetContractPeriodInMonths gets a reference to the given int32 and assigns it to the ContractPeriodInMonths field.
func (o *FixedTermSavings) SetContractPeriodInMonths(v int32) {
	o.ContractPeriodInMonths = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *FixedTermSavings) GetCreationDate() string {
	if o == nil || IsNil(o.CreationDate) {
		var ret string
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedTermSavings) GetCreationDateOk() (*string, bool) {
	if o == nil || IsNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *FixedTermSavings) HasCreationDate() bool {
	if o != nil && !IsNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given string and assigns it to the CreationDate field.
func (o *FixedTermSavings) SetCreationDate(v string) {
	o.CreationDate = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *FixedTermSavings) GetExpirationDate() string {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret string
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedTermSavings) GetExpirationDateOk() (*string, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *FixedTermSavings) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given string and assigns it to the ExpirationDate field.
func (o *FixedTermSavings) SetExpirationDate(v string) {
	o.ExpirationDate = &v
}

// GetProlongationAmount returns the ProlongationAmount field value if set, zero value otherwise.
func (o *FixedTermSavings) GetProlongationAmount() AmountValue {
	if o == nil || IsNil(o.ProlongationAmount) {
		var ret AmountValue
		return ret
	}
	return *o.ProlongationAmount
}

// GetProlongationAmountOk returns a tuple with the ProlongationAmount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedTermSavings) GetProlongationAmountOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.ProlongationAmount) {
		return nil, false
	}
	return o.ProlongationAmount, true
}

// HasProlongationAmount returns a boolean if a field has been set.
func (o *FixedTermSavings) HasProlongationAmount() bool {
	if o != nil && !IsNil(o.ProlongationAmount) {
		return true
	}

	return false
}

// SetProlongationAmount gets a reference to the given AmountValue and assigns it to the ProlongationAmount field.
func (o *FixedTermSavings) SetProlongationAmount(v AmountValue) {
	o.ProlongationAmount = &v
}

// GetExtendable returns the Extendable field value if set, zero value otherwise.
func (o *FixedTermSavings) GetExtendable() bool {
	if o == nil || IsNil(o.Extendable) {
		var ret bool
		return ret
	}
	return *o.Extendable
}

// GetExtendableOk returns a tuple with the Extendable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FixedTermSavings) GetExtendableOk() (*bool, bool) {
	if o == nil || IsNil(o.Extendable) {
		return nil, false
	}
	return o.Extendable, true
}

// HasExtendable returns a boolean if a field has been set.
func (o *FixedTermSavings) HasExtendable() bool {
	if o != nil && !IsNil(o.Extendable) {
		return true
	}

	return false
}

// SetExtendable gets a reference to the given bool and assigns it to the Extendable field.
func (o *FixedTermSavings) SetExtendable(v bool) {
	o.Extendable = &v
}

func (o FixedTermSavings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FixedTermSavings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.FixedTermSavingsId) {
		toSerialize["fixedTermSavingsId"] = o.FixedTermSavingsId
	}
	if !IsNil(o.SavingsAmount) {
		toSerialize["savingsAmount"] = o.SavingsAmount
	}
	if !IsNil(o.InterestRate) {
		toSerialize["interestRate"] = o.InterestRate
	}
	if !IsNil(o.FixedTermSavingsType) {
		toSerialize["fixedTermSavingsType"] = o.FixedTermSavingsType
	}
	if !IsNil(o.FixedTermSavingsDisplayName) {
		toSerialize["fixedTermSavingsDisplayName"] = o.FixedTermSavingsDisplayName
	}
	if !IsNil(o.ContractPeriodInMonths) {
		toSerialize["contractPeriodInMonths"] = o.ContractPeriodInMonths
	}
	if !IsNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.ProlongationAmount) {
		toSerialize["prolongationAmount"] = o.ProlongationAmount
	}
	if !IsNil(o.Extendable) {
		toSerialize["extendable"] = o.Extendable
	}
	return toSerialize, nil
}

type NullableFixedTermSavings struct {
	value *FixedTermSavings
	isSet bool
}

func (v NullableFixedTermSavings) Get() *FixedTermSavings {
	return v.value
}

func (v *NullableFixedTermSavings) Set(val *FixedTermSavings) {
	v.value = val
	v.isSet = true
}

func (v NullableFixedTermSavings) IsSet() bool {
	return v.isSet
}

func (v *NullableFixedTermSavings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFixedTermSavings(val *FixedTermSavings) *NullableFixedTermSavings {
	return &NullableFixedTermSavings{value: val, isSet: true}
}

func (v NullableFixedTermSavings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFixedTermSavings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


