/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the Instrument type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Instrument{}

// Instrument Model for an instrument.
type Instrument struct {
	// Instrument id (UUID), unique identification of an instrument (security, derivative, etc.) for future use
	InstrumentId *string `json:"instrumentId,omitempty"`
	// WKN
	Wkn *string `json:"wkn,omitempty"`
	// ISIN
	Isin *string `json:"isin,omitempty"`
	// Security symbol according to WM data-service
	Mnemonic *string `json:"mnemonic,omitempty"`
	// Name of the instrument
	Name *string `json:"name,omitempty"`
	// Short name of the instrument
	ShortName *string `json:"shortName,omitempty"`
	StaticData *StaticData `json:"staticData,omitempty"`
	OrderDimensions *Dimensions `json:"orderDimensions,omitempty"`
	FundsDistribution *FundDistribution `json:"fundsDistribution,omitempty"`
	DerivativeData *DerivativeData `json:"derivativeData,omitempty"`
}

// NewInstrument instantiates a new Instrument object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInstrument() *Instrument {
	this := Instrument{}
	return &this
}

// NewInstrumentWithDefaults instantiates a new Instrument object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInstrumentWithDefaults() *Instrument {
	this := Instrument{}
	return &this
}

// GetInstrumentId returns the InstrumentId field value if set, zero value otherwise.
func (o *Instrument) GetInstrumentId() string {
	if o == nil || IsNil(o.InstrumentId) {
		var ret string
		return ret
	}
	return *o.InstrumentId
}

// GetInstrumentIdOk returns a tuple with the InstrumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instrument) GetInstrumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstrumentId) {
		return nil, false
	}
	return o.InstrumentId, true
}

// HasInstrumentId returns a boolean if a field has been set.
func (o *Instrument) HasInstrumentId() bool {
	if o != nil && !IsNil(o.InstrumentId) {
		return true
	}

	return false
}

// SetInstrumentId gets a reference to the given string and assigns it to the InstrumentId field.
func (o *Instrument) SetInstrumentId(v string) {
	o.InstrumentId = &v
}

// GetWkn returns the Wkn field value if set, zero value otherwise.
func (o *Instrument) GetWkn() string {
	if o == nil || IsNil(o.Wkn) {
		var ret string
		return ret
	}
	return *o.Wkn
}

// GetWknOk returns a tuple with the Wkn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instrument) GetWknOk() (*string, bool) {
	if o == nil || IsNil(o.Wkn) {
		return nil, false
	}
	return o.Wkn, true
}

// HasWkn returns a boolean if a field has been set.
func (o *Instrument) HasWkn() bool {
	if o != nil && !IsNil(o.Wkn) {
		return true
	}

	return false
}

// SetWkn gets a reference to the given string and assigns it to the Wkn field.
func (o *Instrument) SetWkn(v string) {
	o.Wkn = &v
}

// GetIsin returns the Isin field value if set, zero value otherwise.
func (o *Instrument) GetIsin() string {
	if o == nil || IsNil(o.Isin) {
		var ret string
		return ret
	}
	return *o.Isin
}

// GetIsinOk returns a tuple with the Isin field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instrument) GetIsinOk() (*string, bool) {
	if o == nil || IsNil(o.Isin) {
		return nil, false
	}
	return o.Isin, true
}

// HasIsin returns a boolean if a field has been set.
func (o *Instrument) HasIsin() bool {
	if o != nil && !IsNil(o.Isin) {
		return true
	}

	return false
}

// SetIsin gets a reference to the given string and assigns it to the Isin field.
func (o *Instrument) SetIsin(v string) {
	o.Isin = &v
}

// GetMnemonic returns the Mnemonic field value if set, zero value otherwise.
func (o *Instrument) GetMnemonic() string {
	if o == nil || IsNil(o.Mnemonic) {
		var ret string
		return ret
	}
	return *o.Mnemonic
}

// GetMnemonicOk returns a tuple with the Mnemonic field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instrument) GetMnemonicOk() (*string, bool) {
	if o == nil || IsNil(o.Mnemonic) {
		return nil, false
	}
	return o.Mnemonic, true
}

// HasMnemonic returns a boolean if a field has been set.
func (o *Instrument) HasMnemonic() bool {
	if o != nil && !IsNil(o.Mnemonic) {
		return true
	}

	return false
}

// SetMnemonic gets a reference to the given string and assigns it to the Mnemonic field.
func (o *Instrument) SetMnemonic(v string) {
	o.Mnemonic = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Instrument) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instrument) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Instrument) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Instrument) SetName(v string) {
	o.Name = &v
}

// GetShortName returns the ShortName field value if set, zero value otherwise.
func (o *Instrument) GetShortName() string {
	if o == nil || IsNil(o.ShortName) {
		var ret string
		return ret
	}
	return *o.ShortName
}

// GetShortNameOk returns a tuple with the ShortName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instrument) GetShortNameOk() (*string, bool) {
	if o == nil || IsNil(o.ShortName) {
		return nil, false
	}
	return o.ShortName, true
}

// HasShortName returns a boolean if a field has been set.
func (o *Instrument) HasShortName() bool {
	if o != nil && !IsNil(o.ShortName) {
		return true
	}

	return false
}

// SetShortName gets a reference to the given string and assigns it to the ShortName field.
func (o *Instrument) SetShortName(v string) {
	o.ShortName = &v
}

// GetStaticData returns the StaticData field value if set, zero value otherwise.
func (o *Instrument) GetStaticData() StaticData {
	if o == nil || IsNil(o.StaticData) {
		var ret StaticData
		return ret
	}
	return *o.StaticData
}

// GetStaticDataOk returns a tuple with the StaticData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instrument) GetStaticDataOk() (*StaticData, bool) {
	if o == nil || IsNil(o.StaticData) {
		return nil, false
	}
	return o.StaticData, true
}

// HasStaticData returns a boolean if a field has been set.
func (o *Instrument) HasStaticData() bool {
	if o != nil && !IsNil(o.StaticData) {
		return true
	}

	return false
}

// SetStaticData gets a reference to the given StaticData and assigns it to the StaticData field.
func (o *Instrument) SetStaticData(v StaticData) {
	o.StaticData = &v
}

// GetOrderDimensions returns the OrderDimensions field value if set, zero value otherwise.
func (o *Instrument) GetOrderDimensions() Dimensions {
	if o == nil || IsNil(o.OrderDimensions) {
		var ret Dimensions
		return ret
	}
	return *o.OrderDimensions
}

// GetOrderDimensionsOk returns a tuple with the OrderDimensions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instrument) GetOrderDimensionsOk() (*Dimensions, bool) {
	if o == nil || IsNil(o.OrderDimensions) {
		return nil, false
	}
	return o.OrderDimensions, true
}

// HasOrderDimensions returns a boolean if a field has been set.
func (o *Instrument) HasOrderDimensions() bool {
	if o != nil && !IsNil(o.OrderDimensions) {
		return true
	}

	return false
}

// SetOrderDimensions gets a reference to the given Dimensions and assigns it to the OrderDimensions field.
func (o *Instrument) SetOrderDimensions(v Dimensions) {
	o.OrderDimensions = &v
}

// GetFundsDistribution returns the FundsDistribution field value if set, zero value otherwise.
func (o *Instrument) GetFundsDistribution() FundDistribution {
	if o == nil || IsNil(o.FundsDistribution) {
		var ret FundDistribution
		return ret
	}
	return *o.FundsDistribution
}

// GetFundsDistributionOk returns a tuple with the FundsDistribution field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instrument) GetFundsDistributionOk() (*FundDistribution, bool) {
	if o == nil || IsNil(o.FundsDistribution) {
		return nil, false
	}
	return o.FundsDistribution, true
}

// HasFundsDistribution returns a boolean if a field has been set.
func (o *Instrument) HasFundsDistribution() bool {
	if o != nil && !IsNil(o.FundsDistribution) {
		return true
	}

	return false
}

// SetFundsDistribution gets a reference to the given FundDistribution and assigns it to the FundsDistribution field.
func (o *Instrument) SetFundsDistribution(v FundDistribution) {
	o.FundsDistribution = &v
}

// GetDerivativeData returns the DerivativeData field value if set, zero value otherwise.
func (o *Instrument) GetDerivativeData() DerivativeData {
	if o == nil || IsNil(o.DerivativeData) {
		var ret DerivativeData
		return ret
	}
	return *o.DerivativeData
}

// GetDerivativeDataOk returns a tuple with the DerivativeData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Instrument) GetDerivativeDataOk() (*DerivativeData, bool) {
	if o == nil || IsNil(o.DerivativeData) {
		return nil, false
	}
	return o.DerivativeData, true
}

// HasDerivativeData returns a boolean if a field has been set.
func (o *Instrument) HasDerivativeData() bool {
	if o != nil && !IsNil(o.DerivativeData) {
		return true
	}

	return false
}

// SetDerivativeData gets a reference to the given DerivativeData and assigns it to the DerivativeData field.
func (o *Instrument) SetDerivativeData(v DerivativeData) {
	o.DerivativeData = &v
}

func (o Instrument) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Instrument) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.InstrumentId) {
		toSerialize["instrumentId"] = o.InstrumentId
	}
	if !IsNil(o.Wkn) {
		toSerialize["wkn"] = o.Wkn
	}
	if !IsNil(o.Isin) {
		toSerialize["isin"] = o.Isin
	}
	if !IsNil(o.Mnemonic) {
		toSerialize["mnemonic"] = o.Mnemonic
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ShortName) {
		toSerialize["shortName"] = o.ShortName
	}
	if !IsNil(o.StaticData) {
		toSerialize["staticData"] = o.StaticData
	}
	if !IsNil(o.OrderDimensions) {
		toSerialize["orderDimensions"] = o.OrderDimensions
	}
	if !IsNil(o.FundsDistribution) {
		toSerialize["fundsDistribution"] = o.FundsDistribution
	}
	if !IsNil(o.DerivativeData) {
		toSerialize["derivativeData"] = o.DerivativeData
	}
	return toSerialize, nil
}

type NullableInstrument struct {
	value *Instrument
	isSet bool
}

func (v NullableInstrument) Get() *Instrument {
	return v.value
}

func (v *NullableInstrument) Set(val *Instrument) {
	v.value = val
	v.isSet = true
}

func (v NullableInstrument) IsSet() bool {
	return v.isSet
}

func (v *NullableInstrument) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInstrument(val *Instrument) *NullableInstrument {
	return &NullableInstrument{value: val, isSet: true}
}

func (v NullableInstrument) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInstrument) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


