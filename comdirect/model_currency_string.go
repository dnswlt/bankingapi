/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
	"strings"
)

// CurrencyString Represents the ISO-4217 code of the currency.
type CurrencyString struct {
	Currency *string `json:"Currency,omitempty"`
}

// NewCurrencyString instantiates a new CurrencyString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrencyString() *CurrencyString {
	this := CurrencyString{}
	return &this
}

// NewCurrencyStringWithDefaults instantiates a new CurrencyString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyStringWithDefaults() *CurrencyString {
	this := CurrencyString{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *CurrencyString) GetCurrency() string {
	if o == nil || IsNil(o.Currency) {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CurrencyString) GetCurrencyOk() (*string, bool) {
	if o == nil || IsNil(o.Currency) {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *CurrencyString) HasCurrency() bool {
	if o != nil && !IsNil(o.Currency) {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *CurrencyString) SetCurrency(v string) {
	o.Currency = &v
}

func (o *CurrencyString) MarshalJSON() ([]byte, error) {
	return []byte(`"` + o.GetCurrency() + `"`), nil
}

func (v *CurrencyString) UnmarshalJSON(src []byte) error {
	s := strings.Trim(string(src), `"`)
	if s != "" {
		v.SetCurrency(s)
	}
	return nil
}

type NullableCurrencyString struct {
	value *CurrencyString
	isSet bool
}

func (v NullableCurrencyString) Get() *CurrencyString {
	return v.value
}

func (v *NullableCurrencyString) Set(val *CurrencyString) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrencyString) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrencyString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrencyString(val *CurrencyString) *NullableCurrencyString {
	return &NullableCurrencyString{value: val, isSet: true}
}

func (v NullableCurrencyString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrencyString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
