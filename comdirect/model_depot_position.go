/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the DepotPosition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DepotPosition{}

// DepotPosition struct for DepotPosition
type DepotPosition struct {
	// Securities account Identifier (UUID)
	DepotId *string `json:"depotId,omitempty"`
	// Position identification number in securities account
	PositionId *string `json:"positionId,omitempty"`
	// Identification number of the instrument
	Wkn *string `json:"wkn,omitempty"`
	// Custody type
	CustodyType *string `json:"custodyType,omitempty"`
	Quantity *AmountValue `json:"quantity,omitempty"`
	AvailableQuantity *AmountValue `json:"availableQuantity,omitempty"`
	CurrentPrice *Price `json:"currentPrice,omitempty"`
	PurchasePrice *AmountValue `json:"purchasePrice,omitempty"`
	PrevDayPrice *Price `json:"prevDayPrice,omitempty"`
	CurrentValue *AmountValue `json:"currentValue,omitempty"`
	PurchaseValue *AmountValue `json:"purchaseValue,omitempty"`
	PrevDayValue *AmountValue `json:"prevDayValue,omitempty"`
	ProfitLossPurchaseAbs *AmountValue `json:"profitLossPurchaseAbs,omitempty"`
	ProfitLossPurchaseRel *PercentageString `json:"profitLossPurchaseRel,omitempty"`
	ProfitLossPrevDayAbs *AmountValue `json:"profitLossPrevDayAbs,omitempty"`
	ProfitLossPrevDayRel *PercentageString `json:"profitLossPrevDayRel,omitempty"`
	Instrument *Instrument `json:"instrument,omitempty"`
	// Position version, if available
	Version *string `json:"version,omitempty"`
}

// NewDepotPosition instantiates a new DepotPosition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepotPosition() *DepotPosition {
	this := DepotPosition{}
	return &this
}

// NewDepotPositionWithDefaults instantiates a new DepotPosition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepotPositionWithDefaults() *DepotPosition {
	this := DepotPosition{}
	return &this
}

// GetDepotId returns the DepotId field value if set, zero value otherwise.
func (o *DepotPosition) GetDepotId() string {
	if o == nil || IsNil(o.DepotId) {
		var ret string
		return ret
	}
	return *o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetDepotIdOk() (*string, bool) {
	if o == nil || IsNil(o.DepotId) {
		return nil, false
	}
	return o.DepotId, true
}

// HasDepotId returns a boolean if a field has been set.
func (o *DepotPosition) HasDepotId() bool {
	if o != nil && !IsNil(o.DepotId) {
		return true
	}

	return false
}

// SetDepotId gets a reference to the given string and assigns it to the DepotId field.
func (o *DepotPosition) SetDepotId(v string) {
	o.DepotId = &v
}

// GetPositionId returns the PositionId field value if set, zero value otherwise.
func (o *DepotPosition) GetPositionId() string {
	if o == nil || IsNil(o.PositionId) {
		var ret string
		return ret
	}
	return *o.PositionId
}

// GetPositionIdOk returns a tuple with the PositionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetPositionIdOk() (*string, bool) {
	if o == nil || IsNil(o.PositionId) {
		return nil, false
	}
	return o.PositionId, true
}

// HasPositionId returns a boolean if a field has been set.
func (o *DepotPosition) HasPositionId() bool {
	if o != nil && !IsNil(o.PositionId) {
		return true
	}

	return false
}

// SetPositionId gets a reference to the given string and assigns it to the PositionId field.
func (o *DepotPosition) SetPositionId(v string) {
	o.PositionId = &v
}

// GetWkn returns the Wkn field value if set, zero value otherwise.
func (o *DepotPosition) GetWkn() string {
	if o == nil || IsNil(o.Wkn) {
		var ret string
		return ret
	}
	return *o.Wkn
}

// GetWknOk returns a tuple with the Wkn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetWknOk() (*string, bool) {
	if o == nil || IsNil(o.Wkn) {
		return nil, false
	}
	return o.Wkn, true
}

// HasWkn returns a boolean if a field has been set.
func (o *DepotPosition) HasWkn() bool {
	if o != nil && !IsNil(o.Wkn) {
		return true
	}

	return false
}

// SetWkn gets a reference to the given string and assigns it to the Wkn field.
func (o *DepotPosition) SetWkn(v string) {
	o.Wkn = &v
}

// GetCustodyType returns the CustodyType field value if set, zero value otherwise.
func (o *DepotPosition) GetCustodyType() string {
	if o == nil || IsNil(o.CustodyType) {
		var ret string
		return ret
	}
	return *o.CustodyType
}

// GetCustodyTypeOk returns a tuple with the CustodyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetCustodyTypeOk() (*string, bool) {
	if o == nil || IsNil(o.CustodyType) {
		return nil, false
	}
	return o.CustodyType, true
}

// HasCustodyType returns a boolean if a field has been set.
func (o *DepotPosition) HasCustodyType() bool {
	if o != nil && !IsNil(o.CustodyType) {
		return true
	}

	return false
}

// SetCustodyType gets a reference to the given string and assigns it to the CustodyType field.
func (o *DepotPosition) SetCustodyType(v string) {
	o.CustodyType = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *DepotPosition) GetQuantity() AmountValue {
	if o == nil || IsNil(o.Quantity) {
		var ret AmountValue
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetQuantityOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *DepotPosition) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given AmountValue and assigns it to the Quantity field.
func (o *DepotPosition) SetQuantity(v AmountValue) {
	o.Quantity = &v
}

// GetAvailableQuantity returns the AvailableQuantity field value if set, zero value otherwise.
func (o *DepotPosition) GetAvailableQuantity() AmountValue {
	if o == nil || IsNil(o.AvailableQuantity) {
		var ret AmountValue
		return ret
	}
	return *o.AvailableQuantity
}

// GetAvailableQuantityOk returns a tuple with the AvailableQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetAvailableQuantityOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.AvailableQuantity) {
		return nil, false
	}
	return o.AvailableQuantity, true
}

// HasAvailableQuantity returns a boolean if a field has been set.
func (o *DepotPosition) HasAvailableQuantity() bool {
	if o != nil && !IsNil(o.AvailableQuantity) {
		return true
	}

	return false
}

// SetAvailableQuantity gets a reference to the given AmountValue and assigns it to the AvailableQuantity field.
func (o *DepotPosition) SetAvailableQuantity(v AmountValue) {
	o.AvailableQuantity = &v
}

// GetCurrentPrice returns the CurrentPrice field value if set, zero value otherwise.
func (o *DepotPosition) GetCurrentPrice() Price {
	if o == nil || IsNil(o.CurrentPrice) {
		var ret Price
		return ret
	}
	return *o.CurrentPrice
}

// GetCurrentPriceOk returns a tuple with the CurrentPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetCurrentPriceOk() (*Price, bool) {
	if o == nil || IsNil(o.CurrentPrice) {
		return nil, false
	}
	return o.CurrentPrice, true
}

// HasCurrentPrice returns a boolean if a field has been set.
func (o *DepotPosition) HasCurrentPrice() bool {
	if o != nil && !IsNil(o.CurrentPrice) {
		return true
	}

	return false
}

// SetCurrentPrice gets a reference to the given Price and assigns it to the CurrentPrice field.
func (o *DepotPosition) SetCurrentPrice(v Price) {
	o.CurrentPrice = &v
}

// GetPurchasePrice returns the PurchasePrice field value if set, zero value otherwise.
func (o *DepotPosition) GetPurchasePrice() AmountValue {
	if o == nil || IsNil(o.PurchasePrice) {
		var ret AmountValue
		return ret
	}
	return *o.PurchasePrice
}

// GetPurchasePriceOk returns a tuple with the PurchasePrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetPurchasePriceOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.PurchasePrice) {
		return nil, false
	}
	return o.PurchasePrice, true
}

// HasPurchasePrice returns a boolean if a field has been set.
func (o *DepotPosition) HasPurchasePrice() bool {
	if o != nil && !IsNil(o.PurchasePrice) {
		return true
	}

	return false
}

// SetPurchasePrice gets a reference to the given AmountValue and assigns it to the PurchasePrice field.
func (o *DepotPosition) SetPurchasePrice(v AmountValue) {
	o.PurchasePrice = &v
}

// GetPrevDayPrice returns the PrevDayPrice field value if set, zero value otherwise.
func (o *DepotPosition) GetPrevDayPrice() Price {
	if o == nil || IsNil(o.PrevDayPrice) {
		var ret Price
		return ret
	}
	return *o.PrevDayPrice
}

// GetPrevDayPriceOk returns a tuple with the PrevDayPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetPrevDayPriceOk() (*Price, bool) {
	if o == nil || IsNil(o.PrevDayPrice) {
		return nil, false
	}
	return o.PrevDayPrice, true
}

// HasPrevDayPrice returns a boolean if a field has been set.
func (o *DepotPosition) HasPrevDayPrice() bool {
	if o != nil && !IsNil(o.PrevDayPrice) {
		return true
	}

	return false
}

// SetPrevDayPrice gets a reference to the given Price and assigns it to the PrevDayPrice field.
func (o *DepotPosition) SetPrevDayPrice(v Price) {
	o.PrevDayPrice = &v
}

// GetCurrentValue returns the CurrentValue field value if set, zero value otherwise.
func (o *DepotPosition) GetCurrentValue() AmountValue {
	if o == nil || IsNil(o.CurrentValue) {
		var ret AmountValue
		return ret
	}
	return *o.CurrentValue
}

// GetCurrentValueOk returns a tuple with the CurrentValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetCurrentValueOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.CurrentValue) {
		return nil, false
	}
	return o.CurrentValue, true
}

// HasCurrentValue returns a boolean if a field has been set.
func (o *DepotPosition) HasCurrentValue() bool {
	if o != nil && !IsNil(o.CurrentValue) {
		return true
	}

	return false
}

// SetCurrentValue gets a reference to the given AmountValue and assigns it to the CurrentValue field.
func (o *DepotPosition) SetCurrentValue(v AmountValue) {
	o.CurrentValue = &v
}

// GetPurchaseValue returns the PurchaseValue field value if set, zero value otherwise.
func (o *DepotPosition) GetPurchaseValue() AmountValue {
	if o == nil || IsNil(o.PurchaseValue) {
		var ret AmountValue
		return ret
	}
	return *o.PurchaseValue
}

// GetPurchaseValueOk returns a tuple with the PurchaseValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetPurchaseValueOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.PurchaseValue) {
		return nil, false
	}
	return o.PurchaseValue, true
}

// HasPurchaseValue returns a boolean if a field has been set.
func (o *DepotPosition) HasPurchaseValue() bool {
	if o != nil && !IsNil(o.PurchaseValue) {
		return true
	}

	return false
}

// SetPurchaseValue gets a reference to the given AmountValue and assigns it to the PurchaseValue field.
func (o *DepotPosition) SetPurchaseValue(v AmountValue) {
	o.PurchaseValue = &v
}

// GetPrevDayValue returns the PrevDayValue field value if set, zero value otherwise.
func (o *DepotPosition) GetPrevDayValue() AmountValue {
	if o == nil || IsNil(o.PrevDayValue) {
		var ret AmountValue
		return ret
	}
	return *o.PrevDayValue
}

// GetPrevDayValueOk returns a tuple with the PrevDayValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetPrevDayValueOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.PrevDayValue) {
		return nil, false
	}
	return o.PrevDayValue, true
}

// HasPrevDayValue returns a boolean if a field has been set.
func (o *DepotPosition) HasPrevDayValue() bool {
	if o != nil && !IsNil(o.PrevDayValue) {
		return true
	}

	return false
}

// SetPrevDayValue gets a reference to the given AmountValue and assigns it to the PrevDayValue field.
func (o *DepotPosition) SetPrevDayValue(v AmountValue) {
	o.PrevDayValue = &v
}

// GetProfitLossPurchaseAbs returns the ProfitLossPurchaseAbs field value if set, zero value otherwise.
func (o *DepotPosition) GetProfitLossPurchaseAbs() AmountValue {
	if o == nil || IsNil(o.ProfitLossPurchaseAbs) {
		var ret AmountValue
		return ret
	}
	return *o.ProfitLossPurchaseAbs
}

// GetProfitLossPurchaseAbsOk returns a tuple with the ProfitLossPurchaseAbs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetProfitLossPurchaseAbsOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.ProfitLossPurchaseAbs) {
		return nil, false
	}
	return o.ProfitLossPurchaseAbs, true
}

// HasProfitLossPurchaseAbs returns a boolean if a field has been set.
func (o *DepotPosition) HasProfitLossPurchaseAbs() bool {
	if o != nil && !IsNil(o.ProfitLossPurchaseAbs) {
		return true
	}

	return false
}

// SetProfitLossPurchaseAbs gets a reference to the given AmountValue and assigns it to the ProfitLossPurchaseAbs field.
func (o *DepotPosition) SetProfitLossPurchaseAbs(v AmountValue) {
	o.ProfitLossPurchaseAbs = &v
}

// GetProfitLossPurchaseRel returns the ProfitLossPurchaseRel field value if set, zero value otherwise.
func (o *DepotPosition) GetProfitLossPurchaseRel() PercentageString {
	if o == nil || IsNil(o.ProfitLossPurchaseRel) {
		var ret PercentageString
		return ret
	}
	return *o.ProfitLossPurchaseRel
}

// GetProfitLossPurchaseRelOk returns a tuple with the ProfitLossPurchaseRel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetProfitLossPurchaseRelOk() (*PercentageString, bool) {
	if o == nil || IsNil(o.ProfitLossPurchaseRel) {
		return nil, false
	}
	return o.ProfitLossPurchaseRel, true
}

// HasProfitLossPurchaseRel returns a boolean if a field has been set.
func (o *DepotPosition) HasProfitLossPurchaseRel() bool {
	if o != nil && !IsNil(o.ProfitLossPurchaseRel) {
		return true
	}

	return false
}

// SetProfitLossPurchaseRel gets a reference to the given PercentageString and assigns it to the ProfitLossPurchaseRel field.
func (o *DepotPosition) SetProfitLossPurchaseRel(v PercentageString) {
	o.ProfitLossPurchaseRel = &v
}

// GetProfitLossPrevDayAbs returns the ProfitLossPrevDayAbs field value if set, zero value otherwise.
func (o *DepotPosition) GetProfitLossPrevDayAbs() AmountValue {
	if o == nil || IsNil(o.ProfitLossPrevDayAbs) {
		var ret AmountValue
		return ret
	}
	return *o.ProfitLossPrevDayAbs
}

// GetProfitLossPrevDayAbsOk returns a tuple with the ProfitLossPrevDayAbs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetProfitLossPrevDayAbsOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.ProfitLossPrevDayAbs) {
		return nil, false
	}
	return o.ProfitLossPrevDayAbs, true
}

// HasProfitLossPrevDayAbs returns a boolean if a field has been set.
func (o *DepotPosition) HasProfitLossPrevDayAbs() bool {
	if o != nil && !IsNil(o.ProfitLossPrevDayAbs) {
		return true
	}

	return false
}

// SetProfitLossPrevDayAbs gets a reference to the given AmountValue and assigns it to the ProfitLossPrevDayAbs field.
func (o *DepotPosition) SetProfitLossPrevDayAbs(v AmountValue) {
	o.ProfitLossPrevDayAbs = &v
}

// GetProfitLossPrevDayRel returns the ProfitLossPrevDayRel field value if set, zero value otherwise.
func (o *DepotPosition) GetProfitLossPrevDayRel() PercentageString {
	if o == nil || IsNil(o.ProfitLossPrevDayRel) {
		var ret PercentageString
		return ret
	}
	return *o.ProfitLossPrevDayRel
}

// GetProfitLossPrevDayRelOk returns a tuple with the ProfitLossPrevDayRel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetProfitLossPrevDayRelOk() (*PercentageString, bool) {
	if o == nil || IsNil(o.ProfitLossPrevDayRel) {
		return nil, false
	}
	return o.ProfitLossPrevDayRel, true
}

// HasProfitLossPrevDayRel returns a boolean if a field has been set.
func (o *DepotPosition) HasProfitLossPrevDayRel() bool {
	if o != nil && !IsNil(o.ProfitLossPrevDayRel) {
		return true
	}

	return false
}

// SetProfitLossPrevDayRel gets a reference to the given PercentageString and assigns it to the ProfitLossPrevDayRel field.
func (o *DepotPosition) SetProfitLossPrevDayRel(v PercentageString) {
	o.ProfitLossPrevDayRel = &v
}

// GetInstrument returns the Instrument field value if set, zero value otherwise.
func (o *DepotPosition) GetInstrument() Instrument {
	if o == nil || IsNil(o.Instrument) {
		var ret Instrument
		return ret
	}
	return *o.Instrument
}

// GetInstrumentOk returns a tuple with the Instrument field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetInstrumentOk() (*Instrument, bool) {
	if o == nil || IsNil(o.Instrument) {
		return nil, false
	}
	return o.Instrument, true
}

// HasInstrument returns a boolean if a field has been set.
func (o *DepotPosition) HasInstrument() bool {
	if o != nil && !IsNil(o.Instrument) {
		return true
	}

	return false
}

// SetInstrument gets a reference to the given Instrument and assigns it to the Instrument field.
func (o *DepotPosition) SetInstrument(v Instrument) {
	o.Instrument = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *DepotPosition) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DepotPosition) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *DepotPosition) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *DepotPosition) SetVersion(v string) {
	o.Version = &v
}

func (o DepotPosition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DepotPosition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DepotId) {
		toSerialize["depotId"] = o.DepotId
	}
	if !IsNil(o.PositionId) {
		toSerialize["positionId"] = o.PositionId
	}
	if !IsNil(o.Wkn) {
		toSerialize["wkn"] = o.Wkn
	}
	if !IsNil(o.CustodyType) {
		toSerialize["custodyType"] = o.CustodyType
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.AvailableQuantity) {
		toSerialize["availableQuantity"] = o.AvailableQuantity
	}
	if !IsNil(o.CurrentPrice) {
		toSerialize["currentPrice"] = o.CurrentPrice
	}
	if !IsNil(o.PurchasePrice) {
		toSerialize["purchasePrice"] = o.PurchasePrice
	}
	if !IsNil(o.PrevDayPrice) {
		toSerialize["prevDayPrice"] = o.PrevDayPrice
	}
	if !IsNil(o.CurrentValue) {
		toSerialize["currentValue"] = o.CurrentValue
	}
	if !IsNil(o.PurchaseValue) {
		toSerialize["purchaseValue"] = o.PurchaseValue
	}
	if !IsNil(o.PrevDayValue) {
		toSerialize["prevDayValue"] = o.PrevDayValue
	}
	if !IsNil(o.ProfitLossPurchaseAbs) {
		toSerialize["profitLossPurchaseAbs"] = o.ProfitLossPurchaseAbs
	}
	if !IsNil(o.ProfitLossPurchaseRel) {
		toSerialize["profitLossPurchaseRel"] = o.ProfitLossPurchaseRel
	}
	if !IsNil(o.ProfitLossPrevDayAbs) {
		toSerialize["profitLossPrevDayAbs"] = o.ProfitLossPrevDayAbs
	}
	if !IsNil(o.ProfitLossPrevDayRel) {
		toSerialize["profitLossPrevDayRel"] = o.ProfitLossPrevDayRel
	}
	if !IsNil(o.Instrument) {
		toSerialize["instrument"] = o.Instrument
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableDepotPosition struct {
	value *DepotPosition
	isSet bool
}

func (v NullableDepotPosition) Get() *DepotPosition {
	return v.value
}

func (v *NullableDepotPosition) Set(val *DepotPosition) {
	v.value = val
	v.isSet = true
}

func (v NullableDepotPosition) IsSet() bool {
	return v.isSet
}

func (v *NullableDepotPosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepotPosition(val *DepotPosition) *NullableDepotPosition {
	return &NullableDepotPosition{value: val, isSet: true}
}

func (v NullableDepotPosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepotPosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


