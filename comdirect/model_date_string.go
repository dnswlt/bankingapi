/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"
)

// DateString Represents the date without the time.
type DateString struct {
	// Time with format: 'yyyy-MM-dd'
	Date *string `json:"date,omitempty"`
}

// NewDateString instantiates a new DateString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDateString() *DateString {
	this := DateString{}
	return &this
}

// NewDateStringWithDefaults instantiates a new DateString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDateStringWithDefaults() *DateString {
	this := DateString{}
	return &this
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *DateString) GetDate() string {
	if o == nil || IsNil(o.Date) {
		var ret string
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DateString) GetDateOk() (*string, bool) {
	if o == nil || IsNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *DateString) HasDate() bool {
	if o != nil && !IsNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given string and assigns it to the Date field.
func (o *DateString) SetDate(v string) {
	o.Date = &v
}

func (o DateString) MarshalJSON() ([]byte, error) {
	return json.Marshal(o.Date)
}

func (o *DateString) UnmarshalJSON(b []byte) error {
	s := strings.Trim(string(b), `"`)
	if s == "" {
		return nil
	}

	_, err := time.Parse("2006-01-02", s)
	if err != nil {
		return fmt.Errorf("cannot parse date: %w", err)
	}

	o.SetDate(s)
	return nil
}

type NullableDateString struct {
	value *DateString
	isSet bool
}

func (v NullableDateString) Get() *DateString {
	return v.value
}

func (v *NullableDateString) Set(val *DateString) {
	v.value = val
	v.isSet = true
}

func (v NullableDateString) IsSet() bool {
	return v.isSet
}

func (v *NullableDateString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDateString(val *DateString) *NullableDateString {
	return &NullableDateString{value: val, isSet: true}
}

func (v NullableDateString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDateString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
