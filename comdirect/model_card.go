/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the Card type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Card{}

// Card Model for a card.
type Card struct {
	// Card identifier (UUID).
	CardId *string `json:"cardId,omitempty"`
	CardType *EnumText `json:"cardType,omitempty"`
	// Client connection uniquely assigned to the credit card account.
	ClientId *string `json:"clientId,omitempty"`
	// Contract code of the client uniquely assigned to the credit card account.
	ParticipantId *string `json:"participantId,omitempty"`
	// Name of the card holder
	HolderName *string `json:"holderName,omitempty"`
	// Default settlement account number uniquely assigned to the credit card account. In this case, it has to be the current account.
	SettlementAccountId *string `json:"settlementAccountId,omitempty"`
	// Partially masked credit card number.
	CardDisplayId *string `json:"cardDisplayId,omitempty"`
	// validity of the card. Format: MM/YY
	CardValidity *string `json:"cardValidity,omitempty"`
	CardImage *VisaCardImage `json:"cardImage,omitempty"`
	// Last 4 digits of the credit card number
	PrimaryAccountNumberSuffix *string `json:"primaryAccountNumberSuffix,omitempty"`
	CardLimit *AmountValue `json:"cardLimit,omitempty"`
	// Status of the card.
	Status *string `json:"status,omitempty"`
}

// NewCard instantiates a new Card object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCard() *Card {
	this := Card{}
	return &this
}

// NewCardWithDefaults instantiates a new Card object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCardWithDefaults() *Card {
	this := Card{}
	return &this
}

// GetCardId returns the CardId field value if set, zero value otherwise.
func (o *Card) GetCardId() string {
	if o == nil || IsNil(o.CardId) {
		var ret string
		return ret
	}
	return *o.CardId
}

// GetCardIdOk returns a tuple with the CardId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetCardIdOk() (*string, bool) {
	if o == nil || IsNil(o.CardId) {
		return nil, false
	}
	return o.CardId, true
}

// HasCardId returns a boolean if a field has been set.
func (o *Card) HasCardId() bool {
	if o != nil && !IsNil(o.CardId) {
		return true
	}

	return false
}

// SetCardId gets a reference to the given string and assigns it to the CardId field.
func (o *Card) SetCardId(v string) {
	o.CardId = &v
}

// GetCardType returns the CardType field value if set, zero value otherwise.
func (o *Card) GetCardType() EnumText {
	if o == nil || IsNil(o.CardType) {
		var ret EnumText
		return ret
	}
	return *o.CardType
}

// GetCardTypeOk returns a tuple with the CardType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetCardTypeOk() (*EnumText, bool) {
	if o == nil || IsNil(o.CardType) {
		return nil, false
	}
	return o.CardType, true
}

// HasCardType returns a boolean if a field has been set.
func (o *Card) HasCardType() bool {
	if o != nil && !IsNil(o.CardType) {
		return true
	}

	return false
}

// SetCardType gets a reference to the given EnumText and assigns it to the CardType field.
func (o *Card) SetCardType(v EnumText) {
	o.CardType = &v
}

// GetClientId returns the ClientId field value if set, zero value otherwise.
func (o *Card) GetClientId() string {
	if o == nil || IsNil(o.ClientId) {
		var ret string
		return ret
	}
	return *o.ClientId
}

// GetClientIdOk returns a tuple with the ClientId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetClientIdOk() (*string, bool) {
	if o == nil || IsNil(o.ClientId) {
		return nil, false
	}
	return o.ClientId, true
}

// HasClientId returns a boolean if a field has been set.
func (o *Card) HasClientId() bool {
	if o != nil && !IsNil(o.ClientId) {
		return true
	}

	return false
}

// SetClientId gets a reference to the given string and assigns it to the ClientId field.
func (o *Card) SetClientId(v string) {
	o.ClientId = &v
}

// GetParticipantId returns the ParticipantId field value if set, zero value otherwise.
func (o *Card) GetParticipantId() string {
	if o == nil || IsNil(o.ParticipantId) {
		var ret string
		return ret
	}
	return *o.ParticipantId
}

// GetParticipantIdOk returns a tuple with the ParticipantId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetParticipantIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParticipantId) {
		return nil, false
	}
	return o.ParticipantId, true
}

// HasParticipantId returns a boolean if a field has been set.
func (o *Card) HasParticipantId() bool {
	if o != nil && !IsNil(o.ParticipantId) {
		return true
	}

	return false
}

// SetParticipantId gets a reference to the given string and assigns it to the ParticipantId field.
func (o *Card) SetParticipantId(v string) {
	o.ParticipantId = &v
}

// GetHolderName returns the HolderName field value if set, zero value otherwise.
func (o *Card) GetHolderName() string {
	if o == nil || IsNil(o.HolderName) {
		var ret string
		return ret
	}
	return *o.HolderName
}

// GetHolderNameOk returns a tuple with the HolderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetHolderNameOk() (*string, bool) {
	if o == nil || IsNil(o.HolderName) {
		return nil, false
	}
	return o.HolderName, true
}

// HasHolderName returns a boolean if a field has been set.
func (o *Card) HasHolderName() bool {
	if o != nil && !IsNil(o.HolderName) {
		return true
	}

	return false
}

// SetHolderName gets a reference to the given string and assigns it to the HolderName field.
func (o *Card) SetHolderName(v string) {
	o.HolderName = &v
}

// GetSettlementAccountId returns the SettlementAccountId field value if set, zero value otherwise.
func (o *Card) GetSettlementAccountId() string {
	if o == nil || IsNil(o.SettlementAccountId) {
		var ret string
		return ret
	}
	return *o.SettlementAccountId
}

// GetSettlementAccountIdOk returns a tuple with the SettlementAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetSettlementAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.SettlementAccountId) {
		return nil, false
	}
	return o.SettlementAccountId, true
}

// HasSettlementAccountId returns a boolean if a field has been set.
func (o *Card) HasSettlementAccountId() bool {
	if o != nil && !IsNil(o.SettlementAccountId) {
		return true
	}

	return false
}

// SetSettlementAccountId gets a reference to the given string and assigns it to the SettlementAccountId field.
func (o *Card) SetSettlementAccountId(v string) {
	o.SettlementAccountId = &v
}

// GetCardDisplayId returns the CardDisplayId field value if set, zero value otherwise.
func (o *Card) GetCardDisplayId() string {
	if o == nil || IsNil(o.CardDisplayId) {
		var ret string
		return ret
	}
	return *o.CardDisplayId
}

// GetCardDisplayIdOk returns a tuple with the CardDisplayId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetCardDisplayIdOk() (*string, bool) {
	if o == nil || IsNil(o.CardDisplayId) {
		return nil, false
	}
	return o.CardDisplayId, true
}

// HasCardDisplayId returns a boolean if a field has been set.
func (o *Card) HasCardDisplayId() bool {
	if o != nil && !IsNil(o.CardDisplayId) {
		return true
	}

	return false
}

// SetCardDisplayId gets a reference to the given string and assigns it to the CardDisplayId field.
func (o *Card) SetCardDisplayId(v string) {
	o.CardDisplayId = &v
}

// GetCardValidity returns the CardValidity field value if set, zero value otherwise.
func (o *Card) GetCardValidity() string {
	if o == nil || IsNil(o.CardValidity) {
		var ret string
		return ret
	}
	return *o.CardValidity
}

// GetCardValidityOk returns a tuple with the CardValidity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetCardValidityOk() (*string, bool) {
	if o == nil || IsNil(o.CardValidity) {
		return nil, false
	}
	return o.CardValidity, true
}

// HasCardValidity returns a boolean if a field has been set.
func (o *Card) HasCardValidity() bool {
	if o != nil && !IsNil(o.CardValidity) {
		return true
	}

	return false
}

// SetCardValidity gets a reference to the given string and assigns it to the CardValidity field.
func (o *Card) SetCardValidity(v string) {
	o.CardValidity = &v
}

// GetCardImage returns the CardImage field value if set, zero value otherwise.
func (o *Card) GetCardImage() VisaCardImage {
	if o == nil || IsNil(o.CardImage) {
		var ret VisaCardImage
		return ret
	}
	return *o.CardImage
}

// GetCardImageOk returns a tuple with the CardImage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetCardImageOk() (*VisaCardImage, bool) {
	if o == nil || IsNil(o.CardImage) {
		return nil, false
	}
	return o.CardImage, true
}

// HasCardImage returns a boolean if a field has been set.
func (o *Card) HasCardImage() bool {
	if o != nil && !IsNil(o.CardImage) {
		return true
	}

	return false
}

// SetCardImage gets a reference to the given VisaCardImage and assigns it to the CardImage field.
func (o *Card) SetCardImage(v VisaCardImage) {
	o.CardImage = &v
}

// GetPrimaryAccountNumberSuffix returns the PrimaryAccountNumberSuffix field value if set, zero value otherwise.
func (o *Card) GetPrimaryAccountNumberSuffix() string {
	if o == nil || IsNil(o.PrimaryAccountNumberSuffix) {
		var ret string
		return ret
	}
	return *o.PrimaryAccountNumberSuffix
}

// GetPrimaryAccountNumberSuffixOk returns a tuple with the PrimaryAccountNumberSuffix field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetPrimaryAccountNumberSuffixOk() (*string, bool) {
	if o == nil || IsNil(o.PrimaryAccountNumberSuffix) {
		return nil, false
	}
	return o.PrimaryAccountNumberSuffix, true
}

// HasPrimaryAccountNumberSuffix returns a boolean if a field has been set.
func (o *Card) HasPrimaryAccountNumberSuffix() bool {
	if o != nil && !IsNil(o.PrimaryAccountNumberSuffix) {
		return true
	}

	return false
}

// SetPrimaryAccountNumberSuffix gets a reference to the given string and assigns it to the PrimaryAccountNumberSuffix field.
func (o *Card) SetPrimaryAccountNumberSuffix(v string) {
	o.PrimaryAccountNumberSuffix = &v
}

// GetCardLimit returns the CardLimit field value if set, zero value otherwise.
func (o *Card) GetCardLimit() AmountValue {
	if o == nil || IsNil(o.CardLimit) {
		var ret AmountValue
		return ret
	}
	return *o.CardLimit
}

// GetCardLimitOk returns a tuple with the CardLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetCardLimitOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.CardLimit) {
		return nil, false
	}
	return o.CardLimit, true
}

// HasCardLimit returns a boolean if a field has been set.
func (o *Card) HasCardLimit() bool {
	if o != nil && !IsNil(o.CardLimit) {
		return true
	}

	return false
}

// SetCardLimit gets a reference to the given AmountValue and assigns it to the CardLimit field.
func (o *Card) SetCardLimit(v AmountValue) {
	o.CardLimit = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Card) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Card) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Card) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Card) SetStatus(v string) {
	o.Status = &v
}

func (o Card) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Card) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CardId) {
		toSerialize["cardId"] = o.CardId
	}
	if !IsNil(o.CardType) {
		toSerialize["cardType"] = o.CardType
	}
	if !IsNil(o.ClientId) {
		toSerialize["clientId"] = o.ClientId
	}
	if !IsNil(o.ParticipantId) {
		toSerialize["participantId"] = o.ParticipantId
	}
	if !IsNil(o.HolderName) {
		toSerialize["holderName"] = o.HolderName
	}
	if !IsNil(o.SettlementAccountId) {
		toSerialize["settlementAccountId"] = o.SettlementAccountId
	}
	if !IsNil(o.CardDisplayId) {
		toSerialize["cardDisplayId"] = o.CardDisplayId
	}
	if !IsNil(o.CardValidity) {
		toSerialize["cardValidity"] = o.CardValidity
	}
	if !IsNil(o.CardImage) {
		toSerialize["cardImage"] = o.CardImage
	}
	if !IsNil(o.PrimaryAccountNumberSuffix) {
		toSerialize["primaryAccountNumberSuffix"] = o.PrimaryAccountNumberSuffix
	}
	if !IsNil(o.CardLimit) {
		toSerialize["cardLimit"] = o.CardLimit
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	return toSerialize, nil
}

type NullableCard struct {
	value *Card
	isSet bool
}

func (v NullableCard) Get() *Card {
	return v.value
}

func (v *NullableCard) Set(val *Card) {
	v.value = val
	v.isSet = true
}

func (v NullableCard) IsSet() bool {
	return v.isSet
}

func (v *NullableCard) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCard(val *Card) *NullableCard {
	return &NullableCard{value: val, isSet: true}
}

func (v NullableCard) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCard) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


