/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
	"strings"
)

// checks if the AccountTransaction type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AccountTransaction{}

// AccountTransaction Model for an account transaction.
type AccountTransaction struct {
	// unique reference code of the transaction
	Reference *string `json:"reference,omitempty"`
	// Status of transaction
	BookingStatus *string             `json:"bookingStatus,omitempty"`
	BookingDate   *DateString         `json:"bookingDate,omitempty"`
	Amount        *AmountValue        `json:"amount,omitempty"`
	Remitter      *AccountInformation `json:"remitter,omitempty"`
	Deptor        *AccountInformation `json:"deptor,omitempty"`
	Creditor      *AccountInformation `json:"creditor,omitempty"`
	// Availability date (yyyy-mm-dd). Could be an invalid date e.g. 2019-12-32
	ValutaDate *string `json:"valutaDate,omitempty"`
	// Gives back the creditor identifier of an account transaction, if it is a direct debit.
	DirectDebitCreditorId *string `json:"directDebitCreditorId,omitempty"`
	// Gives back the mandateId of an account transaction, if it is a direct debit.
	DirectDebitMandateId *string `json:"directDebitMandateId,omitempty"`
	// Gives back the end-to-end-reference of an account transaction, if it is a direct debit.
	EndToEndReference *string `json:"endToEndReference,omitempty"`
	// Shows whether the client has seen the account transaction in web.
	NewTransaction *bool `json:"newTransaction,omitempty"`
	// remittance information of the transaction. This can be more then one line with a length of 35 symbols. The lines will be numbered in case of an already booked transaction.
	RemittanceInfo  *string   `json:"remittanceInfo,omitempty"`
	TransactionType *EnumText `json:"transactionType,omitempty"`
}

// NewAccountTransaction instantiates a new AccountTransaction object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAccountTransaction() *AccountTransaction {
	this := AccountTransaction{}
	return &this
}

// NewAccountTransactionWithDefaults instantiates a new AccountTransaction object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAccountTransactionWithDefaults() *AccountTransaction {
	this := AccountTransaction{}
	return &this
}

// GetReference returns the Reference field value if set, zero value otherwise.
func (o *AccountTransaction) GetReference() string {
	if o == nil || IsNil(o.Reference) {
		var ret string
		return ret
	}
	return *o.Reference
}

// GetReferenceOk returns a tuple with the Reference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTransaction) GetReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.Reference) {
		return nil, false
	}
	return o.Reference, true
}

// HasReference returns a boolean if a field has been set.
func (o *AccountTransaction) HasReference() bool {
	if o != nil && !IsNil(o.Reference) {
		return true
	}

	return false
}

// SetReference gets a reference to the given string and assigns it to the Reference field.
func (o *AccountTransaction) SetReference(v string) {
	o.Reference = &v
}

// GetBookingStatus returns the BookingStatus field value if set, zero value otherwise.
func (o *AccountTransaction) GetBookingStatus() string {
	if o == nil || IsNil(o.BookingStatus) {
		var ret string
		return ret
	}
	return *o.BookingStatus
}

// GetBookingStatusOk returns a tuple with the BookingStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTransaction) GetBookingStatusOk() (*string, bool) {
	if o == nil || IsNil(o.BookingStatus) {
		return nil, false
	}
	return o.BookingStatus, true
}

// HasBookingStatus returns a boolean if a field has been set.
func (o *AccountTransaction) HasBookingStatus() bool {
	if o != nil && !IsNil(o.BookingStatus) {
		return true
	}

	return false
}

// SetBookingStatus gets a reference to the given string and assigns it to the BookingStatus field.
func (o *AccountTransaction) SetBookingStatus(v string) {
	o.BookingStatus = &v
}

// GetBookingDate returns the BookingDate field value if set, zero value otherwise.
func (o *AccountTransaction) GetBookingDate() DateString {
	if o == nil || IsNil(o.BookingDate) {
		var ret DateString
		return ret
	}
	return *o.BookingDate
}

// GetBookingDateOk returns a tuple with the BookingDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTransaction) GetBookingDateOk() (*DateString, bool) {
	if o == nil || IsNil(o.BookingDate) {
		return nil, false
	}
	return o.BookingDate, true
}

// HasBookingDate returns a boolean if a field has been set.
func (o *AccountTransaction) HasBookingDate() bool {
	if o != nil && !IsNil(o.BookingDate) {
		return true
	}

	return false
}

// SetBookingDate gets a reference to the given DateString and assigns it to the BookingDate field.
func (o *AccountTransaction) SetBookingDate(v DateString) {
	o.BookingDate = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *AccountTransaction) GetAmount() AmountValue {
	if o == nil || IsNil(o.Amount) {
		var ret AmountValue
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTransaction) GetAmountOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *AccountTransaction) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given AmountValue and assigns it to the Amount field.
func (o *AccountTransaction) SetAmount(v AmountValue) {
	o.Amount = &v
}

// GetRemitter returns the Remitter field value if set, zero value otherwise.
func (o *AccountTransaction) GetRemitter() AccountInformation {
	if o == nil || IsNil(o.Remitter) {
		var ret AccountInformation
		return ret
	}
	return *o.Remitter
}

// GetRemitterOk returns a tuple with the Remitter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTransaction) GetRemitterOk() (*AccountInformation, bool) {
	if o == nil || IsNil(o.Remitter) {
		return nil, false
	}
	return o.Remitter, true
}

// HasRemitter returns a boolean if a field has been set.
func (o *AccountTransaction) HasRemitter() bool {
	if o != nil && !IsNil(o.Remitter) {
		return true
	}

	return false
}

// SetRemitter gets a reference to the given AccountInformation and assigns it to the Remitter field.
func (o *AccountTransaction) SetRemitter(v AccountInformation) {
	o.Remitter = &v
}

// GetDeptor returns the Deptor field value if set, zero value otherwise.
func (o *AccountTransaction) GetDeptor() AccountInformation {
	if o == nil || IsNil(o.Deptor) {
		var ret AccountInformation
		return ret
	}
	return *o.Deptor
}

// GetDeptorOk returns a tuple with the Deptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTransaction) GetDeptorOk() (*AccountInformation, bool) {
	if o == nil || IsNil(o.Deptor) {
		return nil, false
	}
	return o.Deptor, true
}

// HasDeptor returns a boolean if a field has been set.
func (o *AccountTransaction) HasDeptor() bool {
	if o != nil && !IsNil(o.Deptor) {
		return true
	}

	return false
}

// SetDeptor gets a reference to the given AccountInformation and assigns it to the Deptor field.
func (o *AccountTransaction) SetDeptor(v AccountInformation) {
	o.Deptor = &v
}

// GetCreditor returns the Creditor field value if set, zero value otherwise.
func (o *AccountTransaction) GetCreditor() AccountInformation {
	if o == nil || IsNil(o.Creditor) {
		var ret AccountInformation
		return ret
	}
	return *o.Creditor
}

// GetCreditorOk returns a tuple with the Creditor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTransaction) GetCreditorOk() (*AccountInformation, bool) {
	if o == nil || IsNil(o.Creditor) {
		return nil, false
	}
	return o.Creditor, true
}

// HasCreditor returns a boolean if a field has been set.
func (o *AccountTransaction) HasCreditor() bool {
	if o != nil && !IsNil(o.Creditor) {
		return true
	}

	return false
}

// SetCreditor gets a reference to the given AccountInformation and assigns it to the Creditor field.
func (o *AccountTransaction) SetCreditor(v AccountInformation) {
	o.Creditor = &v
}

// GetValutaDate returns the ValutaDate field value if set, zero value otherwise.
func (o *AccountTransaction) GetValutaDate() string {
	if o == nil || IsNil(o.ValutaDate) {
		var ret string
		return ret
	}
	return *o.ValutaDate
}

// GetValutaDateOk returns a tuple with the ValutaDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTransaction) GetValutaDateOk() (*string, bool) {
	if o == nil || IsNil(o.ValutaDate) {
		return nil, false
	}
	return o.ValutaDate, true
}

// HasValutaDate returns a boolean if a field has been set.
func (o *AccountTransaction) HasValutaDate() bool {
	if o != nil && !IsNil(o.ValutaDate) {
		return true
	}

	return false
}

// SetValutaDate gets a reference to the given string and assigns it to the ValutaDate field.
func (o *AccountTransaction) SetValutaDate(v string) {
	o.ValutaDate = &v
}

// GetDirectDebitCreditorId returns the DirectDebitCreditorId field value if set, zero value otherwise.
func (o *AccountTransaction) GetDirectDebitCreditorId() string {
	if o == nil || IsNil(o.DirectDebitCreditorId) {
		var ret string
		return ret
	}
	return *o.DirectDebitCreditorId
}

// GetDirectDebitCreditorIdOk returns a tuple with the DirectDebitCreditorId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTransaction) GetDirectDebitCreditorIdOk() (*string, bool) {
	if o == nil || IsNil(o.DirectDebitCreditorId) {
		return nil, false
	}
	return o.DirectDebitCreditorId, true
}

// HasDirectDebitCreditorId returns a boolean if a field has been set.
func (o *AccountTransaction) HasDirectDebitCreditorId() bool {
	if o != nil && !IsNil(o.DirectDebitCreditorId) {
		return true
	}

	return false
}

// SetDirectDebitCreditorId gets a reference to the given string and assigns it to the DirectDebitCreditorId field.
func (o *AccountTransaction) SetDirectDebitCreditorId(v string) {
	o.DirectDebitCreditorId = &v
}

// GetDirectDebitMandateId returns the DirectDebitMandateId field value if set, zero value otherwise.
func (o *AccountTransaction) GetDirectDebitMandateId() string {
	if o == nil || IsNil(o.DirectDebitMandateId) {
		var ret string
		return ret
	}
	return *o.DirectDebitMandateId
}

// GetDirectDebitMandateIdOk returns a tuple with the DirectDebitMandateId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTransaction) GetDirectDebitMandateIdOk() (*string, bool) {
	if o == nil || IsNil(o.DirectDebitMandateId) {
		return nil, false
	}
	return o.DirectDebitMandateId, true
}

// HasDirectDebitMandateId returns a boolean if a field has been set.
func (o *AccountTransaction) HasDirectDebitMandateId() bool {
	if o != nil && !IsNil(o.DirectDebitMandateId) {
		return true
	}

	return false
}

// SetDirectDebitMandateId gets a reference to the given string and assigns it to the DirectDebitMandateId field.
func (o *AccountTransaction) SetDirectDebitMandateId(v string) {
	o.DirectDebitMandateId = &v
}

// GetEndToEndReference returns the EndToEndReference field value if set, zero value otherwise.
func (o *AccountTransaction) GetEndToEndReference() string {
	if o == nil || IsNil(o.EndToEndReference) {
		var ret string
		return ret
	}
	return *o.EndToEndReference
}

// GetEndToEndReferenceOk returns a tuple with the EndToEndReference field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTransaction) GetEndToEndReferenceOk() (*string, bool) {
	if o == nil || IsNil(o.EndToEndReference) {
		return nil, false
	}
	return o.EndToEndReference, true
}

// HasEndToEndReference returns a boolean if a field has been set.
func (o *AccountTransaction) HasEndToEndReference() bool {
	if o != nil && !IsNil(o.EndToEndReference) {
		return true
	}

	return false
}

// SetEndToEndReference gets a reference to the given string and assigns it to the EndToEndReference field.
func (o *AccountTransaction) SetEndToEndReference(v string) {
	o.EndToEndReference = &v
}

// GetNewTransaction returns the NewTransaction field value if set, zero value otherwise.
func (o *AccountTransaction) GetNewTransaction() bool {
	if o == nil || IsNil(o.NewTransaction) {
		var ret bool
		return ret
	}
	return *o.NewTransaction
}

// GetNewTransactionOk returns a tuple with the NewTransaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTransaction) GetNewTransactionOk() (*bool, bool) {
	if o == nil || IsNil(o.NewTransaction) {
		return nil, false
	}
	return o.NewTransaction, true
}

// HasNewTransaction returns a boolean if a field has been set.
func (o *AccountTransaction) HasNewTransaction() bool {
	if o != nil && !IsNil(o.NewTransaction) {
		return true
	}

	return false
}

// SetNewTransaction gets a reference to the given bool and assigns it to the NewTransaction field.
func (o *AccountTransaction) SetNewTransaction(v bool) {
	o.NewTransaction = &v
}

// GetRemittanceInfo returns the RemittanceInfo field value if set, zero value otherwise.
func (o *AccountTransaction) GetRemittanceInfo() string {
	if o == nil || IsNil(o.RemittanceInfo) {
		var ret string
		return ret
	}
	return *o.RemittanceInfo
}

// GetRemittanceInfoList returns all lines of the remittance info
// as separate lines. Remittance info uses a special format to
// encode multi-line text, where each line has a fixed length
// and starts with the two-digit line number (ex: "01").
// These line numbers are not part of the returned text.
func (o *AccountTransaction) GetRemittanceInfoList() []string {
	s := o.GetRemittanceInfo()
	if len(s) <= 35 {
		return []string{s}
	}
	// Need to use runes, not bytes: we've seen examples where
	// remittance info contained umlauts, which were counted
	// as a single character in this crude encoding.
	rs := []rune(s)
	n := (len(rs)-1)/37 + 1
	lines := make([]string, n)
	for i := range lines {
		j := i * 37
		if j+1 >= len(rs) || rs[j] < '0' || rs[j] > '9' || rs[j+1] < '0' || rs[j+1] > '9' {
			// Line does not start with expected 2-digit number.
			return []string{s}
		}
		end := min(j+37, len(rs))
		lines[i] = strings.TrimSpace(string(rs[j+2 : end]))
	}
	return lines
}

// GetRemittanceInfoOk returns a tuple with the RemittanceInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTransaction) GetRemittanceInfoOk() (*string, bool) {
	if o == nil || IsNil(o.RemittanceInfo) {
		return nil, false
	}
	return o.RemittanceInfo, true
}

// HasRemittanceInfo returns a boolean if a field has been set.
func (o *AccountTransaction) HasRemittanceInfo() bool {
	if o != nil && !IsNil(o.RemittanceInfo) {
		return true
	}

	return false
}

// SetRemittanceInfo gets a reference to the given string and assigns it to the RemittanceInfo field.
func (o *AccountTransaction) SetRemittanceInfo(v string) {
	o.RemittanceInfo = &v
}

// GetTransactionType returns the TransactionType field value if set, zero value otherwise.
func (o *AccountTransaction) GetTransactionType() EnumText {
	if o == nil || IsNil(o.TransactionType) {
		var ret EnumText
		return ret
	}
	return *o.TransactionType
}

// GetTransactionTypeOk returns a tuple with the TransactionType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AccountTransaction) GetTransactionTypeOk() (*EnumText, bool) {
	if o == nil || IsNil(o.TransactionType) {
		return nil, false
	}
	return o.TransactionType, true
}

// HasTransactionType returns a boolean if a field has been set.
func (o *AccountTransaction) HasTransactionType() bool {
	if o != nil && !IsNil(o.TransactionType) {
		return true
	}

	return false
}

// SetTransactionType gets a reference to the given EnumText and assigns it to the TransactionType field.
func (o *AccountTransaction) SetTransactionType(v EnumText) {
	o.TransactionType = &v
}

func (o AccountTransaction) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AccountTransaction) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Reference) {
		toSerialize["reference"] = o.Reference
	}
	if !IsNil(o.BookingStatus) {
		toSerialize["bookingStatus"] = o.BookingStatus
	}
	if !IsNil(o.BookingDate) {
		toSerialize["bookingDate"] = o.BookingDate
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.Remitter) {
		toSerialize["remitter"] = o.Remitter
	}
	if !IsNil(o.Deptor) {
		toSerialize["deptor"] = o.Deptor
	}
	if !IsNil(o.Creditor) {
		toSerialize["creditor"] = o.Creditor
	}
	if !IsNil(o.ValutaDate) {
		toSerialize["valutaDate"] = o.ValutaDate
	}
	if !IsNil(o.DirectDebitCreditorId) {
		toSerialize["directDebitCreditorId"] = o.DirectDebitCreditorId
	}
	if !IsNil(o.DirectDebitMandateId) {
		toSerialize["directDebitMandateId"] = o.DirectDebitMandateId
	}
	if !IsNil(o.EndToEndReference) {
		toSerialize["endToEndReference"] = o.EndToEndReference
	}
	if !IsNil(o.NewTransaction) {
		toSerialize["newTransaction"] = o.NewTransaction
	}
	if !IsNil(o.RemittanceInfo) {
		toSerialize["remittanceInfo"] = o.RemittanceInfo
	}
	if !IsNil(o.TransactionType) {
		toSerialize["transactionType"] = o.TransactionType
	}
	return toSerialize, nil
}

type NullableAccountTransaction struct {
	value *AccountTransaction
	isSet bool
}

func (v NullableAccountTransaction) Get() *AccountTransaction {
	return v.value
}

func (v *NullableAccountTransaction) Set(val *AccountTransaction) {
	v.value = val
	v.isSet = true
}

func (v NullableAccountTransaction) IsSet() bool {
	return v.isSet
}

func (v *NullableAccountTransaction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAccountTransaction(val *AccountTransaction) *NullableAccountTransaction {
	return &NullableAccountTransaction{value: val, isSet: true}
}

func (v NullableAccountTransaction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAccountTransaction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
