/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the Order type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Order{}

// Order Model for an order.
type Order struct {
	// Unique securities account identification (as UUID)
	DepotId *string `json:"depotId,omitempty"`
	// Reference settlement account for the securities account, if different from the settlement account assigned directly to the securities account (UUID)
	SettlementAccountId *string `json:"settlementAccountId,omitempty"`
	// Unique order-Id (UUID)
	OrderId *string `json:"orderId,omitempty"`
	CreationTimestamp *TimestampString `json:"creationTimestamp,omitempty"`
	// Order leg number (if ordertype is OCO or NEO)
	LegNumber *int32 `json:"legNumber,omitempty"`
	// Flag if order is a best-execution-order, default value is false
	BestEx *bool `json:"bestEx,omitempty"`
	// Ordertype, partially executed and open orders are listed in the execution parameters
	OrderType *string `json:"orderType,omitempty"`
	// Status of the order
	OrderStatus *string `json:"orderStatus,omitempty"`
	// Parts of the orders, e.g. combination orders OCO, NEO (Next Order) with different order legs or partially executed or partially cancelled orders with different parts of an order
	SubOrders []Order `json:"subOrders,omitempty"`
	// Type of transaction
	Side *string `json:"side,omitempty"`
	// WKN, ISIN or uuId; wkn will be returned if instrumentId is entered as wkn, an ISIN is returned if instrumentId is entered as ISIN, a uuId is returned if instrumentId is entered as uuId
	InstrumentId *string `json:"instrumentId,omitempty"`
	// Quote-Id as reference for the quote received from the trading venue (issuer or exchange) on the quote request
	QuoteId *string `json:"quoteId,omitempty"`
	// UUID of the trading venue or partner. This is mandatory, if isBestEx=FALSE
	VenueId *string `json:"venueId,omitempty"`
	Quantity *AmountValue `json:"quantity,omitempty"`
	OpenQuantity *AmountValue `json:"openQuantity,omitempty"`
	CancelledQuantity *AmountValue `json:"cancelledQuantity,omitempty"`
	ExecutedQuantity *AmountValue `json:"executedQuantity,omitempty"`
	// Order extensions (Fill-or-Kill, Immediate-or-Cancel, All-or-None)
	LimitExtension *string `json:"limitExtension,omitempty"`
	// Restrictions on trade (Opening Auction Only, Auction Only, Closing Auction Only)
	TradingRestriction *string `json:"tradingRestriction,omitempty"`
	Limit *AmountValue `json:"limit,omitempty"`
	TriggerLimit *AmountValue `json:"triggerLimit,omitempty"`
	TrailingLimitDistAbs *AmountValue `json:"trailingLimitDistAbs,omitempty"`
	TrailingLimitDistRel *PercentageString `json:"trailingLimitDistRel,omitempty"`
	// Type of order validity (Good-for-day (default), Good-til-date (incl. end of month))
	ValidityType *string `json:"validityType,omitempty"`
	Validity *DateString `json:"validity,omitempty"`
	ExpectedValue *AmountValue `json:"expectedValue,omitempty"`
	// List of execution types for the order
	Executions []Execution `json:"executions,omitempty"`
	// Ticket UUID for the quote order. This is mandatory, if for a quote order
	QuoteTicketId *string `json:"quoteTicketId,omitempty"`
	// Version of the position to be sold. Only applicable for sell
	Version *string `json:"version,omitempty"`
}

// NewOrder instantiates a new Order object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrder() *Order {
	this := Order{}
	var bestEx bool = false
	this.BestEx = &bestEx
	return &this
}

// NewOrderWithDefaults instantiates a new Order object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderWithDefaults() *Order {
	this := Order{}
	var bestEx bool = false
	this.BestEx = &bestEx
	return &this
}

// GetDepotId returns the DepotId field value if set, zero value otherwise.
func (o *Order) GetDepotId() string {
	if o == nil || IsNil(o.DepotId) {
		var ret string
		return ret
	}
	return *o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetDepotIdOk() (*string, bool) {
	if o == nil || IsNil(o.DepotId) {
		return nil, false
	}
	return o.DepotId, true
}

// HasDepotId returns a boolean if a field has been set.
func (o *Order) HasDepotId() bool {
	if o != nil && !IsNil(o.DepotId) {
		return true
	}

	return false
}

// SetDepotId gets a reference to the given string and assigns it to the DepotId field.
func (o *Order) SetDepotId(v string) {
	o.DepotId = &v
}

// GetSettlementAccountId returns the SettlementAccountId field value if set, zero value otherwise.
func (o *Order) GetSettlementAccountId() string {
	if o == nil || IsNil(o.SettlementAccountId) {
		var ret string
		return ret
	}
	return *o.SettlementAccountId
}

// GetSettlementAccountIdOk returns a tuple with the SettlementAccountId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetSettlementAccountIdOk() (*string, bool) {
	if o == nil || IsNil(o.SettlementAccountId) {
		return nil, false
	}
	return o.SettlementAccountId, true
}

// HasSettlementAccountId returns a boolean if a field has been set.
func (o *Order) HasSettlementAccountId() bool {
	if o != nil && !IsNil(o.SettlementAccountId) {
		return true
	}

	return false
}

// SetSettlementAccountId gets a reference to the given string and assigns it to the SettlementAccountId field.
func (o *Order) SetSettlementAccountId(v string) {
	o.SettlementAccountId = &v
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *Order) GetOrderId() string {
	if o == nil || IsNil(o.OrderId) {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *Order) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *Order) SetOrderId(v string) {
	o.OrderId = &v
}

// GetCreationTimestamp returns the CreationTimestamp field value if set, zero value otherwise.
func (o *Order) GetCreationTimestamp() TimestampString {
	if o == nil || IsNil(o.CreationTimestamp) {
		var ret TimestampString
		return ret
	}
	return *o.CreationTimestamp
}

// GetCreationTimestampOk returns a tuple with the CreationTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCreationTimestampOk() (*TimestampString, bool) {
	if o == nil || IsNil(o.CreationTimestamp) {
		return nil, false
	}
	return o.CreationTimestamp, true
}

// HasCreationTimestamp returns a boolean if a field has been set.
func (o *Order) HasCreationTimestamp() bool {
	if o != nil && !IsNil(o.CreationTimestamp) {
		return true
	}

	return false
}

// SetCreationTimestamp gets a reference to the given TimestampString and assigns it to the CreationTimestamp field.
func (o *Order) SetCreationTimestamp(v TimestampString) {
	o.CreationTimestamp = &v
}

// GetLegNumber returns the LegNumber field value if set, zero value otherwise.
func (o *Order) GetLegNumber() int32 {
	if o == nil || IsNil(o.LegNumber) {
		var ret int32
		return ret
	}
	return *o.LegNumber
}

// GetLegNumberOk returns a tuple with the LegNumber field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetLegNumberOk() (*int32, bool) {
	if o == nil || IsNil(o.LegNumber) {
		return nil, false
	}
	return o.LegNumber, true
}

// HasLegNumber returns a boolean if a field has been set.
func (o *Order) HasLegNumber() bool {
	if o != nil && !IsNil(o.LegNumber) {
		return true
	}

	return false
}

// SetLegNumber gets a reference to the given int32 and assigns it to the LegNumber field.
func (o *Order) SetLegNumber(v int32) {
	o.LegNumber = &v
}

// GetBestEx returns the BestEx field value if set, zero value otherwise.
func (o *Order) GetBestEx() bool {
	if o == nil || IsNil(o.BestEx) {
		var ret bool
		return ret
	}
	return *o.BestEx
}

// GetBestExOk returns a tuple with the BestEx field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetBestExOk() (*bool, bool) {
	if o == nil || IsNil(o.BestEx) {
		return nil, false
	}
	return o.BestEx, true
}

// HasBestEx returns a boolean if a field has been set.
func (o *Order) HasBestEx() bool {
	if o != nil && !IsNil(o.BestEx) {
		return true
	}

	return false
}

// SetBestEx gets a reference to the given bool and assigns it to the BestEx field.
func (o *Order) SetBestEx(v bool) {
	o.BestEx = &v
}

// GetOrderType returns the OrderType field value if set, zero value otherwise.
func (o *Order) GetOrderType() string {
	if o == nil || IsNil(o.OrderType) {
		var ret string
		return ret
	}
	return *o.OrderType
}

// GetOrderTypeOk returns a tuple with the OrderType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderTypeOk() (*string, bool) {
	if o == nil || IsNil(o.OrderType) {
		return nil, false
	}
	return o.OrderType, true
}

// HasOrderType returns a boolean if a field has been set.
func (o *Order) HasOrderType() bool {
	if o != nil && !IsNil(o.OrderType) {
		return true
	}

	return false
}

// SetOrderType gets a reference to the given string and assigns it to the OrderType field.
func (o *Order) SetOrderType(v string) {
	o.OrderType = &v
}

// GetOrderStatus returns the OrderStatus field value if set, zero value otherwise.
func (o *Order) GetOrderStatus() string {
	if o == nil || IsNil(o.OrderStatus) {
		var ret string
		return ret
	}
	return *o.OrderStatus
}

// GetOrderStatusOk returns a tuple with the OrderStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOrderStatusOk() (*string, bool) {
	if o == nil || IsNil(o.OrderStatus) {
		return nil, false
	}
	return o.OrderStatus, true
}

// HasOrderStatus returns a boolean if a field has been set.
func (o *Order) HasOrderStatus() bool {
	if o != nil && !IsNil(o.OrderStatus) {
		return true
	}

	return false
}

// SetOrderStatus gets a reference to the given string and assigns it to the OrderStatus field.
func (o *Order) SetOrderStatus(v string) {
	o.OrderStatus = &v
}

// GetSubOrders returns the SubOrders field value if set, zero value otherwise.
func (o *Order) GetSubOrders() []Order {
	if o == nil || IsNil(o.SubOrders) {
		var ret []Order
		return ret
	}
	return o.SubOrders
}

// GetSubOrdersOk returns a tuple with the SubOrders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetSubOrdersOk() ([]Order, bool) {
	if o == nil || IsNil(o.SubOrders) {
		return nil, false
	}
	return o.SubOrders, true
}

// HasSubOrders returns a boolean if a field has been set.
func (o *Order) HasSubOrders() bool {
	if o != nil && !IsNil(o.SubOrders) {
		return true
	}

	return false
}

// SetSubOrders gets a reference to the given []Order and assigns it to the SubOrders field.
func (o *Order) SetSubOrders(v []Order) {
	o.SubOrders = v
}

// GetSide returns the Side field value if set, zero value otherwise.
func (o *Order) GetSide() string {
	if o == nil || IsNil(o.Side) {
		var ret string
		return ret
	}
	return *o.Side
}

// GetSideOk returns a tuple with the Side field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetSideOk() (*string, bool) {
	if o == nil || IsNil(o.Side) {
		return nil, false
	}
	return o.Side, true
}

// HasSide returns a boolean if a field has been set.
func (o *Order) HasSide() bool {
	if o != nil && !IsNil(o.Side) {
		return true
	}

	return false
}

// SetSide gets a reference to the given string and assigns it to the Side field.
func (o *Order) SetSide(v string) {
	o.Side = &v
}

// GetInstrumentId returns the InstrumentId field value if set, zero value otherwise.
func (o *Order) GetInstrumentId() string {
	if o == nil || IsNil(o.InstrumentId) {
		var ret string
		return ret
	}
	return *o.InstrumentId
}

// GetInstrumentIdOk returns a tuple with the InstrumentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetInstrumentIdOk() (*string, bool) {
	if o == nil || IsNil(o.InstrumentId) {
		return nil, false
	}
	return o.InstrumentId, true
}

// HasInstrumentId returns a boolean if a field has been set.
func (o *Order) HasInstrumentId() bool {
	if o != nil && !IsNil(o.InstrumentId) {
		return true
	}

	return false
}

// SetInstrumentId gets a reference to the given string and assigns it to the InstrumentId field.
func (o *Order) SetInstrumentId(v string) {
	o.InstrumentId = &v
}

// GetQuoteId returns the QuoteId field value if set, zero value otherwise.
func (o *Order) GetQuoteId() string {
	if o == nil || IsNil(o.QuoteId) {
		var ret string
		return ret
	}
	return *o.QuoteId
}

// GetQuoteIdOk returns a tuple with the QuoteId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetQuoteIdOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteId) {
		return nil, false
	}
	return o.QuoteId, true
}

// HasQuoteId returns a boolean if a field has been set.
func (o *Order) HasQuoteId() bool {
	if o != nil && !IsNil(o.QuoteId) {
		return true
	}

	return false
}

// SetQuoteId gets a reference to the given string and assigns it to the QuoteId field.
func (o *Order) SetQuoteId(v string) {
	o.QuoteId = &v
}

// GetVenueId returns the VenueId field value if set, zero value otherwise.
func (o *Order) GetVenueId() string {
	if o == nil || IsNil(o.VenueId) {
		var ret string
		return ret
	}
	return *o.VenueId
}

// GetVenueIdOk returns a tuple with the VenueId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetVenueIdOk() (*string, bool) {
	if o == nil || IsNil(o.VenueId) {
		return nil, false
	}
	return o.VenueId, true
}

// HasVenueId returns a boolean if a field has been set.
func (o *Order) HasVenueId() bool {
	if o != nil && !IsNil(o.VenueId) {
		return true
	}

	return false
}

// SetVenueId gets a reference to the given string and assigns it to the VenueId field.
func (o *Order) SetVenueId(v string) {
	o.VenueId = &v
}

// GetQuantity returns the Quantity field value if set, zero value otherwise.
func (o *Order) GetQuantity() AmountValue {
	if o == nil || IsNil(o.Quantity) {
		var ret AmountValue
		return ret
	}
	return *o.Quantity
}

// GetQuantityOk returns a tuple with the Quantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetQuantityOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Quantity) {
		return nil, false
	}
	return o.Quantity, true
}

// HasQuantity returns a boolean if a field has been set.
func (o *Order) HasQuantity() bool {
	if o != nil && !IsNil(o.Quantity) {
		return true
	}

	return false
}

// SetQuantity gets a reference to the given AmountValue and assigns it to the Quantity field.
func (o *Order) SetQuantity(v AmountValue) {
	o.Quantity = &v
}

// GetOpenQuantity returns the OpenQuantity field value if set, zero value otherwise.
func (o *Order) GetOpenQuantity() AmountValue {
	if o == nil || IsNil(o.OpenQuantity) {
		var ret AmountValue
		return ret
	}
	return *o.OpenQuantity
}

// GetOpenQuantityOk returns a tuple with the OpenQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetOpenQuantityOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.OpenQuantity) {
		return nil, false
	}
	return o.OpenQuantity, true
}

// HasOpenQuantity returns a boolean if a field has been set.
func (o *Order) HasOpenQuantity() bool {
	if o != nil && !IsNil(o.OpenQuantity) {
		return true
	}

	return false
}

// SetOpenQuantity gets a reference to the given AmountValue and assigns it to the OpenQuantity field.
func (o *Order) SetOpenQuantity(v AmountValue) {
	o.OpenQuantity = &v
}

// GetCancelledQuantity returns the CancelledQuantity field value if set, zero value otherwise.
func (o *Order) GetCancelledQuantity() AmountValue {
	if o == nil || IsNil(o.CancelledQuantity) {
		var ret AmountValue
		return ret
	}
	return *o.CancelledQuantity
}

// GetCancelledQuantityOk returns a tuple with the CancelledQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetCancelledQuantityOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.CancelledQuantity) {
		return nil, false
	}
	return o.CancelledQuantity, true
}

// HasCancelledQuantity returns a boolean if a field has been set.
func (o *Order) HasCancelledQuantity() bool {
	if o != nil && !IsNil(o.CancelledQuantity) {
		return true
	}

	return false
}

// SetCancelledQuantity gets a reference to the given AmountValue and assigns it to the CancelledQuantity field.
func (o *Order) SetCancelledQuantity(v AmountValue) {
	o.CancelledQuantity = &v
}

// GetExecutedQuantity returns the ExecutedQuantity field value if set, zero value otherwise.
func (o *Order) GetExecutedQuantity() AmountValue {
	if o == nil || IsNil(o.ExecutedQuantity) {
		var ret AmountValue
		return ret
	}
	return *o.ExecutedQuantity
}

// GetExecutedQuantityOk returns a tuple with the ExecutedQuantity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetExecutedQuantityOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.ExecutedQuantity) {
		return nil, false
	}
	return o.ExecutedQuantity, true
}

// HasExecutedQuantity returns a boolean if a field has been set.
func (o *Order) HasExecutedQuantity() bool {
	if o != nil && !IsNil(o.ExecutedQuantity) {
		return true
	}

	return false
}

// SetExecutedQuantity gets a reference to the given AmountValue and assigns it to the ExecutedQuantity field.
func (o *Order) SetExecutedQuantity(v AmountValue) {
	o.ExecutedQuantity = &v
}

// GetLimitExtension returns the LimitExtension field value if set, zero value otherwise.
func (o *Order) GetLimitExtension() string {
	if o == nil || IsNil(o.LimitExtension) {
		var ret string
		return ret
	}
	return *o.LimitExtension
}

// GetLimitExtensionOk returns a tuple with the LimitExtension field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetLimitExtensionOk() (*string, bool) {
	if o == nil || IsNil(o.LimitExtension) {
		return nil, false
	}
	return o.LimitExtension, true
}

// HasLimitExtension returns a boolean if a field has been set.
func (o *Order) HasLimitExtension() bool {
	if o != nil && !IsNil(o.LimitExtension) {
		return true
	}

	return false
}

// SetLimitExtension gets a reference to the given string and assigns it to the LimitExtension field.
func (o *Order) SetLimitExtension(v string) {
	o.LimitExtension = &v
}

// GetTradingRestriction returns the TradingRestriction field value if set, zero value otherwise.
func (o *Order) GetTradingRestriction() string {
	if o == nil || IsNil(o.TradingRestriction) {
		var ret string
		return ret
	}
	return *o.TradingRestriction
}

// GetTradingRestrictionOk returns a tuple with the TradingRestriction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTradingRestrictionOk() (*string, bool) {
	if o == nil || IsNil(o.TradingRestriction) {
		return nil, false
	}
	return o.TradingRestriction, true
}

// HasTradingRestriction returns a boolean if a field has been set.
func (o *Order) HasTradingRestriction() bool {
	if o != nil && !IsNil(o.TradingRestriction) {
		return true
	}

	return false
}

// SetTradingRestriction gets a reference to the given string and assigns it to the TradingRestriction field.
func (o *Order) SetTradingRestriction(v string) {
	o.TradingRestriction = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *Order) GetLimit() AmountValue {
	if o == nil || IsNil(o.Limit) {
		var ret AmountValue
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetLimitOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *Order) HasLimit() bool {
	if o != nil && !IsNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given AmountValue and assigns it to the Limit field.
func (o *Order) SetLimit(v AmountValue) {
	o.Limit = &v
}

// GetTriggerLimit returns the TriggerLimit field value if set, zero value otherwise.
func (o *Order) GetTriggerLimit() AmountValue {
	if o == nil || IsNil(o.TriggerLimit) {
		var ret AmountValue
		return ret
	}
	return *o.TriggerLimit
}

// GetTriggerLimitOk returns a tuple with the TriggerLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTriggerLimitOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.TriggerLimit) {
		return nil, false
	}
	return o.TriggerLimit, true
}

// HasTriggerLimit returns a boolean if a field has been set.
func (o *Order) HasTriggerLimit() bool {
	if o != nil && !IsNil(o.TriggerLimit) {
		return true
	}

	return false
}

// SetTriggerLimit gets a reference to the given AmountValue and assigns it to the TriggerLimit field.
func (o *Order) SetTriggerLimit(v AmountValue) {
	o.TriggerLimit = &v
}

// GetTrailingLimitDistAbs returns the TrailingLimitDistAbs field value if set, zero value otherwise.
func (o *Order) GetTrailingLimitDistAbs() AmountValue {
	if o == nil || IsNil(o.TrailingLimitDistAbs) {
		var ret AmountValue
		return ret
	}
	return *o.TrailingLimitDistAbs
}

// GetTrailingLimitDistAbsOk returns a tuple with the TrailingLimitDistAbs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTrailingLimitDistAbsOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.TrailingLimitDistAbs) {
		return nil, false
	}
	return o.TrailingLimitDistAbs, true
}

// HasTrailingLimitDistAbs returns a boolean if a field has been set.
func (o *Order) HasTrailingLimitDistAbs() bool {
	if o != nil && !IsNil(o.TrailingLimitDistAbs) {
		return true
	}

	return false
}

// SetTrailingLimitDistAbs gets a reference to the given AmountValue and assigns it to the TrailingLimitDistAbs field.
func (o *Order) SetTrailingLimitDistAbs(v AmountValue) {
	o.TrailingLimitDistAbs = &v
}

// GetTrailingLimitDistRel returns the TrailingLimitDistRel field value if set, zero value otherwise.
func (o *Order) GetTrailingLimitDistRel() PercentageString {
	if o == nil || IsNil(o.TrailingLimitDistRel) {
		var ret PercentageString
		return ret
	}
	return *o.TrailingLimitDistRel
}

// GetTrailingLimitDistRelOk returns a tuple with the TrailingLimitDistRel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetTrailingLimitDistRelOk() (*PercentageString, bool) {
	if o == nil || IsNil(o.TrailingLimitDistRel) {
		return nil, false
	}
	return o.TrailingLimitDistRel, true
}

// HasTrailingLimitDistRel returns a boolean if a field has been set.
func (o *Order) HasTrailingLimitDistRel() bool {
	if o != nil && !IsNil(o.TrailingLimitDistRel) {
		return true
	}

	return false
}

// SetTrailingLimitDistRel gets a reference to the given PercentageString and assigns it to the TrailingLimitDistRel field.
func (o *Order) SetTrailingLimitDistRel(v PercentageString) {
	o.TrailingLimitDistRel = &v
}

// GetValidityType returns the ValidityType field value if set, zero value otherwise.
func (o *Order) GetValidityType() string {
	if o == nil || IsNil(o.ValidityType) {
		var ret string
		return ret
	}
	return *o.ValidityType
}

// GetValidityTypeOk returns a tuple with the ValidityType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetValidityTypeOk() (*string, bool) {
	if o == nil || IsNil(o.ValidityType) {
		return nil, false
	}
	return o.ValidityType, true
}

// HasValidityType returns a boolean if a field has been set.
func (o *Order) HasValidityType() bool {
	if o != nil && !IsNil(o.ValidityType) {
		return true
	}

	return false
}

// SetValidityType gets a reference to the given string and assigns it to the ValidityType field.
func (o *Order) SetValidityType(v string) {
	o.ValidityType = &v
}

// GetValidity returns the Validity field value if set, zero value otherwise.
func (o *Order) GetValidity() DateString {
	if o == nil || IsNil(o.Validity) {
		var ret DateString
		return ret
	}
	return *o.Validity
}

// GetValidityOk returns a tuple with the Validity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetValidityOk() (*DateString, bool) {
	if o == nil || IsNil(o.Validity) {
		return nil, false
	}
	return o.Validity, true
}

// HasValidity returns a boolean if a field has been set.
func (o *Order) HasValidity() bool {
	if o != nil && !IsNil(o.Validity) {
		return true
	}

	return false
}

// SetValidity gets a reference to the given DateString and assigns it to the Validity field.
func (o *Order) SetValidity(v DateString) {
	o.Validity = &v
}

// GetExpectedValue returns the ExpectedValue field value if set, zero value otherwise.
func (o *Order) GetExpectedValue() AmountValue {
	if o == nil || IsNil(o.ExpectedValue) {
		var ret AmountValue
		return ret
	}
	return *o.ExpectedValue
}

// GetExpectedValueOk returns a tuple with the ExpectedValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetExpectedValueOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.ExpectedValue) {
		return nil, false
	}
	return o.ExpectedValue, true
}

// HasExpectedValue returns a boolean if a field has been set.
func (o *Order) HasExpectedValue() bool {
	if o != nil && !IsNil(o.ExpectedValue) {
		return true
	}

	return false
}

// SetExpectedValue gets a reference to the given AmountValue and assigns it to the ExpectedValue field.
func (o *Order) SetExpectedValue(v AmountValue) {
	o.ExpectedValue = &v
}

// GetExecutions returns the Executions field value if set, zero value otherwise.
func (o *Order) GetExecutions() []Execution {
	if o == nil || IsNil(o.Executions) {
		var ret []Execution
		return ret
	}
	return o.Executions
}

// GetExecutionsOk returns a tuple with the Executions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetExecutionsOk() ([]Execution, bool) {
	if o == nil || IsNil(o.Executions) {
		return nil, false
	}
	return o.Executions, true
}

// HasExecutions returns a boolean if a field has been set.
func (o *Order) HasExecutions() bool {
	if o != nil && !IsNil(o.Executions) {
		return true
	}

	return false
}

// SetExecutions gets a reference to the given []Execution and assigns it to the Executions field.
func (o *Order) SetExecutions(v []Execution) {
	o.Executions = v
}

// GetQuoteTicketId returns the QuoteTicketId field value if set, zero value otherwise.
func (o *Order) GetQuoteTicketId() string {
	if o == nil || IsNil(o.QuoteTicketId) {
		var ret string
		return ret
	}
	return *o.QuoteTicketId
}

// GetQuoteTicketIdOk returns a tuple with the QuoteTicketId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetQuoteTicketIdOk() (*string, bool) {
	if o == nil || IsNil(o.QuoteTicketId) {
		return nil, false
	}
	return o.QuoteTicketId, true
}

// HasQuoteTicketId returns a boolean if a field has been set.
func (o *Order) HasQuoteTicketId() bool {
	if o != nil && !IsNil(o.QuoteTicketId) {
		return true
	}

	return false
}

// SetQuoteTicketId gets a reference to the given string and assigns it to the QuoteTicketId field.
func (o *Order) SetQuoteTicketId(v string) {
	o.QuoteTicketId = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *Order) GetVersion() string {
	if o == nil || IsNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Order) GetVersionOk() (*string, bool) {
	if o == nil || IsNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *Order) HasVersion() bool {
	if o != nil && !IsNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *Order) SetVersion(v string) {
	o.Version = &v
}

func (o Order) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Order) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DepotId) {
		toSerialize["depotId"] = o.DepotId
	}
	if !IsNil(o.SettlementAccountId) {
		toSerialize["settlementAccountId"] = o.SettlementAccountId
	}
	if !IsNil(o.OrderId) {
		toSerialize["orderId"] = o.OrderId
	}
	if !IsNil(o.CreationTimestamp) {
		toSerialize["creationTimestamp"] = o.CreationTimestamp
	}
	if !IsNil(o.LegNumber) {
		toSerialize["legNumber"] = o.LegNumber
	}
	if !IsNil(o.BestEx) {
		toSerialize["bestEx"] = o.BestEx
	}
	if !IsNil(o.OrderType) {
		toSerialize["orderType"] = o.OrderType
	}
	if !IsNil(o.OrderStatus) {
		toSerialize["orderStatus"] = o.OrderStatus
	}
	if !IsNil(o.SubOrders) {
		toSerialize["subOrders"] = o.SubOrders
	}
	if !IsNil(o.Side) {
		toSerialize["side"] = o.Side
	}
	if !IsNil(o.InstrumentId) {
		toSerialize["instrumentId"] = o.InstrumentId
	}
	if !IsNil(o.QuoteId) {
		toSerialize["quoteId"] = o.QuoteId
	}
	if !IsNil(o.VenueId) {
		toSerialize["venueId"] = o.VenueId
	}
	if !IsNil(o.Quantity) {
		toSerialize["quantity"] = o.Quantity
	}
	if !IsNil(o.OpenQuantity) {
		toSerialize["openQuantity"] = o.OpenQuantity
	}
	if !IsNil(o.CancelledQuantity) {
		toSerialize["cancelledQuantity"] = o.CancelledQuantity
	}
	if !IsNil(o.ExecutedQuantity) {
		toSerialize["executedQuantity"] = o.ExecutedQuantity
	}
	if !IsNil(o.LimitExtension) {
		toSerialize["limitExtension"] = o.LimitExtension
	}
	if !IsNil(o.TradingRestriction) {
		toSerialize["tradingRestriction"] = o.TradingRestriction
	}
	if !IsNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	if !IsNil(o.TriggerLimit) {
		toSerialize["triggerLimit"] = o.TriggerLimit
	}
	if !IsNil(o.TrailingLimitDistAbs) {
		toSerialize["trailingLimitDistAbs"] = o.TrailingLimitDistAbs
	}
	if !IsNil(o.TrailingLimitDistRel) {
		toSerialize["trailingLimitDistRel"] = o.TrailingLimitDistRel
	}
	if !IsNil(o.ValidityType) {
		toSerialize["validityType"] = o.ValidityType
	}
	if !IsNil(o.Validity) {
		toSerialize["validity"] = o.Validity
	}
	if !IsNil(o.ExpectedValue) {
		toSerialize["expectedValue"] = o.ExpectedValue
	}
	if !IsNil(o.Executions) {
		toSerialize["executions"] = o.Executions
	}
	if !IsNil(o.QuoteTicketId) {
		toSerialize["quoteTicketId"] = o.QuoteTicketId
	}
	if !IsNil(o.Version) {
		toSerialize["version"] = o.Version
	}
	return toSerialize, nil
}

type NullableOrder struct {
	value *Order
	isSet bool
}

func (v NullableOrder) Get() *Order {
	return v.value
}

func (v *NullableOrder) Set(val *Order) {
	v.value = val
	v.isSet = true
}

func (v NullableOrder) IsSet() bool {
	return v.isSet
}

func (v *NullableOrder) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrder(val *Order) *NullableOrder {
	return &NullableOrder{value: val, isSet: true}
}

func (v NullableOrder) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrder) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


