/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the Session type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Session{}

// Session Model for the current session.
type Session struct {
	Id *int64 `json:"id,omitempty"`
	// Identifier of the session
	Identifier *string `json:"identifier,omitempty"`
	// This boolean is used to point out whether or not the current session has an active session TAN (transaction authentication number). With an active session TAN some use cases, that are genuinely TAN protected, might be callable without asking the client for a TAN. The validation method of session TAN ready use cases will return \"TAN_FREE\" as a TAN type while the session TAN is activated. The session TAN will be available after a refresh of tokens and dies with the last pair of tokens (access and refresh token).
	SessionTanActive *bool `json:"sessionTanActive,omitempty"`
	// Boolean indicating whether a second factor is already added to this session
	Activated2FA *bool `json:"activated2FA,omitempty"`
}

// NewSession instantiates a new Session object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSession() *Session {
	this := Session{}
	var sessionTanActive bool = false
	this.SessionTanActive = &sessionTanActive
	var activated2FA bool = false
	this.Activated2FA = &activated2FA
	return &this
}

// NewSessionWithDefaults instantiates a new Session object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionWithDefaults() *Session {
	this := Session{}
	var sessionTanActive bool = false
	this.SessionTanActive = &sessionTanActive
	var activated2FA bool = false
	this.Activated2FA = &activated2FA
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Session) GetId() int64 {
	if o == nil || IsNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetIdOk() (*int64, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Session) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *Session) SetId(v int64) {
	o.Id = &v
}

// GetIdentifier returns the Identifier field value if set, zero value otherwise.
func (o *Session) GetIdentifier() string {
	if o == nil || IsNil(o.Identifier) {
		var ret string
		return ret
	}
	return *o.Identifier
}

// GetIdentifierOk returns a tuple with the Identifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.Identifier) {
		return nil, false
	}
	return o.Identifier, true
}

// HasIdentifier returns a boolean if a field has been set.
func (o *Session) HasIdentifier() bool {
	if o != nil && !IsNil(o.Identifier) {
		return true
	}

	return false
}

// SetIdentifier gets a reference to the given string and assigns it to the Identifier field.
func (o *Session) SetIdentifier(v string) {
	o.Identifier = &v
}

// GetSessionTanActive returns the SessionTanActive field value if set, zero value otherwise.
func (o *Session) GetSessionTanActive() bool {
	if o == nil || IsNil(o.SessionTanActive) {
		var ret bool
		return ret
	}
	return *o.SessionTanActive
}

// GetSessionTanActiveOk returns a tuple with the SessionTanActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetSessionTanActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.SessionTanActive) {
		return nil, false
	}
	return o.SessionTanActive, true
}

// HasSessionTanActive returns a boolean if a field has been set.
func (o *Session) HasSessionTanActive() bool {
	if o != nil && !IsNil(o.SessionTanActive) {
		return true
	}

	return false
}

// SetSessionTanActive gets a reference to the given bool and assigns it to the SessionTanActive field.
func (o *Session) SetSessionTanActive(v bool) {
	o.SessionTanActive = &v
}

// GetActivated2FA returns the Activated2FA field value if set, zero value otherwise.
func (o *Session) GetActivated2FA() bool {
	if o == nil || IsNil(o.Activated2FA) {
		var ret bool
		return ret
	}
	return *o.Activated2FA
}

// GetActivated2FAOk returns a tuple with the Activated2FA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Session) GetActivated2FAOk() (*bool, bool) {
	if o == nil || IsNil(o.Activated2FA) {
		return nil, false
	}
	return o.Activated2FA, true
}

// HasActivated2FA returns a boolean if a field has been set.
func (o *Session) HasActivated2FA() bool {
	if o != nil && !IsNil(o.Activated2FA) {
		return true
	}

	return false
}

// SetActivated2FA gets a reference to the given bool and assigns it to the Activated2FA field.
func (o *Session) SetActivated2FA(v bool) {
	o.Activated2FA = &v
}

func (o Session) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Session) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Identifier) {
		toSerialize["identifier"] = o.Identifier
	}
	if !IsNil(o.SessionTanActive) {
		toSerialize["sessionTanActive"] = o.SessionTanActive
	}
	if !IsNil(o.Activated2FA) {
		toSerialize["activated2FA"] = o.Activated2FA
	}
	return toSerialize, nil
}

type NullableSession struct {
	value *Session
	isSet bool
}

func (v NullableSession) Get() *Session {
	return v.value
}

func (v *NullableSession) Set(val *Session) {
	v.value = val
	v.isSet = true
}

func (v NullableSession) IsSet() bool {
	return v.isSet
}

func (v *NullableSession) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSession(val *Session) *NullableSession {
	return &NullableSession{value: val, isSet: true}
}

func (v NullableSession) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSession) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


