/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
	"fmt"
	"strconv"
	"strings"
)

// PercentageString Represents the percentage value.
type PercentageString struct {
	PercentString *string
}

// NewPercentageString instantiates a new PercentageString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPercentageString() *PercentageString {
	this := PercentageString{}
	return &this
}

// NewPercentageStringWithDefaults instantiates a new PercentageString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPercentageStringWithDefaults() *PercentageString {
	this := PercentageString{}
	return &this
}

// GetPercentString returns the PercentString field value if set, zero value otherwise.
func (o *PercentageString) GetPercentString() string {
	if o == nil || IsNil(o.PercentString) {
		var ret string
		return ret
	}
	return *o.PercentString
}

// GetPercentStringOk returns a tuple with the PercentString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PercentageString) GetPercentStringOk() (*string, bool) {
	if o == nil || IsNil(o.PercentString) {
		return nil, false
	}
	return o.PercentString, true
}

// HasPercentString returns a boolean if a field has been set.
func (o *PercentageString) HasPercentString() bool {
	if o != nil && !IsNil(o.PercentString) {
		return true
	}

	return false
}

// SetPercentString gets a reference to the given string and assigns it to the PercentString field.
func (o *PercentageString) SetPercentString(v string) {
	o.PercentString = &v
}

func (o *PercentageString) MarshalJSON() ([]byte, error) {
	if o.PercentString != nil {
		return []byte(`"` + *o.PercentString + `"`), nil
	}
	return []byte(""), nil
}

func (o *PercentageString) UnmarshalJSON(b []byte) error {
	s := strings.Trim(string(b), `"`)
	if s == "" {
		return nil
	}
	_, err := strconv.ParseFloat(s, 64)
	if err != nil {
		return fmt.Errorf("invalid PercentageString: %v", err)
	}
	o.PercentString = &s
	return nil
}

type NullablePercentageString struct {
	value *PercentageString
	isSet bool
}

func (v NullablePercentageString) Get() *PercentageString {
	return v.value
}

func (v *NullablePercentageString) Set(val *PercentageString) {
	v.value = val
	v.isSet = true
}

func (v NullablePercentageString) IsSet() bool {
	return v.isSet
}

func (v *NullablePercentageString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePercentageString(val *PercentageString) *NullablePercentageString {
	return &NullablePercentageString{value: val, isSet: true}
}

func (v NullablePercentageString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePercentageString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
