/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
	"time"
)

// checks if the TimestampString type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TimestampString{}

// TimestampString Represents the date with up to 6 fractions of seconds.
type TimestampString struct {
	// Date and time with following format: 'yyyy-MM-dd'T'HH:mm:ss,SSSSSSX'
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// NewTimestampString instantiates a new TimestampString object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTimestampString() *TimestampString {
	this := TimestampString{}
	return &this
}

// NewTimestampStringWithDefaults instantiates a new TimestampString object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTimestampStringWithDefaults() *TimestampString {
	this := TimestampString{}
	return &this
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *TimestampString) GetTimestamp() time.Time {
	if o == nil || IsNil(o.Timestamp) {
		var ret time.Time
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TimestampString) GetTimestampOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Timestamp) {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *TimestampString) HasTimestamp() bool {
	if o != nil && !IsNil(o.Timestamp) {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given time.Time and assigns it to the Timestamp field.
func (o *TimestampString) SetTimestamp(v time.Time) {
	o.Timestamp = &v
}

func (o TimestampString) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TimestampString) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Timestamp) {
		toSerialize["timestamp"] = o.Timestamp
	}
	return toSerialize, nil
}

type NullableTimestampString struct {
	value *TimestampString
	isSet bool
}

func (v NullableTimestampString) Get() *TimestampString {
	return v.value
}

func (v *NullableTimestampString) Set(val *TimestampString) {
	v.value = val
	v.isSet = true
}

func (v NullableTimestampString) IsSet() bool {
	return v.isSet
}

func (v *NullableTimestampString) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTimestampString(val *TimestampString) *NullableTimestampString {
	return &NullableTimestampString{value: val, isSet: true}
}

func (v NullableTimestampString) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTimestampString) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


