/*
comdirect REST API

Please have a look at the interfaces of comdirect REST API below. Note: Currently it is not possible to request an access token via swagger UI tools because of comdirect's proprietary authorization flow. The shown error message is due to that circumstance.

API version: 20.04
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package comdirect

import (
	"encoding/json"
)

// checks if the CostEntry type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CostEntry{}

// CostEntry Cost entry of a cost group.
type CostEntry struct {
	// Type of the cost entry
	Type *string `json:"type,omitempty"`
	// Label of the cost entry
	Label *string `json:"label,omitempty"`
	Amount *AmountValue `json:"amount,omitempty"`
	AmountReportingCurrency *AmountValue `json:"amountReportingCurrency,omitempty"`
	Inducement *Inducement `json:"inducement,omitempty"`
}

// NewCostEntry instantiates a new CostEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCostEntry() *CostEntry {
	this := CostEntry{}
	return &this
}

// NewCostEntryWithDefaults instantiates a new CostEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCostEntryWithDefaults() *CostEntry {
	this := CostEntry{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *CostEntry) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostEntry) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *CostEntry) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *CostEntry) SetType(v string) {
	o.Type = &v
}

// GetLabel returns the Label field value if set, zero value otherwise.
func (o *CostEntry) GetLabel() string {
	if o == nil || IsNil(o.Label) {
		var ret string
		return ret
	}
	return *o.Label
}

// GetLabelOk returns a tuple with the Label field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostEntry) GetLabelOk() (*string, bool) {
	if o == nil || IsNil(o.Label) {
		return nil, false
	}
	return o.Label, true
}

// HasLabel returns a boolean if a field has been set.
func (o *CostEntry) HasLabel() bool {
	if o != nil && !IsNil(o.Label) {
		return true
	}

	return false
}

// SetLabel gets a reference to the given string and assigns it to the Label field.
func (o *CostEntry) SetLabel(v string) {
	o.Label = &v
}

// GetAmount returns the Amount field value if set, zero value otherwise.
func (o *CostEntry) GetAmount() AmountValue {
	if o == nil || IsNil(o.Amount) {
		var ret AmountValue
		return ret
	}
	return *o.Amount
}

// GetAmountOk returns a tuple with the Amount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostEntry) GetAmountOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.Amount) {
		return nil, false
	}
	return o.Amount, true
}

// HasAmount returns a boolean if a field has been set.
func (o *CostEntry) HasAmount() bool {
	if o != nil && !IsNil(o.Amount) {
		return true
	}

	return false
}

// SetAmount gets a reference to the given AmountValue and assigns it to the Amount field.
func (o *CostEntry) SetAmount(v AmountValue) {
	o.Amount = &v
}

// GetAmountReportingCurrency returns the AmountReportingCurrency field value if set, zero value otherwise.
func (o *CostEntry) GetAmountReportingCurrency() AmountValue {
	if o == nil || IsNil(o.AmountReportingCurrency) {
		var ret AmountValue
		return ret
	}
	return *o.AmountReportingCurrency
}

// GetAmountReportingCurrencyOk returns a tuple with the AmountReportingCurrency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostEntry) GetAmountReportingCurrencyOk() (*AmountValue, bool) {
	if o == nil || IsNil(o.AmountReportingCurrency) {
		return nil, false
	}
	return o.AmountReportingCurrency, true
}

// HasAmountReportingCurrency returns a boolean if a field has been set.
func (o *CostEntry) HasAmountReportingCurrency() bool {
	if o != nil && !IsNil(o.AmountReportingCurrency) {
		return true
	}

	return false
}

// SetAmountReportingCurrency gets a reference to the given AmountValue and assigns it to the AmountReportingCurrency field.
func (o *CostEntry) SetAmountReportingCurrency(v AmountValue) {
	o.AmountReportingCurrency = &v
}

// GetInducement returns the Inducement field value if set, zero value otherwise.
func (o *CostEntry) GetInducement() Inducement {
	if o == nil || IsNil(o.Inducement) {
		var ret Inducement
		return ret
	}
	return *o.Inducement
}

// GetInducementOk returns a tuple with the Inducement field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CostEntry) GetInducementOk() (*Inducement, bool) {
	if o == nil || IsNil(o.Inducement) {
		return nil, false
	}
	return o.Inducement, true
}

// HasInducement returns a boolean if a field has been set.
func (o *CostEntry) HasInducement() bool {
	if o != nil && !IsNil(o.Inducement) {
		return true
	}

	return false
}

// SetInducement gets a reference to the given Inducement and assigns it to the Inducement field.
func (o *CostEntry) SetInducement(v Inducement) {
	o.Inducement = &v
}

func (o CostEntry) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CostEntry) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Label) {
		toSerialize["label"] = o.Label
	}
	if !IsNil(o.Amount) {
		toSerialize["amount"] = o.Amount
	}
	if !IsNil(o.AmountReportingCurrency) {
		toSerialize["amountReportingCurrency"] = o.AmountReportingCurrency
	}
	if !IsNil(o.Inducement) {
		toSerialize["inducement"] = o.Inducement
	}
	return toSerialize, nil
}

type NullableCostEntry struct {
	value *CostEntry
	isSet bool
}

func (v NullableCostEntry) Get() *CostEntry {
	return v.value
}

func (v *NullableCostEntry) Set(val *CostEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableCostEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableCostEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCostEntry(val *CostEntry) *NullableCostEntry {
	return &NullableCostEntry{value: val, isSet: true}
}

func (v NullableCostEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCostEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


